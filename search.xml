<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>父母与孩子的家庭教育</title>
      <link href="/2019/10/18/abstract001fuaimuai/"/>
      <url>/2019/10/18/abstract001fuaimuai/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>&emsp;&emsp;在如今孩子的教育中，单靠学校教育是远远不够的，父亲和母亲才是影响孩子一生的人，在家庭教育中，无论是父亲还是母亲，都不可或缺，少了哪一方都可能造成孩子发展的失衡。<br>&emsp;&emsp;所以，每一位父亲和母亲，都要发挥自己的优势，在自己擅长的地方，给孩子最好的教育，只有这样，才能让孩子全面发展，让孩子既可以飞得高，也能飞得远，拥有一个成功而又幸福的人生。<br><a id="more"></a>  </p><h2 id="父亲的格局决定孩子能飞多高"><a href="#父亲的格局决定孩子能飞多高" class="headerlink" title="父亲的格局决定孩子能飞多高"></a>父亲的格局决定孩子能飞多高</h2><p>&emsp;&emsp;有心理学家指出，在孩子12岁之前，往往会把父亲当成自己的偶像。<br>&emsp;&emsp;孩子对父亲往往有一种强烈的崇拜之情，把父亲当成智慧和力量的象征。<br>&emsp;&emsp;孩子会下意识的去模仿父亲的行为方式。在心智成熟之后，会努力去抵达或者超越父亲的高度。<br>&emsp;&emsp;曾国藩之子曾纪泽就是一个例子，曾纪泽以父亲为榜样，为人处世、做官做事都向父亲学习。入朝为官，在政治事务中表现出不亚于其父亲的能力。<br>&emsp;&emsp;曾国藩在处理外交事务——“天津教案”中，处置失当，名声跌落谷底，曾国藩意识到外交的重要性，于是常常告诫曾纪泽要开眼看世界。曾纪泽就学习外语，势要在父亲跌倒的地方爬起来。果不其然，曾纪泽在后来的外交事务中发挥出色，在新疆的领土争端中捍卫了国家利益，成为当时中国最著名的外交家。<br>&emsp;&emsp;而且相对母亲而言，父亲不会溺爱孩子，他们往往给孩子指明一个方向，让孩子用自己的力量去抵达。<br>&emsp;&emsp;孩子有较大的空间去发挥，也可以锻炼自立的能力。<br>&emsp;&emsp;所以，父亲给孩子最好的教育，不是事无巨细的体贴照顾，而是指引方向的立志教育。<br>&emsp;&emsp;一个好的父亲，一定要在格局和立志上为孩子做好榜样，这在未来将会决定孩子所能抵达的上限。 </p><h2 id="父爱的充足保证了孩子的安全感"><a href="#父爱的充足保证了孩子的安全感" class="headerlink" title="父爱的充足保证了孩子的安全感"></a>父爱的充足保证了孩子的安全感</h2><p>&emsp;&emsp;随着如今教育成本的增加，父亲作为家庭的经济支柱，往往承担着巨大的经济压力，为了工作，往往很少有时间陪伴家庭，这就造成了孩子教育上的巨大缺失。<br>&emsp;&emsp;幼年缺乏父爱的孩子往往缺乏安全感，都说父爱如山，孩子身边没有一个坚实的依靠的时候，就会变自卑、焦虑。<br>&emsp;&emsp;长大之后，哪怕成为一个健壮的大人，孩子也无法摆脱这种不安全感。<br>&emsp;&emsp;这样的孩子在事业上很容易墨守成规，恐惧失败，不敢突破创新，不敢做出新的尝试。<br>&emsp;&emsp;这往往会使得他的事业受到局限，不能突破固有的局面，打开新的天地，这严重制约了个人事业所能达到的高度。<br>&emsp;&emsp;所以，无论再忙，身为父亲也一定要抽出时间多陪陪孩子，父亲的关爱会让孩子觉得自己有一个足够坚强的后盾，很容易产生安全感，这样的情况下，做事就会自信很多，而不是畏手畏脚。 </p><h2 id="母亲的修养决定了孩子的品德"><a href="#母亲的修养决定了孩子的品德" class="headerlink" title="母亲的修养决定了孩子的品德"></a>母亲的修养决定了孩子的品德</h2><p>&emsp;&emsp;奥地利个关爱女孩协会有一个非常著名的提问：如果一个家庭有一双儿女，但只有一笔教育经费，你投给谁？他们的答案是：投给女孩。因为教育了一个男孩，你只教育了一个个体，而教育了一个女孩你就教育了一个家庭，教育了一个民族，教育了一个国家。<br>&emsp;&emsp;这并不是虚言，在一个家庭里，母亲的修养决定了孩子的品德。<br>&emsp;&emsp;婴儿时期 ，人的意识极为单纯 ，行为习惯也不固定 ，在心理上对母亲有一种独有的依恋。母亲的行为举止、思想品德 ，容易在子女心灵上留下深刻的烙印 ，逐步形成善与恶 、真与假 、好与坏 、是与非的最初概念 ，而这个时期的基础打得如何 ，将决定他们成为怎样一个人。<br>&emsp;&emsp;正如著名教育学家苏霍姆林斯基在《家庭教育学》一书中所说 ：“ 孩子道德发展的源泉在于母亲的智慧 、情感和内心的激情 ，人在自己的道德发展中变得如何，决定于有什么样的母亲。”<br>&emsp;&emsp;一个人的品德如何决定了他是否能够在社会中立足。是否能够和人好好相处，是否可以在大是大非面前不犯原则性错误。这样的人，可能不会有十分惊艳的表现，但是胜在踏实稳定，耐力悠长，人生之路也自然可以走得更远一些。 </p><h2 id="母爱如水，温柔宽厚"><a href="#母爱如水，温柔宽厚" class="headerlink" title="母爱如水，温柔宽厚"></a>母爱如水，温柔宽厚</h2><p>&emsp;&emsp;我们常说严父慈母，母亲对待孩子往往更温柔、更宽厚，父亲往往更为严厉，女性的特质决定了母亲在教育中往往更能包容理解，也更有耐心。<br>&emsp;&emsp;所以在单亲家庭长大的孩子，如果是由父亲带大的女孩一般比较像男孩子，脾气往往比较直接。<br>&emsp;&emsp;被母亲带大的男孩则一般比较温柔宽厚，包容性更强，不喜欢咄咄逼人。<br>&emsp;&emsp;老子讲，柔能克刚，懂得包容往往比一味刚强更有力量。<br>&emsp;&emsp;胡适就是一个很好的例子。胡适三岁父亲去世，被母亲带大，他虽然是进步青年，却有着那一代人没有的包容与宽厚。<br>&emsp;&emsp;胡适在回忆自己母亲的文章里也曾经指出，自己性格中的宽厚，得益于母亲对他的教育。<br>&emsp;&emsp;在那个时代，几乎所有的进步青年都选择放弃包办婚姻，无论是徐志摩还是鲁迅，他们都选择丢下原配，去追求自己的幸福。<br>&emsp;&emsp;但是胡适却没有丢下他的包办婚姻。他的妻子江冬秀不识字，喜欢打麻将，经常不给胡适做饭，脾气还很暴躁，但是胡适就这样包容下来，两个人就这样相互包容着过了一辈子。<br>&emsp;&emsp;鲁迅当年的论战，几乎把文坛骂了一个遍，也骂过胡适，但是胡适却从没有回应过，而当时无论是鲁迅的好友还是鲁迅的论敌，和胡适都相处地十分融洽。<br>&emsp;&emsp;胡适本人的宽厚包容可见一斑。<br>&emsp;&emsp;母亲特有的温柔和宽容，能够让孩子养成宽厚待人的处事方式，这样的孩子不尖锐，在踏入社会之后，往往有很强的适应能力，心理健康程度也比平均水平要高很多，事业发展也很少受到大的挫折。事业发展、人际关系都相对稳定，不容易出现激烈的变动，人生相对平和幸福。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活在自己的阳光下</title>
      <link href="/2019/10/16/abstract00/"/>
      <url>/2019/10/16/abstract00/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="人生一辈子，不要活在别人的眼里，要活在自己的阳光下"><a href="#人生一辈子，不要活在别人的眼里，要活在自己的阳光下" class="headerlink" title="人生一辈子，不要活在别人的眼里，要活在自己的阳光下"></a>人生一辈子，不要活在别人的眼里，要活在自己的阳光下</h1><a id="more"></a>  <blockquote><p>起风的清晨，绚丽的黄昏，流星的夜晚，总会有七彩色，构成了大自然，构成了人类，物以类聚，人以群分，三人行必有我师，潜移默化的力量是不可怱视，真诚，善良，正直，包容，遵重，感恩的心不能变。 </p></blockquote><blockquote><p>大千世界，喜欢你的人很多，但是能拿出真心对你的人并不多，请珍惜你身边那个一直以来包容你，在乎你的人，对你才是真爱，才值得你永远珍惜。 </p></blockquote><blockquote><p>成功的路上离不开贵人的帮助，名师的指点，朋友的理解，远人的刺激，近人的支持。人生不易，且行且珍惜。 </p></blockquote><blockquote><p>人生没有绝对的安稳，我们都是匆匆的过客，就该携一颗从容淡泊的心，走过山重水复的流年，笑看风尘起落的人间。 </p></blockquote><blockquote><p>看一场烟雨，从开始下到结束，看一只蝴蝶，从蚕蛹到破茧，看一树的蓓蕾，从绽放到落英缤纷。不为诗意，不为风雅，不为禅定，只为将日子，过成一杯白开水的平淡、一碗清粥的简单。也许只有这样，生活才会少一些失去，多一些如意。 </p></blockquote><blockquote><p>得知坦然，失之淡然，争之必然，顺其自然。心里有阳光，雨天也是一种浪漫。人的一生，总是难免有浮沉。不会永远如旭日东升，也不会永远痛苦潦倒。反复地一浮一沉，对于一个人来说，正是磨练。因此，浮在上面的的，不必骄傲;沉在底下的，更用不着悲观。 </p></blockquote><blockquote><p>人生一辈子，不要活在别人的眼里，要活在自己的阳光下，如果没有贵人，你就是自己的贵人。 </p></blockquote><blockquote><p>凡事不必苛求，来了就来了；凡事不必计较，过了就过了，遇事不要皱眉，笑了就笑了；结果不要强求，做了就对了。 </p></blockquote><blockquote><p>生活就是一种简单，心静了就平和了。永远都不为自己选择的道路而后悔，人生如同坐火车，风景再美也会后退，流逝的时间和邂逅的人终会渐行渐远，前行的始终是自己。 </p></blockquote><blockquote><p>深深的话，我们浅浅的说长长的路，我们淡淡的走，朋友，我们来日方长，人生不易，我们且行且珍惜。 </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 文摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社群裂变营销的3个模型和4个步骤</title>
      <link href="/2019/08/24/article-1/"/>
      <url>/2019/08/24/article-1/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="社群裂变营销的3个模型"><a href="#社群裂变营销的3个模型" class="headerlink" title="社群裂变营销的3个模型"></a>社群裂变营销的3个模型</h1><p>社群是目前进行获客与裂变最有效的工具，基于社群进行产品营销设计，已经成为趋势，或者说一直都是趋势。<br>社群的分类标准有很多，社群的作用也很丰富，但如果仅从增长的角度看，社群可以分成三种：传播型、产品型、服务型。  </p><a id="more"></a>  <ol><li><p>传播型<br>传播型是以裂变为导向的，最简单的就是用微信群裂变进行社群的快速扩张，到一定时间在进行产品转化，这一点做的比较早、比较疯狂，且受益较多的就是有书共读。<br>简单描述下传播型社群裂变模型的路径：关注公众号——扫码进入微信群——群主发消息和海报强调转发——转发海报并截图发至群内——审核通过并告知共读规则——固定时间发共读入口并打卡——流量循环。<br>从2016年下半年开始，有书就利用这个裂变模型增长了千万级粉丝，并一举奠定其在知识付费领域的地位，而在诗词大会比较火的时候，有人以诗词大会为名义，配合传播型社群裂变玩法，一天时间轻轻松松收割十万甚至百万粉丝。<br>至于现在，已经很难做到了，主要原因是套路不得人心，太容易识破，红利已不再，但有人依旧在使用，不是因为它还有效，而是操作容易，只要在必要环节做到极致（比如审核），还是可以收获用户的。  </p></li><li><p>产品型<br>所谓产品型，是把社群作为产品的一部分，即需要付费才能入群，而且群是主要学习与交流的场所，很多付费打卡类产品属于这一种。<br>其经典路径是这样的：关注公众号——购买课程——添加个人号——拉群——介绍学习模式及群规则——每天提醒打卡——打卡——转发朋友圈——完成打卡——流量循环。<br>利用产品型社群裂变模型的典型玩家是薄荷阅读，据说已经创造过亿营收，而之所以能有这样的成绩，除了这一模型，它还有两个创新点。  </p><pre><code>+ 诊断转化环节，这可以极大提高付费效率和几率，因为测词汇量并匹配产品，对用户属于习惯型动作，减少了犹豫时间。  + 对赌机制，即打卡返现，进一步降低了决策成本，但大多数用户是很难坚持到规定返现时间，使该模式盈利及创造更多营收变成可能。  </code></pre><p>目前多数社群营销模式转入了产品型，竞争变得愈演愈烈。  </p></li><li><p>服务型<br>服务型社群裂变模型，是把社群当作服务用户的工具，是附属物，仅做答疑，偶尔也会二次传播，但用户使用产品是在单独的平台上.<br>其用户路径如下：关注公众号——进入落地页——裂变转化入口——生成海报——转发并成功邀请好友——报名成功——扫码进群——服务并激励继续传播——流量循环。<br>服务型是比较稳妥的模式，它的好处是把容易伤害产品使用者的裂变环节提前（主要方式有团购、解锁和分销），直接过滤掉大部分流量，而已进入社群的用户，通过激励可以继续分享海报拉新。<br>比如：多数知识付费产品，通过分销的方式实现裂变，用户进群后会被告知完整上课流程及后续服务，同时也会提醒，可以继续分享课程海报，多邀多得，并且利用竞争机制设计了排行榜，以鼓励更多人。<br>以上是简单分析的三个社群裂变模型，并非绝对，任意两种或三种完全可以融合，目的是希望读者能对社群裂变有一个容易理解和清晰的认识。  </p></li></ol><h1 id="社群裂变营销的4个步骤"><a href="#社群裂变营销的4个步骤" class="headerlink" title="社群裂变营销的4个步骤"></a>社群裂变营销的4个步骤</h1><p>目前，课程类产品多数使用社群裂变营销，其本质是一种体验式营销，而如何让课程吸引更多用户，并通过短时间体验让用户产生购买欲望，实现转化，这是做用户增长的运营人比较头疼的问题。<br>那么，怎么做比较容易解决这个问题？一个最基本的原则是采用较重的运营。关于具体的做法，大体分为四个步骤：  </p><ol><li><p>策划  </p><ul><li>策划阶段需要从符合大众需求的痛点切入，尽最大努力抓住用户注意力，即选定人群，这是其一。  </li><li>其二是考虑热点，即考虑适合目标人群的特殊时间点，比如：中高考、公考、考研、四六级等，以这些时间点设计体验式课程，吸引并转化用户。这是课程选题的基本原则。  </li><li>其三，是根据「目标-路径-资源」去完善策划内容，并依据此进行落地。  </li></ul></li><li><p>拉新<br>拉新阶段即利用产品手段做增长报名，设置门槛，筛选用户，主要分付费式和邀请式两种，一般来说会在详情页同时布置这两种入口，用户可自行选择。<br>不过，这一步往往会利用锚定效应，设置限时优惠，逐步增加门槛和紧迫感，目的就是让用户倾向于选择邀请式，这比仅保留一种方式更好，因为既保证了体验，又同时兼顾转化和传播，一举两得。  </p></li><li><p>维护<br>维护阶段要做的事情相对来说比较简单，即答疑和引导，这里要考虑的是人员配置问题，需要尽量多的用户运营人员，标准化每个人的工作内容及方式。<br>比如：一个课程学习类社群的标准配置是1个班主任加1-2名助教，班主任负责上课提醒、公布规则、引导后续转化，助教则负责日常维护，为用户答疑解惑，甚至与用户单独沟通。  </p></li><li><p>转化<br>社群转化最常用的工具，主要有两种：一种是低价体验，比如：免费试听，低价体验课等；另一种是直播，让老师开直播做转化，利用名师效应推销课程。<br>这两种方式没有孰优孰劣之分，关键在于老师能否参与到社群内的日常交流，因为用户在社群内学习能够建立起对老师的信任，这其实非常有利于最终的转化，毕竟信任才是转化的核心基础，是重要的一环。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>社群裂变营销模型分三种，即传播型、产品型和服务型，三种同时存在，根据你的运营习惯、用户习惯、提前测试等，选择适合自己的模型。<br>社群裂变营销的四个步骤，即「策划–拉新–维护–转化」，每一步都有需要注意和思考的地方，只要做到极致，高转化率将不是难题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>别轻易给自己贴标签</title>
      <link href="/2019/08/23/article-0/"/>
      <url>/2019/08/23/article-0/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="别轻易给自己贴标签"><a href="#别轻易给自己贴标签" class="headerlink" title="别轻易给自己贴标签"></a>别轻易给自己贴标签</h1><p>很多人的问题往往是这样的：  </p><ul><li>我觉得自己缺乏自信，请问如何才能培养自信？  </li><li>我感觉我有社交障碍，请问如何才能跟别人更好的相处？  </li><li>我觉得自己太敏感，别人不经意的一句话，我都会放在心上，很烦恼，怎么办？  <a id="more"></a>  </li></ul><p>。。。。。。<br>其实，很多人都忽略了一点。<br>许多问题，并非源于问题本身，而是来自于你对这些问题的看待角度和认知方式。<br>自卑、亲密关系、焦虑压力、社交恐惧。。。许多问题来源于哪里？来自你的内心。正是你的认知，造就了它们的诞生。<br>同样，解决问题的钥匙在哪里呢？也在你的内心。外在的指导也好，协助也好，种种方法其实都只是在帮助你让你更好的看清楚自己的内心，找到解开答案的钥匙。<br>很多朋友可能会难以接受这一点，他们认为：这些问题的确存在，给我造成很大困扰，怎么是我自己内心造成的？又怎么可能如此轻易的解决？<br>我想说，当你察觉到问题在哪里时，其实就已经解决一半的问题了。<br>不信的话，我们来看一个例子。<br>当我们说「我缺乏自信」时，我们想表达的是什么？<br>显然，我们想表达的应该是：我觉得自己有能力达成目标，但我的能力并不足以「确保」我达成目标，它的成功率只有50%、60%，总之不到100%，因此，我不确定我能否成功 —— 对吧？<br>但是，如果我们转换一下思维呢？既然你已经知道自己是「有能力」的，那么，这还能叫做「缺乏自信」吗？<br>举个例子，你觉得自己实现这两个目标的可能性有多大：  </p><ul><li>半年内，利用业余时间学会Python，做一个办公自动化程序。  </li><li>现在辞职，开一家公司，并争取在3年内做到1个亿的总收入。  </li></ul><p>第一个目标，你的反应也许是「有点难，可以试试，不一定能成功」；而第二个目标，许多人的反应也许就是大喊「这怎么可能！」了。<br>那么，这两种情况，哪一种是真正的「缺乏自信」？显然，应该是第二种。<br>真正的「缺乏自信」，是认为自己「不具备相应的能力」「不可能做到」，并且完全不怀疑这一点。这才是缺乏自信。<br>而当你明确知道「自己是有能力的」，只是这个能力不足以让你100%确认时，你是「缺乏自信」吗？并不是。<br>你只是在害怕这种不确定性而已。<br>同样，其他问题也是相似的。  </p><ul><li>真正的社交障碍：没有人会喜欢我。  </li><li>虚假的社交障碍：我有时表现得很好，有时表现得不好，当我表现得不好时，就会使别人不喜欢我，所以我要努力表现得很好。  </li><li>真正的自卑：我什么都做不好。  </li><li>虚假的自卑：我可能会成功，也可能会失败，失败了就说明我缺乏能力，所以我不能失败，一定要成功，啊，压力好大。  </li><li>真正的敏感：我果然又出丑了，这下我在他们面前完全抬不起头了。  </li><li>虚假的敏感：我知道别人可能并不在意，甚至可能压根儿就忘了，但我自己就是忘不了，总觉得很难堪，怎么办？  </li></ul><p>诸如此类。<br>这些内容，乍一看像是文字游戏，但我想跟你说的是什么呢？<br>真正的问题，往往根植于当事人的内心，根深蒂固，已经成为了他们认知方式和思维框架的一部分。他们完全无法觉察到，更没有办法去摆脱。<br>所以，我们会说，最难以改变的是什么呢？是那些坚定地认为自己「没有错」「没有病」「没有问题」的人。</p><h1 id="固定心态和成长心态"><a href="#固定心态和成长心态" class="headerlink" title="固定心态和成长心态"></a>固定心态和成长心态</h1><p>当你认为你的能力是固定的，你表现得不好，就证明你自己不行时，你很可能就会从此裹足不前，再也无法进步。<br>而反过来，当你认为能力是可以增长的，你的每一次挫折和失败，都是在为未来积累经验时，你的能力和表现也会一步步提升。<br>我们是什么样的人，很大程度上取决于，我们如何看待自己，我们相信什么。<br>尽管成长心态理论也有不少争议，但它仍然是一个非常有用的理论：<br>它会促使你把目光从外界转移到内在，告诉你，除了你自己，并没有任何东西，束缚住你的脚步。  </p><h1 id="大脑对不确定性的逃避"><a href="#大脑对不确定性的逃避" class="headerlink" title="大脑对不确定性的逃避"></a>大脑对不确定性的逃避</h1><p>前面提到，大多数时候，你压根并不是「缺乏自信」，而只是在害怕什么呢？不确定性。<br>其实，这就是许多问题的根源。<br>大脑不擅长处理不确定的事情。因此，面对不确定性时，为了避免「宕机」，大脑会采取捷径，调整我们的认知，给我们「贴标签」。<br>许多我们常犯的认知偏差和谬误，其实都肇始于对不确定性的逃避。<br>比如，最常见的这么几个：  </p><ol><li>非黑即白：「你究竟站在哪一边？」「这是友军，别开枪」<br>为什么一定要把讨论问题建构成「两军对垒」呢？为什么不能容忍中立存在？无非只是因为，大脑只能理解简单的「是或否」，难以处理更复杂的局面罢了。<br>所以，你会看到，在许多争论中，其实大家看的是什么呢？站队。  </li><li>以偏概全：「四川人是不是都能吃辣」「我只是运气不好而已」<br>以偏概全是什么意思呢？抽取整体的一部分，用来作为对整体的判断和认知。它的原因也很简单：大脑难以处理「多因素」，因此，只能把其中某一个因素放大，来简化对不确定性的认知成本。<br>它大多数时候会导向刻板印象。这是一种方便的思维捷径，但如果仅凭刻板印象行事，我们永远都难以真正理解外部的世界。  </li><li>心理过滤：「我早就说过我不行吧」「我早就知道它会失败」<br>心理过滤是指：从已有的事实或观念中抽取一部分，来支持自己的信念 —— 往往是负面的信念。在这种思维的驱使下，我们会在大脑里建立一个筛子，只允许那些「符合错误信念」的念头经过。久而久之，它就会愈发强化我们的观念，从而形成恶性循环。<br>为什么会这样呢？原因是，大脑惧怕损失，大脑厌恶损失，因此，它需要告诉自己「这部分损失是可预见的」，亦即，强行把不确定性转化为确定性，来「强化」自己的抗风险能力 —— 尽管那只是一种妄想。  </li><li>条件思维：「我必须在5点前完成任务」「我不得不这样做，否则就会酿成大祸」<br>条件思维是一种负担。它是「自主性」的天敌，会束缚住我们的脚步，让我们遵从外界的指示行事。<br>原因也并不复杂：我们不愿意承担「自主选择」的后果和风险，因此，我们把选择转化为「条件限制」，让自己从「我要做」变成「我不得不做」，从而撇清自己的责任。  </li></ol><p>。。。。。。<br>类似的认知偏差还有很多，不一一列举了。大家可以看到，基本上，都来自大脑对不确定性的恐惧，以及「想走捷径」的思维。<br>正是这种思维，让我们陷入误区，徘徊在负面的想法和信念之中。<br>那么，如何改变这种情形呢？<br>很关键的一点，就是要重建我们的认知。  </p><p>第一步，先把自己身上的标签，无论是别人给你贴的，还是自己贴上的，全部撕下来。<br>我们总是喜欢给自己归类，喜欢遵循某一种固有的模式去生活和工作，害怕成为「异类」。但也恰恰是这种行为模式，束缚住我们自己，让我们陷入类别的桎梏和限制之中。<br>简而言之：<br>你认为自己是什么样的人，你就会按照这样的模式去生活，从而真的成为这样的人。<br>这就是一个负向的系统回路。<br>如何打破这个回路呢？请撕下自己的标签。<br>把「我是一个什么样的人」的认知丢掉。让自己「归零」。<br>取而代之的是什么呢？<br>我会建议你，用这个「BHDW模型」，来帮助自己规划和思考：  </p><ul><li>Be：我想成为一个什么样的人？  </li><li>Have：为了成为这样的人，我需要实现什么目标？  </li><li>Do: 为了实现这个目标，我需要采取什么行动？  </li><li>What: 在这个过程中，我需要遵循哪些原则？制定什么样的标准？  </li></ul><p>这是我经常使用的模型。它可以帮助你，去关注那些真正有用的事物，避免画地为牢。<br>改变自己的认知，从「如何才能走出困境」「如何才能改变现状」的思路中走出来，把目光聚焦到可能性上面，去思考「我能够做些什么」「我可以争取到什么」,这才是一种更积极、更有效的思维方式。</p><h1 id="几个技巧"><a href="#几个技巧" class="headerlink" title="几个技巧"></a>几个技巧</h1><ol><li><p>可能性区域<br>大多数情况下，面对充满不确定性的未来，我们往往看到的，都是最极端的那一面。我们会想象最坏的后果，沉溺在焦虑和压力中，一遍遍反问自己：<br>万一它发生了，怎么办？<br>这叫做灾难性思维。它是人类进化过程中的一种能力，用来应对环境风险。但在现代社会里，它带给我们的，更多的是无谓的压力。<br>如何应对呢？不妨问自己这三个问题：  </p><pre><code>事情最糟糕的结果是什么？  事情最好的结果是什么？  事情最有可能的结果是什么？      </code></pre><p> 这三个问题不是凭空拍脑袋决定，而是需要搜集信息，慎重判断，考虑诸多可能性。这个过程，其实也是让自己平静下来，慢慢调整认知的过程。 </p></li><li>重新定义<br>这个技巧，可以结合上面「重建认知」使用。<br>举个例子：「我是一个性格古怪的人，所以没有人会喜欢我。」<br>那么，不妨先问自己：什么叫做「性格古怪」？它的定义是什么？<br>然后，列出你认为自己「性格古怪」的证据，一条条写出来。<br>你或许会发现：感觉自己很奇葩，但这么一写出来，似乎、好像、大概……其实也没那么多？<br>下一步，针对你列出的每一条证据，问自己：它是否有别的解释？别人会如何看待它？<br>最后，再重新回到「性格古怪」的定义，问自己：经过这么几步之后，你在多大程度上，仍然认为自己「性格古怪」？<br>经过以上这个过程，我想，你一定能对自己，有一个重新的认知。  </li><li>魔鬼辩护人<br>什么意思呢？简而言之：哪怕你觉得自己的看法是「相当正确」的，也不妨试着站在对立面，为对立的观点辩护。<br>试着去搜集相应的证据，列出逻辑支撑和论证，甚至提出天马行空的可能性，来想办法强化对立观点，弱化你原来的立场。<br>这既是一种思维锻炼，又能非常有效地帮助你从更高层次鸟瞰全局，从而更客观、理性地认识自己。  </li><li><p>重定向<br>这是一个非常简单的技巧：把「我应该」「我必须」，换成「我可以」「我能够」。<br>是不是看起来很简单，毫无技术含量？但即使是这样轻描淡写的一步，也能够有效地帮你松绑，重新激活你对掌控感、自主性的感知。  </p><ul><li>「没有时间了，我必须今天把它做完」→「我可以在今天之内把它做完」。  </li><li>「今天又要忙了，一大堆事情等着我去做」→「我有足够的时间完成最重要的事情，让我看看可以做些什么」。  </li><li><p>「我没有别的选择了，只能这样做」→「这是我的选择，我决定要这样做」。  </p><p>慢慢练习这种方式，直到习惯，你会发现，许多原本以为的「没有办法」，其实都只是自欺欺人而已。<br>当你能够直面「一切都是我的选择」时，<br>许多问题都将迎刃而解。  </p></li></ul></li></ol><p>改变认知是一个比较长的过程，一起加油。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>经典排序算法学习</title>
      <link href="/2019/08/20/AlgorithmicLearning/"/>
      <url>/2019/08/20/AlgorithmicLearning/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h1><a id="more"></a><h1 id="选择排序-Selection-Sort"><a href="#选择排序-Selection-Sort" class="headerlink" title="选择排序(Selection Sort)"></a>选择排序(Selection Sort)</h1><h1 id="插入排序-Insertion-Sort"><a href="#插入排序-Insertion-Sort" class="headerlink" title="插入排序(Insertion Sort)"></a>插入排序(Insertion Sort)</h1><h1 id="希尔排序-Shell-Sort"><a href="#希尔排序-Shell-Sort" class="headerlink" title="希尔排序(Shell Sort)"></a>希尔排序(Shell Sort)</h1><h1 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序(Merge Sort)"></a>归并排序(Merge Sort)</h1><h1 id="快速排序-Quick-Sort"><a href="#快速排序-Quick-Sort" class="headerlink" title="快速排序(Quick Sort)"></a>快速排序(Quick Sort)</h1><h1 id="堆排序-Heap-Sort"><a href="#堆排序-Heap-Sort" class="headerlink" title="堆排序(Heap Sort)"></a>堆排序(Heap Sort)</h1><h1 id="计数排序-Counting-Sort"><a href="#计数排序-Counting-Sort" class="headerlink" title="计数排序(Counting Sort)"></a>计数排序(Counting Sort)</h1><h1 id="桶排序-Bucket-Sort"><a href="#桶排序-Bucket-Sort" class="headerlink" title="桶排序(Bucket Sort)"></a>桶排序(Bucket Sort)</h1><h1 id="基数排序-Radix-Sort"><a href="#基数排序-Radix-Sort" class="headerlink" title="基数排序(Radix Sort)"></a>基数排序(Radix Sort)</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一个人做事情到多个人做事情</title>
      <link href="/2019/06/03/guanlixiaotuandui/"/>
      <url>/2019/06/03/guanlixiaotuandui/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>&emsp;&emsp;从一个人做事情到多个人做事情,意味着很多转变：</p><ul><li>从单人到多人协作的转变：单人时，沟通无关紧要，没有文档也问题不大，项目做的不好，自己可能加个班重构一下，但你让小伙伴重构还要做大量的说服工作。<a id="more"></a></li><li>从一段时间一个项目到多个项目并进的转变：有些项目人力不够要搁置，不同项目处于不同的阶段，不同的项目自己承担的角色不同<br><img src="xiaotuandui.jpg" alt="图"><h2 id="技术管理到底管什么"><a href="#技术管理到底管什么" class="headerlink" title="技术管理到底管什么"></a>技术管理到底管什么</h2></li></ul><ol><li>技能大概分两种：谋略和理事。谋略重在想办法，理事重在做事情。但凡名士谋臣至少有一样特长，两者兼顾自然不世功勋唾手而来。<pre><code>谋略：技术架构搭建、新技术演进选型等，解决该做什么和怎么做的问题。理事：任务和人员协调、分配等，解决谁来做、哪件事先做的问题。</code></pre></li></ol><ol start="2"><li>目的是把事情做好，管人只是一种方式而已，不要轻易尝试去改变一个人，哪怕你是为他好，哪怕改的是缺点对他也有好处。以代码规范为例：<pre><code>最好的方式，通过技术手段去保证，不按照规范去做的代码没法提交成功。次级好的方式，建立规范准则，要求大家去遵守。最坏的方式，质问为什么不这么做。 </code></pre></li><li>如果不写代码就会心慌，说明你把太多精力花在理事上，把谋略给丢了。实际上，<pre><code>技术架构满足不了业务需求的时候，是需要你(和架构师一起)拿出新的架构的；组员讨论几个方案拿不定主意的时候，也是需要你去做决策的。</code></pre>这些都是需要你平时花时间去不断丰富和充实你的技术的。否则一定是一将无能累死三军。</li><li><p>不应该陷入与人沟通和处理杂事的漩涡中，而是应该抽时间出来保持自己的技术敏感度。管理者和普通员工在技术上的区别，在于和技术打交道的方式变了。普通员工是写代码，技术管理者应该是学习技术和思考架构。</p><pre><code>能够发现问题。能够提供解决问题的思路和方案，并能比较这些方案的优缺点。能够做正确的技术决定。能够用更优雅、简单、容易的方式来解决问题。能够提高代码或软件的扩展性、重用性和可维护性。能够用正确的方式管理团队(让正确的人做正确的事，提高团队效率，用最少的成本实现最有价值的需求)。创新能力。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">技术人员的成长粗略划分为四大阶段：</span><br><span class="line">新手：新手就是新手。。。</span><br><span class="line">(突破期)</span><br><span class="line">熟手：新手经过半年到一年的工作经验，如果能成功适应这份工作，基本就能有所突破，变成一个熟手。熟手的特点是，能对现成的工具充分利用，胜任大部分日常工作。在技术水平的表现上，他了解大部分的技术概念，但不一定理解真正的含义；在他的眼中，技术还无法自成体系，能理解到的知识架构还有所残缺。他解决问题所依靠的，更多是经验而非缜密的逻辑。</span><br><span class="line">(舒适期/瓶颈期/突破期)</span><br><span class="line">专家：某个领域拥有足够全面、系统而深入的知识储备，对于技术上的疑难杂症，有能力深入到足够的层次，指出问题的症结所在；另一方面，专家还应该能够完成对具体问题的抽象，拥有“造轮子”的能力。在专家的眼中，技术的黑盒子被打开，知识点也不再是孤立存在的，而是相互枝连，构成一个完整的逻辑系统。</span><br><span class="line">(舒适期/瓶颈期/突破期)</span><br><span class="line">宗师：这一级别的，整个世上也寥寥无几。他们是真正的开创者，能够引领一个技术时代。什么样的人才配得上“宗师”这个称呼呢？比如Dennis M. Ritchie（C语言和Unix之父），再比如Linus（Linux内核的发明人）。技术的成长阶段并没有一个上限。无论你处在哪个阶段，前面仍然存在无限的上升空间。</span><br></pre></td></tr></table></figure></li><li><p>小伙伴如果主动性不高，其实是对分配给自己的任务负责。小队长是对项目负责，项目的成功与小伙伴干完自己具体任务之间有大量的规划、协调、踩石头过河的事，需要对项目结果负责的人去完成。</p></li></ol><h2 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h2><p>你必须要接受，本来你可以十分钟干完的事儿，别人要干两个小时。你设计的很有美感的代码被破坏殆尽。但该他负责的事情还是要他去做，否则他没有参与感，永远无法主动地做工作。很多事情你做了其实没有成长，但还是要带着别人一起做，帮助别人成长也是你工作的一部分。<br>曾经的一个困惑：”我知道很多事儿要干，但我不知道精力投向哪里”。迷茫，就是对当前的处境没有成体系化的认识，要多人交流，整理，发现规律，指导实践。要兼容不同的人，有的很有想法但落地能力不够，有的想法较少但好在认真负责等，不以自己认为的优缺点去套别人。</p><h2 id="做事与效能提升原则"><a href="#做事与效能提升原则" class="headerlink" title="做事与效能提升原则"></a>做事与效能提升原则</h2><ol><li>Owner意识<br><font color="red"> 认真负责是工作的底线</font>。首先，要对我们交付的结果负责。项目中每一个设计文档、每一行代码都需要认真完成，要对它的质量负责。如果设计文档逻辑混乱，代码没有注释，测试时发现一堆Bug，影响的不仅仅是RD(研发:Research&amp;Design)的工程交付质量，还会对协同工作的RD、QA(质量保证:Quality&amp;Assurance)、PM(Project&amp;Management)等产生不好的影响。久而久之，团队的整体交付质量、工作效率也会逐步下降，甚至会导致团队成员之间产生不信任感。其次，我们要对开发的系统负责。系统的架构是否需要改进，接口文档是否完善，日志是否完整，数据库是否需要扩容，缓存空间够不够等等，这些都是需要落地的事情。作为系统Owner，请一定要认真履行。<br><font color="red"> 积极主动是“Owner意识”更高一级的要求</font>。RD每天要面对大量的工作，而且很多并不在计划内，这就需要具备一种积极主动的精神。例如我们每天可能会面对大量的技术咨询，如果客户提出的问题很长时间得不到回应的话，就会带来不好的客户体验。很多同学说忙于自己的工作没有时间处理，有同学觉得这件事不是很重要，也有很多同学是看到了，但是不知道怎么回答，更有甚者，看到了干脆装没看见。这些都是缺乏Owner意识的体现。正确的做法是积极主动地推动问题的解决，如果时间无法排开或者不知道如何解决，可以直接将问题反馈给能解决的同学。积极主动还可以表现在更多方面。比如很多同学会自发地梳理负责服务的现状，根据接口在性能方面暴露的问题提出改进意见并持续推动解决；也有同学在跨团队沟通中主动承担起主R的角色，积极发现问题、暴露问题，推动合作团队的进度，保证项目顺利推进。这些同学无一不是团队的中坚力量。所以，我们在做好自己份内工作的同时，也应该积极主动地投入到“份外”的工作中去。一分耕耘一分收获，不要给自己设限，努力成为一个更加优秀的人。</li><li>时间观念<br>研发的效率是公司硬实力的体现。项目的按时交付是一项很重要的执行能力。按时交付的同学往往具备如下两个特质：做事有计划，工作分主次。<br><font color="red">Web端产品粗略的流程</font>为：发现需求（产品经理）→功能需求确定（产品经理）→交互设计稿（交互设计师）→视觉设计稿（视觉设计师）→前端研发（前端工程师FE）→后端研发(后端工程师RD)→测试&amp;BUG修复（测试QA）→上线<br><font color="red">工作安排要有计划性</font>。通常，RD在设计评审之后就能预估出精确的开发时间，进而再合理地安排开发、联调、测试计划。如果是项目负责人，那么就会涉及协调FE、QA、PM等多个工种的同学共同完成工作。凡事预则立，不预则废。在计划制定过程中，要尽可能把每一项拆细一点（至少到pd粒度）。事实证明，粒度越细，计划就越精准，实际开发时间与计划之间的误差就会越小。此外，务必要规定明确的可检查的产出，并在计划中设置一些关键的时间点进行核对。无数血淋淋的事实告诉我们，很多项目延期都是因为在一些关键交付点上双方存在分歧造成的。例如后台RD的接口文档计划在周五提供，FE认为是周五上午，而RD认为是周五下班前提交，无形中会给排期带来了1pd的误差。所以，我们要做到计划粒度足够细，关键时间点要可检查。<br><font color="red">工作安排要分清楚主次</font>。我们每天要面对很多的事情，要学会分辨这些工作的主次。可以尝试使用“艾森豪威尔法则”（四象限法则），把工作按照重要、紧急程度分成四象限。优先做重要紧急的事情；重要不紧急的事情可以暂缓做，但是要持续推进；紧急不重要的事情可以酌情委托给最合适的人做；不重要不紧急的事情可以考虑不做。很多项目无法按期交付的原因，都是因为执行人分不清主次。比如在开发中需要使用到ES，一些不熟悉ES的同学可能想系统性地学习一下这方面的知识，就会一头扎进ES的汪洋中。最后才发现，原本一天就能完成的工作被严重拖后。实际工作中，我们应当避免这种“本末倒置”的工作方式。在本例中，“系统性地学习ES”是一件重要但不紧急的事情。要学会分辨出这些干扰的工作项，保证重要紧急的事情能够按时交付。</li><li>以终为始<br>在工作中，很多RD往往只是埋头走路，很少抬头看天。每次季度总结的时候，罗列了很多项目，付出很多努力。但是具体这些项目取得了哪些收益，对业务有哪些提升，却很难说出来。这就说明在工作中并没有遵守“以终为始”这一原则。此外，很多同学在做需求的过程中，对于目标与收益关注不够，系统上线之后，也没有持续地跟进使用效果。这一点在技术优化项目中体现得尤为明显。例如在一个接口性能优化的项目中，经过RD的努力优化，系统TP99缩短了60%，支持QPS提升了2倍。但是系统到底需要优化到什么程度呢？是不是缩短60%，提升2倍就能满足需求呢？在优化之前，很多同学常常忘记设置一个预设的目标（TP99小于多少，支持QPS大于多少）。我们必须清楚，优化一定是有原因的，比如预期某节假日流量会暴增或者某接口超时比例过高，如果不进行优化，系统可能会存在宕机风险。解决特定的问题才是技术优化的最终目的，所以要<font color="red">根据问题设定目标，再进行优化努力实现</font>。</li><li>闭环思维<br>你是否遇到过这样的场景：参加了一个设计（或需求）评审，大家兴致勃勃地提了很多合理的意见，等到再次评审的时候，却发现第一次提的很多问题都没有得到改进，很多讨论过的问题需要从头再开始讨论。这种情况就是一种典型的工作不闭环。<br>之前看过一句话：一个人是否靠谱，就看他能否做到凡事有交代，件件有着落，事事有回音。这就是闭环思维的重要性。它强调的是一种即时反馈闭环，如果别人给我们分配了一个任务，不管完成的结果如何，一定要在规定的时间内给出明确的反馈。例如在跨部门的沟通会议中，虽然各方达成了一致，会议发起者已经将最终的记录周知大家。但是，到这一步其实并没有完成真正的闭环，在落地执行过程中很可能还存在一些潜在的问题。例如，会议纪要是否经各方仔细核对并确认过？会议中明确的ToDo进展是什么？完成结果有没有Check的机制？如果这些没有做到的话，就会陷入”沟通-发现问题-再沟通-再发现问题”的恶性循环中。<font color="red">真正的闭环，要求我们对工作中的事情都能够养成良好的思维习惯，沟通要有结论，通知要有反馈，ToDo要有验收</font>。<br>“闭环思维”还要求能够<font color="red">定期主动进行阶段性的反馈</font>。刚参加工作时，我接了一个工期为两个月的项目。整个项目需要独自完成，自己每天按照计划，有条不紊地进行开发。大概过了两周之后，Leader询问项目进度，虽然我已经跟他说没问题。然而，Leader告诉我，因为我每天对着电脑也不说话，让他心里很没底。这时，我才意识到一个很重要的问题，我跟Leader之间存在信息不对称。从那以后，我就时不时得跟他汇报一下进度，哪怕就只有简短的一句话，也可以明显感觉，他对我的信心增加了很多。特别是我做Leader之后，对这种闭环反馈的理解，就更加深刻了。从Leader的角度看，其实只是想知道项目是否在正常推进，是否遇到问题需要他协助解决。</li><li>保持敬畏<br>保持敬畏之心能够让我们少犯错误。在工作中存在各种各样的规范，例如代码规范、设计规范、上线规范等等。我们必须明白，这些规范的制定一定是基于某些客观原因的，它们都是历史上无数Case积累而来的经验。团队里的每一个成员都应该学习并严格遵守，这一点对于新人尤其重要。<br><font color="red">当我们进入到一个新的团队，请先暂时忘掉之前的习惯，要尽快学习团队既有的规范，并且让自己与团队保持一致</font>。以编码风格为例，很多同学往往习惯于自己之前的代码写作风格，在做新公司第一个项目时，也按照自己的习惯进行变量、包的命名等等。结果在代码Review过程中，被提了很多修改意见，不得不返工重写，得不偿失。如果能够保持敬畏之心，提前了解编码规范，这种问题完全可以避免。类似的问题，还包括对上线流程不了解，对回滚操作不熟悉，对SRE线上变更过程不了解等等。除了这些显而易见的规范，还有一些约定俗成的规则。个人建议是：如果有事情拿不准，不妨多问问其他同事，不要凭自己的感觉做事情。<br>保持敬畏之心并不意味着要“因循守旧”。在我们充分了解这些规范和约定之后，如果觉得存在不妥之处，可以跟全组同学讨论，是否采纳新的建议，然后及时去更新迭代。其实，让规范与约定与时俱进，也是另一种形式的敬畏。</li><li>事不过二<br>我们发现，很多RD都把时间花费在一些无休止的评审与问题讨论中，真正投入到实际开发中的时间反而很少。在实际工作场景中，我们经常会遇到一些不是很成熟的需求评审。这些需求文档，要么是背景与目标含糊不清，要么是产品方案描述不够细化，或者存在歧义。RD与PM被迫反复进行讨论，我曾经遇到过一个需求评审，进行了三次还被打回。同样的问题，在设计评审中也屡见不鲜。方案固然需要经过反复的讨论，但是如果迟迟不能达成一致，就会耗费很多RD与PM的宝贵时间，这就与提升研发效率的理念背道而驰。因此，我们团队规定：<font color="red">所有的需求评审最多两次。通过这种方式，倒逼利益相关方尽可能地做好需求与方案设计</font>。评审会议组织前，尝试与所有相关人员达成一致，询问对方的意见，并进行有针对性的讨论，这样能够大大提升评审会议的效率和质量。如果在第一次评审中不通过，那么就只有一次机会进行复审。一旦两次不通过，就需要进行Casestudy。<br>“事不过二”原则的另一层含义，是”<font color="red">同样的错误不能犯第二次</font>“。每次故障之后，Casestudy都必须进行深刻的总结复盘，对故障原因进行5Why分析，给出明确可执行的To Do List。每次季度总结会，大家自我反省问题所在，在下个季度必须有所改善，不能再犯类似的错误。孔子云：“不迁怒，不贰过”，在错误中反思与成长，才能让我们成为更优秀的人。</li><li>设计优先<br>架构设计，并不仅仅关系到系统的质量，还关乎团队的效能问题。很多团队也有明文规定，开发周期在3pd以上的项目必须有设计文档，开发周期在5pd以上的项目必须有设计评审。在具体的执行过程中，由于各种原因，设计往往并不能达到预期的效果。究其原因，有的是因为项目周期紧，来不及设计得足够详细；有的是因为RD主观上认为项目比较简单，设计草草了事。无数事实证明，<font color="red">忽略了前期设计，往往会导致后续开发周期被大幅拉长，给项目带来了很大的Delay风险。而且最可怕的是，不当的设计会给项目带来巨大的后期维护成本，我们不得不腾出时间，专门进行项目的优化与重构</font>。因此，无论什么时候都要记住“设计优先”这一原则。磨刀不误砍柴工，前期良好的设计，会给项目开发以及后期维护带来极大的收益。<br>“设计优先”这一原则，要求<font color="red">写别人看得懂的设计</font>。我们了解一个系统最直接的途径就是结合设计文档与代码。在实际工作中，很多同学的设计文档让大家看得一头雾水，通篇下来，看不出系统整体的设计思路。其实，设计的过程是一种智力上的创造，我们更希望它能成为个人与集体智慧的结晶。如何才能让我们的设计变得通俗易懂？我个人认为，设计应该尽量使用比较合理的逻辑，进而把设计中的一些点组织起来。比如可以使用从抽象到具体，由总到分的结构来组织材料。在设计过程中，要以需求为出发点，通过合理的抽象把问题简化，讲清楚各个模块之间的关系，再详细分述模块的实现细节。做完设计之后，可以发给比较资深的RD或者PM审阅一下，根据他们的反馈再进行完善。好的设计，一定是逻辑清晰易懂、细节落地可执行的。</li><li>产出与产能平衡<br>伊索寓言中讲述了一个《生金蛋的鹅》的故事。产出好比“金蛋”，产能好比“会下金蛋的鹅”。“重蛋轻鹅”的人，最终可能连产蛋的资产都保不住；“重鹅轻蛋”的人，最终可能会被饿死。产出与产能必须平衡，才能达到真正的高效能。从系统的角度看，每一个系统都是通过持续不断地叠加功能来实现其产出，而系统的产能是通过系统架构的可扩展性、稳定性等一系列特性来表征。为了达到产出与产能的平衡，需要在不断支持业务需求的过程中，持续进行技术架构层面的优化。</li><li>善于提问<br>“善于提问”，首先要勤于提问。求知欲源于好奇心，是人类的一种本能。在工作中要养成勤于提问的好习惯，不懂就问，不要因为自己一时懒惰或者碍于情面，就放弃提问的机会。当遇到不同的观点时，也要礼貌地问出来。波克定理告诉我们，<font color="red">只有在争辩中，才可能诞生最好的主意和最好的决定</font>。<br>在设计评审、代码评审这类体现集体智慧的活动中，遇到有问题的地方一定要提出来。我经常看到，很多同学评审全程一言不发，这就是浪费大家的时间。设计评审的目的，是让大家针对方案提出改进意见并达成一致，如果全程“打酱油”，那就失去了评审的意义。我们鼓励大家多提问，把自己内心的疑惑表达出来，然后通过交流的方式得到答案。<br>“善于提问”，还要懂得如何提问。为什么同样是参加设计评审，有的同学就能提出很好的问题，而有的同学却提不出任何问题？除了知识储备、专业技能、经验等方面的差异外，还有一点很重要：批判性思维。<br>批判性思维主张通过批判性思考达到理性思维，即对事物本质的认知和掌握。关于如何进行批判性思维，大家可以参考一些经典的图书如《批判性思维》、《学会提问》等。在工作中面临一项决策时，会有各种各样的意见摆在你面前，所以我们必须要学会使用批判性思维来进行分析，每个人的论据是否可靠，论证是否合理，是否有隐含的立场。</li><li>空杯心态<br>“满招损，谦受益”，“空杯心态”是最后一项原则。我觉得这也是一个人能够持续成长的前提。做技术的人，骨子里通常有股傲气，并且会随着资历、成绩的提升而不断增加。初入职场的小白，可能会非常谦虚，但是工作几年之后，专业技能逐步提升，可能还取得了一些小成就，人就会越来越自信。这时候，如果不能始终保持“空杯心态”，这种自信就会逐步演变为自满。自满的人，往往表现为工作中把别人的建议当成是批评，不接受任何反对意见，学习上也缺乏求知的动力，总是拿自己的长处去跟别人的短处做比较。其实每个人多少都会有一些自满，可怕的是不知道甚至不愿承认自满。<br>保持“空杯心态”这一原则要求我们<font color="red">时刻进行自我检视与反省</font>。</li></ol><h2 id="不同项目的不同角色"><a href="#不同项目的不同角色" class="headerlink" title="不同项目的不同角色"></a>不同项目的不同角色</h2><p>不同的项目中，一个人可能呈现出不同的角色（可能是多个角色并存）：</p><ul><li>需求/技术调研</li><li>唤醒高层、平级、小伙伴对项目的重视</li><li>项目设计</li><li>编码</li><li>进度推动/资源协调</li><li>推广</li><li>系统运营<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从一个程序员的角度来说，什么最让人安心？持续的技术进步。</span><br><span class="line">这里有几个认知问题:</span><br><span class="line">1.技术只是达成目标的一环，不同项目不同阶段 瓶颈不一样，作为一个小队长首要的是解决这些瓶颈</span><br><span class="line">2.随着代码能力的提高，一些项目的code无助于技术提高</span><br><span class="line">3.与技术的沟通方式变了，不仅是直接code，而是通过code review、项目设计 与技术“沟通”</span><br></pre></td></tr></table></figure></li></ul><p>作为开发，鼓励同时参与到其它角色中。<br>作为小队长，因为精力有限，一旦决定了自己的角色，便要谨慎加入其它角色，尤其是短期内无法脱身的角色。<br>一定要防止：同时推进多个项目，每天很忙但每个项目都进展不大的情况，因为这样会极大的削弱工作带来的“获得感”引发挫折感。<br>被动应对的事情太多，主动规划的太少。这样你会很挫败，不仅是工作，人生也是如此。<br>如果没有设计流程规范，大家习惯于会按照最简单的方案去实现。如果没有项目管理，大家习惯于去做最简单的/易做的/容易写周报的/依赖资源最少/推得动的事儿，而对紧急的、收尾的、杂碎的事儿无动于衷。<br>进展不大的原因:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.忙项目B时 被中断去解决项目A 的问题，负责项目越多，被中断的可能性越大，以至于完全无法开展新工作</span><br><span class="line">2.解答用户对系统的咨询</span><br><span class="line">3.“调度精力”带来的开销</span><br><span class="line">4.高层决心不确定，不是不做，但不肯花大力气做</span><br><span class="line">5.依赖方太多，你有空，别人没空</span><br></pre></td></tr></table></figure></p><p>因此：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.尽量专人专职</span><br><span class="line">2.理清项目优先级，最好用图表的方式展示，适时搁置一些项目</span><br><span class="line">3.完备的文档，减少维护压力.</span><br><span class="line">4.两人或多人负责一个项目，使得有一人可以专心开发（另一人负责维护的事情）</span><br><span class="line">5.不能因为技术实现上图省事，来让上层业务方案来做妥协，进而产生让用户感觉困惑的操作。</span><br><span class="line">6.对自己小组的产出能力、工作负载要有一个认识，不要盲目拉活儿。</span><br></pre></td></tr></table></figure></p><h2 id="分阶段管理项目"><a href="#分阶段管理项目" class="headerlink" title="分阶段管理项目"></a>分阶段管理项目</h2><p>假设你同时负责几个项目，但不同的项目所处的状态是不一样的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">策划阶段</span><br><span class="line">调研阶段</span><br><span class="line">设计阶段</span><br><span class="line">开发阶段</span><br><span class="line">维护阶段</span><br></pre></td></tr></table></figure></p><ul><li>策划和调研阶段，因为太模糊了，可能要独立完成。</li><li>设计阶段带着小伙伴一起做（业务架构图、类图、流程图、Swagger、数据库表设计等）</li><li>开发阶段，每天检查小伙伴的产出，确保没有跑偏即可。</li><li>维护阶段可以交给小伙伴，提取新的需求 进入新的循环。</li></ul><p>如果所有阶段的所有事儿都需要你去做，那么一定有问题。如果一直如此，你可能不是纠结自己做什么，而是要换个人合作。<br>当你有了一定的人力资源之后，你解决问题的工具集不能只是”一有问题自己上”。<br>这个项目目前在什么阶段？最大的瓶颈在哪里？是否需要你直接参与？想好了再行动。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">所处阶段</th><th style="text-align:center">本周产出/进展</th><th style="text-align:center">瓶颈/问题</th><th style="text-align:center">切入点/办法</th></tr></thead><tbody><tr><td style="text-align:center">项目1</td><td style="text-align:center">开发</td><td style="text-align:center">下周转入测试</td><td style="text-align:center">暂无</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">项目2</td><td style="text-align:center">维护</td><td style="text-align:center">无</td><td style="text-align:center">暂无</td><td style="text-align:center">code review</td></tr><tr><td style="text-align:center">项目3</td><td style="text-align:center">维护</td><td style="text-align:center">明确xx为负责人</td><td style="text-align:center">依赖资源不到位</td><td style="text-align:center">组织各个大佬开会</td></tr><tr><td style="text-align:center">项目4</td><td style="text-align:center">调研</td><td style="text-align:center">整理文档以备开会</td><td style="text-align:center">需求不明</td><td style="text-align:center">开会</td></tr><tr><td style="text-align:center">项目5</td><td style="text-align:center">开发</td><td style="text-align:center">无</td><td style="text-align:center">当前算法难以支持高并发</td><td style="text-align:center">小组讨论</td></tr></tbody></table><p>熟悉小伙伴</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">主动性</th><th style="text-align:center">技术能力</th><th style="text-align:center">认真负责</th><th style="text-align:center">项目熟悉程度、兴趣程度</th></tr></thead><tbody><tr><td style="text-align:center">小伙伴1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">小伙伴1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>公司发展到一定阶段，能力强的员工容易离职，因为他们对公司内愚蠢的行为的容忍度不高，他们也容易找到好工作；能力差的员工倾向于留着不走，他们也不太好找工作，年头久了，他们就变中高层了。在湖畔大学第三届的第一课上，马云也讲到：小公司的成败在于你聘请什么样的人，大公司的成败在于你开除什么样的人。</p><p>小伙伴状态评估<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">项目设计能力:技术选型，方案选型，一定的知识广度</span><br><span class="line">代码设计能力:优雅、“坏味道”比较少，易懂</span><br><span class="line">独立做事情</span><br><span class="line">有没有成长性，即自我超越的心思和动力</span><br></pre></td></tr></table></figure></p><p>如何帮助小伙伴<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.直接指明工作中的问题</span><br><span class="line">2.找到跟他关系比较好的小伙伴（相对能力也强一点的），一则从他这边了解更多的信息， 二则让他们两个一起做事情。</span><br><span class="line">3.一个是准确判断小伙伴的状态，对一个人能力不停地试探，做的好就上探，做的不好就下探。你对他的期望和实际的工作不一致，他难受，你也难受。</span><br><span class="line">4.判断完毕后，可以推荐一些书籍， 限期读完，小组内做一个分享。</span><br><span class="line">5.对不同的事儿，不同的人，无所区别分析，是很大的偷懒。</span><br></pre></td></tr></table></figure></p><p>每个小伙伴，进来的第一个项目最重要，你要进行观察，把他作为“客体”进行认知。性格、协作能力、设计能力、code能力（规范、以及优雅程度）。进而确定你们以后的相处模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.不用管(完全放心；或者小伙伴外向，主动沟通)</span><br><span class="line">2.定期汇报</span><br><span class="line">3.每日跟踪</span><br></pre></td></tr></table></figure></p><p>衡量程序员的水平是对一个项目有没有一个全面的把控和实现。<br>衡量一个架构师的水平，就是你的产出（包括但不限于表设计、接口定义、架构图等）是否对实施开发者水平要求太高。如果你不能将一个复杂的事情拆的很简单，以至于小伙伴有信心实施，那就说明你对问题的理解不够。</p><p>同时，不管他优秀也好，差一点也好，第一个项目想办法做成、做好。在这个过程中，将他的code 习惯等打上自己和公司的印记。<br>沟通很重要，第一优先是质量，但这个比较难，需要你跟小伙伴在一个“思维”上。<br>对于有些人来说，你教他防患于未然，不如等他自己踩坑。<br>如果没有积极主动地心态，很多人要半年后才可以适应新公司的节奏。这个时候，带人耐心很重要。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.团队工作一定要有文档</span><br><span class="line">2.自己要对软件设计的本质有一个认识，先做到独自一人可以高质量的实施</span><br><span class="line">3.有了认识，才知道重点和难点，才能利用规律。当事情交给别人的做的时候，才知道如何把控。</span><br><span class="line">4.不要想着：把事情交给一个人，他就应该把事情做好，自己只要看结果就行</span><br><span class="line">而是想着</span><br><span class="line">这个事适不适合他干</span><br><span class="line">若是他干，哪些事儿他干不了。尤其是定好边界（表设计、前后端接口、架构图）等防止跑偏</span><br></pre></td></tr></table></figure></p><h2 id="整体环境的把握"><a href="#整体环境的把握" class="headerlink" title="整体环境的把握"></a>整体环境的把握</h2><p>一个公司的发展有几个阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.业务驱动：为用户带来价值，公司先活下去。</span><br><span class="line">2.技术和业务并重：技术问题暴露出来，不解决就无法进一步发展。</span><br><span class="line">3.技术驱动业务：具备极短事件内复制一个app、搞一个运营活动、为用户赋能、千人千面等。</span><br></pre></td></tr></table></figure></p><p>具体显现在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">具体体现在人员、精力的占比</span><br><span class="line">你觉得一件事需要好好搞搞，hr告诉你一个合适的候选人待遇要求很高时，才是考验你意志和决心的时候</span><br></pre></td></tr></table></figure></p><p>每个阶段如何处理技术与业务的关系（以及是否进入下一阶段）是大佬的事情，但自己要认识到当前的局面 并做相应的调适<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.认识到某个技术当前在公司的定位、公司可能的投入，以有限的资源 去解决最痛的痛点</span><br><span class="line">2.技术要根据阶段取舍，你当前的项目也要根据阶段取舍。设计 ==&gt; 实现 ==&gt; 迭代 ==&gt; 搁置 ==&gt; 迭代，当前是什么状态？落后还是快于实际需要？自己要心里有数</span><br><span class="line">3.以第一线的观察 分析当前的问题/瓶颈，进行技术的宣传和说服工作，推动领导的相关决策</span><br><span class="line">4.对自己计划的制定、精力的分配 有一个判断</span><br><span class="line">5.无论大环境怎样，自己要保持激情，发现问题，解决问题，给自己信心，给身边人信心，把事情打开一个新局面，新气象。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebPack + Vue + element-ui</title>
      <link href="/2019/05/20/WebPack-Vue-element-ui/"/>
      <url>/2019/05/20/WebPack-Vue-element-ui/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>实验目标:<br>&emsp;&emsp;试验这种 WebPack+Vue+element-ui开发方式，实现前端模块按需加载。<br><a id="more"></a></p><h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><p>Vue使用了基于HTML的模版语法，允许开发者声明式地将DOM绑定至底层Vue实例的数据。<br>Vue的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进DOM的系统。<br>结合响应系统，在应用状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。</p><ul><li><p>数据绑定最常见的形式就是使用{ {… } }（双大括号）的文本插值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue_det"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 v-html 指令用于输出html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="xml">    message: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HTML 属性中的值应使用 v-bind 指令。<br>以下实例判断 class1 的值，如果为 true 使用 class1 类的样式，否则不使用该类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span>修改颜色<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"use"</span> <span class="attr">id</span>=<span class="string">"r1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'class1': use&#125;"</span>&gt;</span></span><br><span class="line">    v-bind:class 指令</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data:&#123;</span></span><br><span class="line"><span class="javascript">      use: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Vue都提供了完全的 JavaScript 表达式支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;5+5&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span>教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    ok: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'RUNOOB'</span>,</span></span><br><span class="line"><span class="undefined">    id : 1</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>指令是带有 v- 前缀的特殊属性。<br>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。<br>如下例子，v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    seen: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>参数在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性<br>如下例子， href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    url: <span class="string">'http://www.baidu.com'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>另一个例子是 v-on 指令，它用于监听 DOM 事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里参数是监听的事件名。</p><ul><li><p>修饰符是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>用户输入，在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'hello!'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>v-model 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。<br>按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应。<br>以下实例在用户点击按钮后对字符串进行反转操作：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>反转字符串<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”指示, 格式如下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'runoob'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  filters: &#123;</span></span><br><span class="line"><span class="javascript">    capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line"><span class="undefined">      value = value.toString()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>过滤器可以串联：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>过滤器是 JavaScript 函数，因此可以接受参数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>这里，message 是第一个参数，字符串 ‘arg1’ 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p><h2 id="Vue条件语句"><a href="#Vue条件语句" class="headerlink" title="Vue条件语句"></a>Vue条件语句</h2><p>条件判断使用 v-if 指令,如下例子，在元素 和 template 中使用 v-if 指令：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>学的不仅是技术，更是梦想！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈，打字辛苦啊！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    seen: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    ok: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以用 v-else 指令给 v-if 添加一个 “else” 块：<br>如下例子，随机生成一个数字，判断是否大于0.5，然后输出对应信息<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span></span><br><span class="line">      Sorry</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      Not sorry</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-else-if 在 2.1.0 新增，顾名思义，用作 v-if 的 else-if 块。可以链式的多次使用,<br>如下例子：判断 type 变量的值：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">      A</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">      B</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">      C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      Not A/B/C</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    type: <span class="string">'C'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue循环语句"><a href="#Vue循环语句" class="headerlink" title="Vue循环语句"></a>Vue循环语句</h2><p>循环使用 v-for 指令。<br>v-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。<br>v-for 可以绑定数据到数组来渲染一个列表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">      &#123;&#123; site.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    sites: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Runoob'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Google'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">name</span>: <span class="string">'Taobao'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>模板中使用 v-for：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; site.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>--------------<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-for 可以通过一个对象的属性来迭代数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    object: &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'菜鸟教程'</span>,</span></span><br><span class="line"><span class="javascript">      url: <span class="string">'http://www.baidu.com'</span>,</span></span><br><span class="line"><span class="javascript">      slogan: <span class="string">'百度，百度！'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>你也可以提供第二个的参数为键名：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第三个参数为索引：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-for 也可以循环整数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span></span><br><span class="line">     &#123;&#123; n &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue计算属性"><a href="#Vue计算属性" class="headerlink" title="Vue计算属性"></a>Vue计算属性</h2><p>计算属性在处理一些复杂逻辑时是很有用的。<br>可以看下以下反转字符串的例子,如下例子，声明了一个计算属性 reversedMessage 。<br>提供的函数将用作属性 vm.reversedMessage 的 getter 。<br>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 计算属性的 getter</span></span></span><br><span class="line"><span class="javascript">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// `this` 指向 vm 实例</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage2: function () &#123;</span><br><span class="line">    return this.message.split('').reverse().join('')</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。<br>如下面代码，cnt 是独立于 vm 对象的变量。在使用 reversedMessage 这个计算属性的时候，第一次会执行代码，得到一个值，以后再使用 reversedMessage 这个计算属性，因为 vm 对象没有发生改变，于是界面渲染就直接用这个值，不再重复执行代码。而 reversedMessage2 没有这个缓存，只要用一次，函数代码就执行一次，于是每次返回值都不一样。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var cnt=1;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: 'Runoob!'</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 计算属性的 getter</span><br><span class="line">    reversedMessage: function () &#123;</span><br><span class="line">      // `this` 指向 vm 实例</span><br><span class="line">      cnt+=1;</span><br><span class="line">      return cnt+this.message.split('').reverse().join('')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reversedMessage2: function () &#123;</span><br><span class="line">      cnt+=1;</span><br><span class="line">      return cnt+this.message.split('').reverse().join('')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: 'Google',</span><br><span class="line">    url: 'http://www.google.com'</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    site: &#123;</span><br><span class="line">      // getter</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.name + ' ' + this.url</span><br><span class="line">      &#125;,</span><br><span class="line">      // setter</span><br><span class="line">      set: function (newValue) &#123;</span><br><span class="line">        var names = newValue.split(' ')</span><br><span class="line">        this.name = names[0]</span><br><span class="line">        this.url = names[names.length - 1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span><br><span class="line">vm.site = '教程 http://www.baidu.com';</span><br><span class="line">document.write('name: ' + vm.name);</span><br><span class="line">document.write('<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">document.write('url: ' + vm.url);</span><br></pre></td></tr></table></figure></p><h2 id="Vue监听属性"><a href="#Vue监听属性" class="headerlink" title="Vue监听属性"></a>Vue监听属性</h2><p>监听属性 watch，我们可以通过 watch 来响应数据的变化<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"counter++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">        counter: 1</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">nval, oval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'计数器值的变化 :'</span> + oval + <span class="string">' 变为 '</span> + nval + <span class="string">'!'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以下实例进行千米与米之间的换算<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"computed_props"</span>&gt;</span></span><br><span class="line">    千米 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"kilometers"</span>&gt;</span></span><br><span class="line">    米 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"meters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#computed_props'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">        kilometers : 0,</span></span><br><span class="line"><span class="undefined">        meters:0</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed :&#123;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    watch : &#123;</span></span><br><span class="line"><span class="javascript">        kilometers:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.kilometers = val;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.meters = <span class="keyword">this</span>.kilometers * <span class="number">1000</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        meters : <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.kilometers = val/ <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.meters = val;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="javascript">    vm.$watch(<span class="string">'kilometers'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这个回调将在 vm.kilometers 改变后调用</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById (<span class="string">"info"</span>).innerHTML = <span class="string">"修改前值为: "</span> + oldValue + <span class="string">"，修改后值为: "</span> + newValue;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过vue监听事件实现一个简单的购物车<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"iphone in Ip_Json"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; iphone.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; iphone.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; iphone.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"iphone.count === 0"</span> <span class="attr">v-on:click</span>=<span class="string">"iphone.count-=1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;&#123; iphone.count &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"iphone.count+=1"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"iphone.count=0"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    总价：$&#123;&#123;totalPrice()&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue样式绑定"><a href="#Vue样式绑定" class="headerlink" title="Vue样式绑定"></a>Vue样式绑定</h2><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。<br>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p><p>我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以在对象中传入更多属性用来动态切换多个 class 。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以直接绑定数据里的一个对象,在这里绑定返回对象的计算属性。这是一个常用且强大的模式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    isActive: true,</span><br><span class="line">    error: &#123;</span><br><span class="line">      value: true,</span><br><span class="line">      type: 'fatal'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    classObject: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">  base: true,</span><br><span class="line">        active: this.isActive &amp;&amp; !this.error.value,</span><br><span class="line">        'text-danger': this.error.value &amp;&amp; this.error.type === 'fatal',</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>可以把一个数组传给 v-bind:class<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>还可以使用三元表达式来切换列表中的 class<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[errorClass ,isActive ? activeClass : '']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类</span><br></pre></td></tr></table></figure></p><p>style(内联样式)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span>教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">直接绑定到一个样式对象，让模板更清晰</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用数组将多个样式对象应用到一个元素上</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span>教程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue事件处理器"><a href="#Vue事件处理器" class="headerlink" title="Vue事件处理器"></a>Vue事件处理器</h2><p>事件监听可以使用 v-on 指令<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    counter: 0</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通常情况下，我们需要使用一个方法来调用 JavaScript 方法。<br>v-on 可以接收一个定义的方法来调用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"greet"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'Vue.js'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 在 `methods` 对象中定义方法</span></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    greet: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// `this` 在方法里指当前 Vue 实例</span></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// `event` 是原生 DOM 事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (event) &#123;</span></span><br><span class="line"><span class="undefined">          alert(event.target.tagName)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 也可以用 JavaScript 直接调用方法</span></span></span><br><span class="line"><span class="javascript">app.greet() <span class="comment">// -&gt; 'Hello Vue.js!'</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    say: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      alert(message)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。<br>Vue.js通过由点(.)表示的指令后缀来调用修饰符。<br>.stop  .prevent  .capture  .self  .once<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">全部按键别名：</span><br><span class="line">.enter  .tab  .delete .esc  .space  .up  .down  .left  .right  .ctrl  .alt  .shift  .meta</span><br></pre></td></tr></table></figure></p><h2 id="Vue表单"><a href="#Vue表单" class="headerlink" title="Vue表单"></a>Vue表单</h2><p>v-model 指令在表单控件元素上创建双向数据绑定。<br>v-model 会根据控件类型自动选取正确的方法来更新元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>input 元素：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"编辑我……"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>textarea 元素：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space: pre"</span>&gt;</span>&#123;&#123; message2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message2"</span> <span class="attr">placeholder</span>=<span class="string">"多行文本输入……"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'Runoob'</span>,</span></span><br><span class="line"><span class="javascript">    message2: <span class="string">'教程\r\nhttp://www.baidu.com'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"runoob"</span> <span class="attr">value</span>=<span class="string">"Runoob"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"runoob"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"taobao"</span> <span class="attr">value</span>=<span class="string">"Taobao"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"taobao"</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    checked : <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">    checkedNames: []</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>单选按钮的双向数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"runoob"</span> <span class="attr">value</span>=<span class="string">"Runoob"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"runoob"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中值为: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    picked : <span class="string">'Runoob'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>select下拉列表的双向数据绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选择一个网站<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.baidu.com"</span>&gt;</span>Runoob<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.google.com"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span></span><br><span class="line">      选择的网站是: &#123;&#123;selected&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    selected: <span class="string">''</span> </span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 "change" 而不是 "input" 事件中更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></p><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这通常很有用，因为在 type=”number” 时 HTML 中输入的值也总是会返回字符串类型。<br>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><p>组件可以扩展 HTML 元素，封装可重用的代码。<br>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：<br>注册一个全局组件语法格式如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(tagName, options)</span><br></pre></td></tr></table></figure></p><p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tagName</span>&gt;</span><span class="tag">&lt;/<span class="name">tagName</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>所有实例都能用全局组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// &lt;runoob&gt; 将只在父模板可用</span></span></span><br><span class="line"><span class="javascript">    <span class="string">'runoob'</span>: Child</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>prop 是父组件用来传递数据的一个自定义属性。<br>父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    parentMsg: <span class="string">'父组件内容'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以下实例中将 v-bind 指令将 todo 传到每一个重复的组件中（注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">"item in sites"</span> <span class="attr">v-bind:todo</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'todo-item'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'todo'</span>],</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    sites: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">text</span>: <span class="string">'Runoob'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">text</span>: <span class="string">'Google'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">text</span>: <span class="string">'Taobao'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>组件可以为 props 指定验证要求。<br>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component('my-component', &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br><span class="line">    propA: Number,</span><br><span class="line">    // 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: 'hello' &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        // 这个值必须匹配下列字符串中的一个</span><br><span class="line">        return ['success', 'warning', 'danger'].indexOf(value) !== -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！<br>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：<br>使用 $on(eventName) 监听事件<br>使用 $emit(eventName) 触发事件<br>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件<br>以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"incrementHandler"</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      counter: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    incrementHandler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.counter += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    total: 0</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.total += <span class="number">1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">"doTheThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例,如下例子，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo3"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter2</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter2</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter2</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> buttonCounter2Data = &#123;</span></span><br><span class="line"><span class="undefined">  count: 0</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'button-counter2'</span>, &#123;</span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// data 选项是一个函数，组件不相互影响</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            count: 0</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// data 选项是一个对象，会影响到其他实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> buttonCounter2Data</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count++"</span>&gt;</span>点击了 &#123;&#123; count &#125;&#125; 次。<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#components-demo3'</span> &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue自定义指令"><a href="#Vue自定义指令" class="headerlink" title="Vue自定义指令"></a>Vue自定义指令</h2><p>除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。<br>下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span><br><span class="line"><span class="javascript">Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 当绑定元素插入到 DOM 中。</span></span></span><br><span class="line"><span class="javascript">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 聚焦元素</span></span></span><br><span class="line"><span class="undefined">    el.focus()</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  directives: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注册一个局部的自定义指令 v-focus</span></span></span><br><span class="line"><span class="undefined">    focus: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 指令的定义</span></span></span><br><span class="line"><span class="javascript">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 聚焦元素</span></span></span><br><span class="line"><span class="undefined">        el.focus()</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>指令定义函数提供了几个钩子函数</p><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作</li><li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li><li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。</li><li>unbind: 只调用一次， 指令与元素解绑时调用。</li></ul><p>钩子函数的参数有</p><ul><li>el: 指令所绑定的元素，可以用来直接操作 DOM </li><li>binding: 一个对象，包含以下属性(name: 指令名,value: 指令的绑定值,oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用,expression: 绑定值的表达式或变量名。 例如 v-my-directive=”1 + 1” ， expression 的值是 “1 + 1”,arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 “foo”,modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true })</li><li>vnode: Vue 编译生成的虚拟节点</li><li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>  <span class="attr">v-runoob:hello.a.b</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.directive(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify</span></span><br><span class="line"><span class="undefined">    el.innerHTML =</span></span><br><span class="line"><span class="javascript">      <span class="string">'name: '</span>       + s(binding.name) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">'value: '</span>      + s(binding.value) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">'expression: '</span> + s(binding.expression) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">'argument: '</span>   + s(binding.arg) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">'modifiers: '</span>  + s(binding.modifiers) + <span class="string">'&lt;br&gt;'</span> +</span></span><br><span class="line"><span class="javascript">      <span class="string">'vnode keys: '</span> + <span class="built_in">Object</span>.keys(vnode).join(<span class="string">', '</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    message: <span class="string">'教程!'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>有时候我们不需要其他钩子函数，我们可以简写函数，如下格式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive('runoob', function (el, binding) &#123;</span><br><span class="line">  // 设置指令的背景颜色</span><br><span class="line">  el.style.backgroundColor = binding.value.color</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-runoob</span>=<span class="string">"&#123; color: 'green', text: '菜鸟教程!' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.directive(<span class="string">'runoob'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 简写方式设置文本及背景颜色</span></span></span><br><span class="line"><span class="undefined">    el.innerHTML = binding.value.text</span></span><br><span class="line"><span class="undefined">    el.style.backgroundColor = binding.value.color</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h2><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。<br>通过 Vue.js 可以实现多视图的单页Web应用<br>Vue.js 路由需要载入 vue-router 库</p><p>简单的实现单页应用</p><p><router-link> 是一个组件，该组件用于设置一个导航链接，切换不同 HTML 内容。 to 属性为目标地址， 即要显示的内容。<br>以下实例中我们将 vue-router 加进来，然后配置组件和路由映射，再告诉 vue-router 在哪里渲染它们。代码如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></router-link></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 0. 如果使用模块化机制编程，导入 Vue 和 VueRouter，要调用 Vue.use(VueRouter)</span><br><span class="line"> </span><br><span class="line">// 1. 定义（路由）组件。</span><br><span class="line">// 可以从其他文件 import 进来</span><br><span class="line">const Foo = &#123; template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' &#125;</span><br><span class="line">const Bar = &#123; template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' &#125;</span><br><span class="line"> </span><br><span class="line">// 2. 定义路由</span><br><span class="line">// 每个路由应该映射一个组件。 其中"component" 可以是</span><br><span class="line">// 通过 Vue.extend() 创建的组件构造器，</span><br><span class="line">// 或者，只是一个组件配置对象。</span><br><span class="line">// 我们晚点再讨论嵌套路由。</span><br><span class="line">const routes = [</span><br><span class="line">  &#123; path: '/foo', component: Foo &#125;,</span><br><span class="line">  &#123; path: '/bar', component: Bar &#125;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">// 3. 创建 router 实例，然后传 `routes` 配置</span><br><span class="line">// 你还可以传别的配置参数, 不过先这么简单着吧。</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes // （缩写）相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">// 4. 创建和挂载根实例。</span><br><span class="line">// 记得要通过 router 配置参数注入路由，</span><br><span class="line">// 从而让整个应用都有路由功能</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount('#app')</span><br><span class="line"> </span><br><span class="line">// 现在，应用已经启动了！</span><br></pre></td></tr></table></figure><p>了解下更多关于 <router-link> 的属性</router-link></p><ul><li><p>to 表示目标路由的链接。 当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，导航后不会留下 history 记录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: '/abc'&#125;"</span> <span class="attr">replace</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置 append 属性后，则在当前 (相对) 路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'relative/path'&#125;"</span> <span class="attr">append</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>有时候想要 <router-link> 渲染成某种标签，例如&lt; li> 。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航</router-link></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span> <span class="attr">tag</span>=<span class="string">"li"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置 链接激活时使用的 CSS 类名。可以通过以下代码来替代。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">   ._active&#123;</span></span><br><span class="line"><span class="undefined">      background-color : red;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route1'&#125;"</span> <span class="attr">active-class</span> = <span class="string">"_active"</span>&gt;</span>Router Link 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route2'&#125;"</span> <span class="attr">tag</span> = <span class="string">"span"</span>&gt;</span>Router Link 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置当链接被精确匹配的时候应该激活的 class。可以通过以下代码来替代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route1'&#125;"</span> <span class="attr">exact-active-class</span> = <span class="string">"_active"</span>&gt;</span>Router Link 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route2'&#125;"</span> <span class="attr">tag</span> = <span class="string">"span"</span>&gt;</span>Router Link 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>event声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span> = <span class="string">"&#123; path: '/route1'&#125;"</span> <span class="attr">event</span> = <span class="string">"mouseover"</span>&gt;</span>Router Link 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue过渡动画"><a href="#Vue过渡动画" class="headerlink" title="Vue过渡动画"></a>Vue过渡动画</h2><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>Vue 提供了内置的过渡封装组件，该组件用于包裹要实现过渡效果的组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span> = <span class="string">"nameoftransition"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过以下实例来理解 Vue 的过渡是如何实现的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"databinding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">"show = !show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span> = <span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span> = <span class="string">"show"</span> <span class="attr">v-bind:style</span> = <span class="string">"styleobj"</span>&gt;</span>动画实例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el: <span class="string">'#databinding'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        show:<span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">        styleobj :&#123;</span></span><br><span class="line"><span class="javascript">            fontSize:<span class="string">'30px'</span>,</span></span><br><span class="line"><span class="javascript">            color:<span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods : &#123;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>过渡其实就是一个淡入淡出的效果。Vue在元素显示与隐藏的过渡中，提供了 6 个 class 来切换<br><img src="transition.png" alt="图"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</span><br><span class="line">v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</span><br><span class="line">v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</span><br><span class="line">v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</span><br><span class="line">v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</span><br><span class="line">v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除</span><br></pre></td></tr></table></figure></p><p>通常我们都使用 CSS 过渡来实现效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"databinding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">"show = !show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide-fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#databinding'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS 动画用法类似 CSS 过渡，但是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"databinding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">"show = !show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"bounce"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>教程 -- jiaoxue！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#databinding'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们可以通过以下特性来自定义过渡类名：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enter-class</span><br><span class="line">enter-active-class</span><br><span class="line">enter-to-class (2.1.8+)</span><br><span class="line">leave-class</span><br><span class="line">leave-active-class</span><br><span class="line">leave-to-class (2.1.8+)</span><br></pre></td></tr></table></figure></p><p>自定义过渡的类名优先级高于普通的类名，这样就能很好的与第三方（如：animate.css）的动画库结合使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"databinding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">"show = !show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"custom-classes-transition"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">"animated tada"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOutRight"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>菜鸟教程 -- 学的不仅是技术，更是梦想！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#databinding'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>同时使用过渡和动画,Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 transitionend 或 animationend ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。<br>但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 animation 很快的被触发并完成了，而 transition 效果还没结束。在这种情况中，你就需要使用 type 特性并设置 animation 或 transition 来明确声明你需要 Vue 监听的类型</li><li>显性的过渡持续时间,在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 transitionend 或 animationend 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果。在这种情况下你可以用 <transition> 组件上的 duration 属性定制一个显性的过渡持续时间 (以毫秒计),也可以定制进入和移出的持续时间<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">"1000"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">"&#123; enter: 500, leave: 800 &#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></transition></li></ul><p>可以在属性中声明 JavaScript 钩子:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">"enterCancelled"</span></span></span><br><span class="line"><span class="tag"> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">"beforeLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">"afterLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">"leaveCancelled"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  // --------</span><br><span class="line">  // 进入中</span><br><span class="line">  // --------</span><br><span class="line"> </span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  // --------</span><br><span class="line">  // 离开时</span><br><span class="line">  // --------</span><br><span class="line"> </span><br><span class="line">  beforeLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  leave: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // leaveCancelled 只用于 v-show 中</span><br><span class="line">  leaveCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">这些钩子函数可以结合 CSS transitions/animations 使用，也可以单独使用。</span><br></pre></td></tr></table></figure></p><p>当只用 JavaScript 过渡的时候，在 enter 和 leave 中必须使用 done 进行回调。否则，它们将被同步调用，过渡会立即完成。<br>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"databinding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">"show = !show"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:css</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>菜鸟教程 -- 学的不仅是技术，更是梦想！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#databinding'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    show: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      el.style.opacity = 0</span></span><br><span class="line"><span class="javascript">      el.style.transformOrigin = <span class="string">'left'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      Velocity(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">fontSize</span>: <span class="string">'1.4em'</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">300</span> &#125;)</span></span><br><span class="line"><span class="javascript">      Velocity(el, &#123; <span class="attr">fontSize</span>: <span class="string">'1em'</span> &#125;, &#123; <span class="attr">complete</span>: done &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      Velocity(el, &#123; <span class="attr">translateX</span>: <span class="string">'15px'</span>, <span class="attr">rotateZ</span>: <span class="string">'50deg'</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">600</span> &#125;)</span></span><br><span class="line"><span class="javascript">      Velocity(el, &#123; <span class="attr">rotateZ</span>: <span class="string">'100deg'</span> &#125;, &#123; <span class="attr">loop</span>: <span class="number">2</span> &#125;)</span></span><br><span class="line"><span class="undefined">      Velocity(el, &#123;</span></span><br><span class="line"><span class="javascript">        rotateZ: <span class="string">'45deg'</span>,</span></span><br><span class="line"><span class="javascript">        translateY: <span class="string">'30px'</span>,</span></span><br><span class="line"><span class="javascript">        translateX: <span class="string">'30px'</span>,</span></span><br><span class="line"><span class="undefined">        opacity: 0</span></span><br><span class="line"><span class="undefined">      &#125;, &#123; complete: done &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以通过 appear 特性设置节点在初始渲染的过渡<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里默认和进入/离开过渡一样，同样也可以自定义 CSS 类名<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-class</span>=<span class="string">"custom-appear-class"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear-to-class</span>=<span class="string">"custom-appear-to-class"</span> (<span class="attr">2.1.8</span>+)</span></span><br><span class="line"><span class="tag">  <span class="attr">appear-active-class</span>=<span class="string">"custom-appear-active-class"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>自定义 JavaScript 钩子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-appear</span>=<span class="string">"customBeforeAppearHook"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:appear</span>=<span class="string">"customAppearHook"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-appear</span>=<span class="string">"customAfterAppearHook"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:appear-cancelled</span>=<span class="string">"customAppearCancelledHook"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以设置多个元素的过渡，一般列表与描述：<br>需要注意的是当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">v-if</span>=<span class="string">"items.length &gt; 0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>抱歉，没有找到您查找的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"isEditing"</span> <span class="attr">key</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">"edit"</span>&gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在一些场景中，也可以通过给同一个元素的 key 特性设置不同的状态来代替 v-if 和 v-else，上面的例子可以重写为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">"isEditing"</span>&gt;</span></span><br><span class="line">    &#123;&#123; isEditing ? 'Save' : 'Edit' &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用多个 v-if 的多个元素的过渡可以重写为绑定了动态属性的单个元素过渡。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"docState === 'saved'"</span> <span class="attr">key</span>=<span class="string">"saved"</span>&gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"docState === 'edited'"</span> <span class="attr">key</span>=<span class="string">"edited"</span>&gt;</span></span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"docState === 'editing'"</span> <span class="attr">key</span>=<span class="string">"editing"</span>&gt;</span></span><br><span class="line">    Cancel</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以重写为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">"docState"</span>&gt;</span></span><br><span class="line">    &#123;&#123; buttonMessage &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line">computed: &#123;</span><br><span class="line">  buttonMessage: function () &#123;</span><br><span class="line">    switch (this.docState) &#123;</span><br><span class="line">      case 'saved': return 'Edit'</span><br><span class="line">      case 'edited': return 'Save'</span><br><span class="line">      case 'editing': return 'Cancel'</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Vue混入"><a href="#Vue混入" class="headerlink" title="Vue混入"></a>Vue混入</h2><p>混入 (mixins)定义了一部分可复用的方法或者计算属性。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: '#databinding',</span><br><span class="line">    data: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">// 定义一个混入对象</span><br><span class="line">var myMixin = &#123;</span><br><span class="line">    created: function () &#123;</span><br><span class="line">        this.startmixin()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        startmixin: function () &#123;</span><br><span class="line">            document.write("欢迎来到混入实例");</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var Component = Vue.extend(&#123;</span><br><span class="line">    mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line">var component = new Component();</span><br></pre></td></tr></table></figure></p><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。<br>比如，数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。<br>以下实例中，Vue 实例与混入对象包含了相同的方法。从输出结果可以看出两个选项合并了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var mixin = &#123;</span><br><span class="line">    created: function () &#123;</span><br><span class="line">        document.write('混入调用' + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    mixins: [mixin],</span><br><span class="line">        created: function () &#123;</span><br><span class="line">        document.write('组件调用' + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果 methods 选项中有相同的函数名，则 Vue 实例优先级会较高。如下实例，Vue 实例与混入对象的 methods 选项都包含了相同的函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var mixin = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hellworld: function () &#123;</span><br><span class="line">            document.write('HelloWorld 方法' + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">        &#125;,</span><br><span class="line">        samemethod: function () &#123;</span><br><span class="line">            document.write('Mixin：相同方法名' + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    mixins: [mixin],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        start: function () &#123;</span><br><span class="line">            document.write('start 方法' + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">        &#125;,</span><br><span class="line">        samemethod: function () &#123;</span><br><span class="line">            document.write('Main：相同方法名' + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">vm.hellworld();</span><br><span class="line">vm.start();</span><br><span class="line">vm.samemethod();</span><br></pre></td></tr></table></figure></p><p>可以全局注册混入对象。注意使用！ 一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 为自定义的选项 'myOption' 注入一个处理器。</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: function () &#123;</span><br><span class="line">    var myOption = this.$options.myOption</span><br><span class="line">    if (myOption) &#123;</span><br><span class="line">      console.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">new Vue(&#123;</span><br><span class="line">  myOption: 'hello!'</span><br><span class="line">&#125;)</span><br><span class="line">// =&gt; "hello!"</span><br></pre></td></tr></table></figure></p><p>谨慎使用全局混入对象，因为会影响到每个单独创建的 Vue 实例 (包括第三方模板)</p><h2 id="Vue-js-Ajax-axios"><a href="#Vue-js-Ajax-axios" class="headerlink" title="Vue.js Ajax(axios)"></a>Vue.js Ajax(axios)</h2><p>Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求。<br>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。<br>简单的读取 JSON 数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get('https://www.baidu.com/try/ajax/json_demo.json')</span><br><span class="line">      .then(response =&gt; (this.info = response))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用 response.data 读取 JSON 数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网站列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"site in info"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; site.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      info: <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted () &#123;</span></span><br><span class="line"><span class="undefined">    axios</span></span><br><span class="line"><span class="javascript">      .get(<span class="string">'https://www.baidu.com/try/ajax/json_demo.json'</span>)</span></span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="keyword">this</span>.info = response.data.sites))</span></span><br><span class="line"><span class="javascript">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; <span class="comment">// 请求失败处理</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>GET 方法传递参数格式如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 直接在 URL 上添加参数 ID=12345</span><br><span class="line">axios.get('/user?ID=12345')</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">// 也可以通过 parmas 设置参数：</span><br><span class="line">axios.get('/user', &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: 12345</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>POST 方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post('https://www.baidu.com/try/ajax/json_demo.json')</span><br><span class="line">      .then(response =&gt; (this.info = response))</span><br><span class="line">      .catch(function (error) &#123; // 请求失败处理</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>POST 方法传递参数格式如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post('/user', &#123;</span><br><span class="line">    firstName: 'Fred',        // 参数 firstName</span><br><span class="line">    lastName: 'Flintstone'    // 参数 lastName</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>执行多个并发请求<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">  return axios.get('/user/12345');</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">  return axios.get('/user/12345/permissions');</span><br><span class="line">&#125;</span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    // 两个请求现在都执行完成</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></p><p>可以通过向 axios 传递相关配置来创建请求。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">axios(config)</span><br><span class="line">// 发送 POST 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">  method: 'post',</span><br><span class="line">  url: '/user/12345',</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: 'Fred',</span><br><span class="line">    lastName: 'Flintstone'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//  GET 请求远程图片</span><br><span class="line">axios(&#123;</span><br><span class="line">  method:'get',</span><br><span class="line">  url:'http://bit.ly/2mTM3nY',</span><br><span class="line">  responseType:'stream'</span><br><span class="line">&#125;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))</span><br><span class="line">&#125;);</span><br><span class="line">axios(url[, config])</span><br><span class="line">// 发送 GET 请求（默认的方法）</span><br><span class="line">axios('/user/12345');</span><br></pre></td></tr></table></figure></p><p>为方便使用，官方为所有支持的请求方法提供了别名，可以直接使用别名来发起请求,在使用别名方法时， url、method、data 这些属性都不必在配置中指定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.request(config)</span><br><span class="line">axios.get(url[, config])</span><br><span class="line">axios.delete(url[, config])</span><br><span class="line">axios.head(url[, config])</span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure></p><p>处理并发请求的助手函数<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.all(iterable)</span><br><span class="line">axios.spread(callback)</span><br></pre></td></tr></table></figure></p><p>可以使用自定义配置新建一个 axios 实例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.create([config])</span><br><span class="line">const instance = axios.create(&#123;</span><br><span class="line">  baseURL: 'https://some-domain.com/api/',</span><br><span class="line">  timeout: 1000,</span><br><span class="line">  headers: &#123;'X-Custom-Header': 'foobar'&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>以下是可用的实例方法。指定的配置将与实例的配置合并<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios#request(config)</span><br><span class="line">axios#get(url[, config])</span><br><span class="line">axios#delete(url[, config])</span><br><span class="line">axios#head(url[, config])</span><br><span class="line">axios#post(url[, data[, config]])</span><br><span class="line">axios#put(url[, data[, config]])</span><br><span class="line">axios#patch(url[, data[, config]])</span><br></pre></td></tr></table></figure></p><p>下面是创建请求时可用的配置选项，注意只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // `url` 是用于请求的服务器 URL</span><br><span class="line">  url: "/user",</span><br><span class="line"></span><br><span class="line">  // `method` 是创建请求时使用的方法</span><br><span class="line">  method: "get", // 默认是 get</span><br><span class="line"></span><br><span class="line">  // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span><br><span class="line">  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span><br><span class="line">  baseURL: "https://some-domain.com/api/",</span><br><span class="line"></span><br><span class="line">  // `transformRequest` 允许在向服务器发送前，修改请求数据</span><br><span class="line">  // 只能用在 "PUT", "POST" 和 "PATCH" 这几个请求方法</span><br><span class="line">  // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br><span class="line">  transformRequest: [function (data) &#123;</span><br><span class="line">    // 对 data 进行任意转换处理</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span><br><span class="line">  transformResponse: [function (data) &#123;</span><br><span class="line">    // 对 data 进行任意转换处理</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // `headers` 是即将被发送的自定义请求头</span><br><span class="line">  headers: &#123;"X-Requested-With": "XMLHttpRequest"&#125;,</span><br><span class="line"></span><br><span class="line">  // `params` 是即将与请求一起发送的 URL 参数</span><br><span class="line">  // 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: 12345</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `paramsSerializer` 是一个负责 `params` 序列化的函数</span><br><span class="line">  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span><br><span class="line">  paramsSerializer: function(params) &#123;</span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: "brackets"&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `data` 是作为请求主体被发送的数据</span><br><span class="line">  // 只适用于这些请求方法 "PUT", "POST", 和 "PATCH"</span><br><span class="line">  // 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><br><span class="line">  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">  // - 浏览器专属：FormData, File, Blob</span><br><span class="line">  // - Node 专属： Stream</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: "Fred"</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span><br><span class="line">  // 如果请求话费了超过 `timeout` 的时间，请求将被中断</span><br><span class="line">  timeout: 1000,</span><br><span class="line"></span><br><span class="line">  // `withCredentials` 表示跨域请求时是否需要使用凭证</span><br><span class="line">  withCredentials: false, // 默认的</span><br><span class="line"></span><br><span class="line">  // `adapter` 允许自定义处理请求，以使测试更轻松</span><br><span class="line">  // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span><br><span class="line">  adapter: function (config) &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span><br><span class="line">  // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: "janedoe",</span><br><span class="line">    password: "s00pers3cret"</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `responseType` 表示服务器响应的数据类型，可以是 "arraybuffer", "blob", "document", "json", "text", "stream"</span><br><span class="line">  responseType: "json", // 默认的</span><br><span class="line"></span><br><span class="line">  // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span><br><span class="line">  xsrfCookieName: "XSRF-TOKEN", // default</span><br><span class="line"></span><br><span class="line">  // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span><br><span class="line">  xsrfHeaderName: "X-XSRF-TOKEN", // 默认的</span><br><span class="line"></span><br><span class="line">  // `onUploadProgress` 允许为上传处理进度事件</span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    // 对原生进度事件的处理</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `onDownloadProgress` 允许为下载处理进度事件</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    // 对原生进度事件的处理</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `maxContentLength` 定义允许的响应内容的最大尺寸</span><br><span class="line">  maxContentLength: 2000,</span><br><span class="line"></span><br><span class="line">  // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // 默认的</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span><br><span class="line">  // 如果设置为0，将不会 follow 任何重定向</span><br><span class="line">  maxRedirects: 5, // 默认的</span><br><span class="line"></span><br><span class="line">  // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><br><span class="line">  // `keepAlive` 默认没有启用</span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line"></span><br><span class="line">  // "proxy" 定义代理服务器的主机名称和端口</span><br><span class="line">  // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class="line">  // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: "127.0.0.1",</span><br><span class="line">    port: 9000,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: "mikeymike",</span><br><span class="line">      password: "rapunz3l"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // `cancelToken` 指定用于取消请求的 cancel token</span><br><span class="line">  // （查看后面的 Cancellation 这节了解更多）</span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>axios请求的响应包含以下信息：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // `data` 由服务器提供的响应</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  // `status`  HTTP 状态码</span><br><span class="line">  status: 200,</span><br><span class="line"></span><br><span class="line">  // `statusText` 来自服务器响应的 HTTP 状态信息</span><br><span class="line">  statusText: "OK",</span><br><span class="line"></span><br><span class="line">  // `headers` 服务器响应的头</span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  // `config` 是为请求提供的配置信息</span><br><span class="line">  config: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 then 时，会接收下面这样的响应,在使用 catch 时，或传递 rejection callback 作为 then 的第二个参数时，响应可以通过 error 对象可被使用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">axios.get("/user/12345")</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">    console.log(response.data);</span><br><span class="line">    console.log(response.status);</span><br><span class="line">    console.log(response.statusText);</span><br><span class="line">    console.log(response.headers);</span><br><span class="line">    console.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>可以指定将被用在各个请求的配置默认值,全局的 axios 默认值:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = 'https://api.example.com';</span><br><span class="line">axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';</span><br></pre></td></tr></table></figure></p><p>自定义实例默认值：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建实例时设置配置的默认值</span><br><span class="line">var instance = axios.create(&#123;</span><br><span class="line">  baseURL: 'https://api.example.com'</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 在实例已创建后修改默认值</span><br><span class="line">instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure></p><p>配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 使用由库提供的配置的默认值来创建实例</span><br><span class="line">// 此时超时配置的默认值是 `0`</span><br><span class="line">var instance = axios.create();</span><br><span class="line"></span><br><span class="line">// 覆写库的超时默认值</span><br><span class="line">// 现在，在超时前，所有请求都会等待 2.5 秒</span><br><span class="line">instance.defaults.timeout = 2500;</span><br><span class="line"></span><br><span class="line">// 为已知需要花费很长时间的请求覆写超时设置</span><br><span class="line">instance.get('/longRequest', &#123;</span><br><span class="line">  timeout: 5000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在请求或响应被 then 或 catch 处理前拦截它们。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>如果你想在稍后移除拦截器，可以这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myInterceptor = axios.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure></p><p>可以为自定义 axios 实例添加拦截器。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(function () &#123;/*...*/&#125;);</span><br></pre></td></tr></table></figure></p><p>错误处理<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.get('/user/12345')</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    if (error.response) &#123;</span><br><span class="line">      // 请求已发出，但服务器响应的状态码不在 2xx 范围内</span><br><span class="line">      console.log(error.response.data);</span><br><span class="line">      console.log(error.response.status);</span><br><span class="line">      console.log(error.response.headers);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // Something happened in setting up the request that triggered an Error</span><br><span class="line">      console.log('Error', error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get('/user/12345', &#123;</span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status <span class="tag">&lt; <span class="attr">500</span>; // 状态码在大于或等于<span class="attr">500</span>时才会 <span class="attr">reject</span></span></span><br><span class="line"><span class="tag">  &#125;</span></span><br><span class="line"><span class="tag">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>可以使用 CancelToken.source 工厂方法创建 cancel token取消请求，像这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var CancelToken = axios.CancelToken;</span><br><span class="line">var source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.get('/user/12345', &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(function(thrown) &#123;</span><br><span class="line">  if (axios.isCancel(thrown)) &#123;</span><br><span class="line">    console.log('Request canceled', thrown.message);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 处理错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 取消请求（message 参数是可选的）</span><br><span class="line">source.cancel('Operation canceled by the user.');</span><br></pre></td></tr></table></figure></p><p>还可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var CancelToken = axios.CancelToken;</span><br><span class="line">var cancel;</span><br><span class="line"></span><br><span class="line">axios.get('/user/12345', &#123;</span><br><span class="line">  cancelToken: new CancelToken(function executor(c) &#123;</span><br><span class="line">    // executor 函数接收一个 cancel 函数作为参数</span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 取消请求</span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure></p><p>可以使用同一个 cancel token 取消多个请求</p><p>axios 会默认序列化 JavaScript 对象为 JSON。 如果想使用 application/x-www-form-urlencoded 格式，你可以使用下面的配置<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在浏览器环境，你可以使用 URLSearchParams API</span><br><span class="line">const params = new URLSearchParams();</span><br><span class="line">params.append('param1', 'value1');</span><br><span class="line">params.append('param2', 'value2');</span><br><span class="line">axios.post('/foo', params);</span><br><span class="line">在 node.js里, 可以使用 querystring 模块</span><br><span class="line">const querystring = require('querystring');</span><br><span class="line">axios.post('http://something.com/', querystring.stringify(&#123; foo: 'bar' &#125;));</span><br></pre></td></tr></table></figure></p><h2 id="Vue响应接口"><a href="#Vue响应接口" class="headerlink" title="Vue响应接口"></a>Vue响应接口</h2><p>Vue 可以添加数据动态响应接口。<br>例如以下实例，我们通过使用 $watch 属性来实现数据的监听，$watch 必须添加在 Vue 实例之外才能实现正确的响应。<br>实例中通过点击按钮计数器会加 1。setTimeout 设置 10 秒后计算器的值加上 20 。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"counter++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">        counter: 1</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">nval, oval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'计数器值的变化 :'</span> + oval + <span class="string">' 变为 '</span> + nval + <span class="string">'!'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">setTimeout(</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        vm.counter += 20;</span></span><br><span class="line"><span class="undefined">    &#125;,10000</span></span><br><span class="line"><span class="undefined">);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性。<br>Vue 不能检测到对象属性的添加或删除，最好的方式就是在初始化实例前声明根级响应式属性，哪怕只是一个空值。<br>如果我们需要在运行过程中实现属性的添加或删除，则可以使用全局 Vue，Vue.set 和 Vue.delete 方法。</p><p>Vue.set 方法用于设置对象的属性，它可以解决 Vue 无法检测添加属性的限制，语法格式如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.set( target, key, value )</span><br><span class="line">target可以是对象或数组</span><br><span class="line">key可以是字符串或数字</span><br><span class="line">value可以是任何类型</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; products.id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"products.id++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myproduct = &#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">"book"</span>, <span class="string">"price"</span>:<span class="string">"20.00"</span>&#125;;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">   el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">   data: &#123;</span></span><br><span class="line"><span class="undefined">      counter: 1,</span></span><br><span class="line"><span class="undefined">      products: myproduct</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">vm.products.qty = <span class="string">"1"</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(vm);</span></span><br><span class="line"><span class="javascript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">nval, oval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   alert(<span class="string">'计数器值的变化 :'</span> + oval + <span class="string">' 变为 '</span> + nval + <span class="string">'!'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在以上实例中，使用以下代码在开始时创建了一个变量 myproduct：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myproduct = &#123;"id":1, name:"book", "price":"20.00"&#125;;</span><br></pre></td></tr></table></figure></p><p>该变量在赋值给了 Vue 实例的 data 对象：</p><p>var vm = new Vue({ el: ‘#app’, data: { counter: 1, products: myproduct } });<br>如果我们想给 myproduct 数组添加一个或多个属性，我们可以在 Vue 实例创建后使用以下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.products.qty = "1";</span><br></pre></td></tr></table></figure></p><p>在产品中添加了数量属性 qty，但是 get/set 方法只可用于 id，name 和 price 属性，却不能在 qty 属性中使用。<br>我们不能通过添加 Vue 对象来实现响应。 Vue 主要在开始时创建所有属性。 如果我们要实现这个功能，可以通过 Vue.set 来实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; products.id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"products.id++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myproduct = &#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">"book"</span>, <span class="string">"price"</span>:<span class="string">"20.00"</span>&#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">   el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">   data: &#123;</span></span><br><span class="line"><span class="undefined">      counter: 1,</span></span><br><span class="line"><span class="undefined">      products: myproduct</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">Vue.set(myproduct, <span class="string">'qty'</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(vm);</span></span><br><span class="line"><span class="javascript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">nval, oval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   alert(<span class="string">'计数器值的变化 :'</span> + oval + <span class="string">' 变为 '</span> + nval + <span class="string">'!'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Vue.delete 用于删除动态添加的属性,<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.delete( target, key )</span><br><span class="line">target: 可以是对象或数组</span><br><span class="line">key : 可以是字符串或数字</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; products.id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"products.id++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myproduct = &#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">"book"</span>, <span class="string">"price"</span>:<span class="string">"20.00"</span>&#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">   el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">   data: &#123;</span></span><br><span class="line"><span class="undefined">      counter: 1,</span></span><br><span class="line"><span class="undefined">      products: myproduct</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="javascript">Vue.delete(myproduct, <span class="string">'price'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(vm);</span></span><br><span class="line"><span class="javascript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">nval, oval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   alert(<span class="string">'计数器值的变化 :'</span> + oval + <span class="string">' 变为 '</span> + nval + <span class="string">'!'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue简单的导航菜单"><a href="#Vue简单的导航菜单" class="headerlink" title="Vue简单的导航菜单"></a>Vue简单的导航菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 激活的菜单样式为  active 类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为了阻止链接在点击时跳转，我们使用了 "prevent" 修饰符 (preventDefault 的简称)。 --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">v-bind:class</span>=<span class="string">"active"</span> <span class="attr">v-on:click.prevent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 当菜单上的链接被点击时，我们调用了 makeActive 方法, 该方法在 Vue 实例中创建。 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"home"</span> <span class="attr">v-on:click</span>=<span class="string">"makeActive('home')"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"projects"</span> <span class="attr">v-on:click</span>=<span class="string">"makeActive('projects')"</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"services"</span> <span class="attr">v-on:click</span>=<span class="string">"makeActive('services')"</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"contact"</span> <span class="attr">v-on:click</span>=<span class="string">"makeActive('contact')"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!-- 以下 "active" 变量会根据当前选中的值来自动变换 --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您选择了 <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;active&#125;&#125; 菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建一个新的 Vue 实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// DOM 元素，挂载视图模型</span></span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#main'</span>,</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义属性，并设置初始值</span></span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        active: <span class="string">'home'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击菜单使用的函数</span></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        makeActive: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 模型改变，视图会自动更新</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.active = item;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue编辑文本实例"><a href="#Vue编辑文本实例" class="headerlink" title="Vue编辑文本实例"></a>Vue编辑文本实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-cloak 隐藏未编译的变量，直到 Vue 实例准备就绪。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 元素点击后 hideTooltp() 方法被调用 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">v-cloak</span> <span class="attr">v-on:click</span>=<span class="string">"hideTooltip"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 这是一个提示框</span></span><br><span class="line"><span class="comment">         v-on:click.stop 是一个点击事件处理器，stop 修饰符用于阻止事件传递</span></span><br><span class="line"><span class="comment">         v-if 用来判断 show_tooltip 为 true 时才显示 --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">v-on:click.stop</span> <span class="attr">v-if</span>=<span class="string">"show_tooltip"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- v-model 绑定了文本域的内容</span></span><br><span class="line"><span class="comment">         在文本域内容改变时，对应的变量也会实时改变  --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text_content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 点击后调用 "toggleTooltip" 方法并阻止事件传递 --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--  "text_content" 变量根据文本域内容的变化而变化 --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:click.stop</span>=<span class="string">"toggleTooltip"</span>&gt;</span>&#123;&#123;text_content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#main'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        show_tooltip: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        text_content: <span class="string">'点我，并编辑内容。'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        hideTooltip: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在模型改变时，视图也会自动更新</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.show_tooltip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        toggleTooltip: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.show_tooltip = !<span class="keyword">this</span>.show_tooltip;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue订单列表实例"><a href="#Vue订单列表实例" class="headerlink" title="Vue订单列表实例"></a>Vue订单列表实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 循环输出 services 数组, 设置选项点击后的样式 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"service in services"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleActive(service)"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; 'active': service.active&#125;"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">&lt;!-- 显示订单中的服务名，价格</span></span><br><span class="line"><span class="comment">                 Vue.js 定义了货币过滤器，用于格式化价格 --&gt;</span></span><br><span class="line"> </span><br><span class="line">            &#123;&#123;service.name&#125;&#125; <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;service.price | currency&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 计算所有服务的价格，并格式化货币 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        Total: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;total() | currency&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="comment">// 自定义过滤器 "currency". </span></span></span><br><span class="line"><span class="javascript">Vue.filter(<span class="string">'currency'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">'$'</span> + value.toFixed(<span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#main'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义模型属性 the model properties. The view will loop</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 视图将循环输出数组的数据</span></span></span><br><span class="line"><span class="undefined">        services: [</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'Web Development'</span>,</span></span><br><span class="line"><span class="undefined">                price: 300,</span></span><br><span class="line"><span class="javascript">                active:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;,&#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'Design'</span>,</span></span><br><span class="line"><span class="undefined">                price: 400,</span></span><br><span class="line"><span class="javascript">                active:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">            &#125;,&#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'Integration'</span>,</span></span><br><span class="line"><span class="undefined">                price: 250,</span></span><br><span class="line"><span class="javascript">                active:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">            &#125;,&#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">'Training'</span>,</span></span><br><span class="line"><span class="undefined">                price: 220,</span></span><br><span class="line"><span class="javascript">                active:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        toggleActive: <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            s.active = !s.active;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        total: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.services.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (s.active)&#123;</span></span><br><span class="line"><span class="undefined">                    total+= s.price;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">           <span class="keyword">return</span> total;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue搜索页面实例"><a href="#Vue搜索页面实例" class="headerlink" title="Vue搜索页面实例"></a>Vue搜索页面实例</h2><p>在输入框输入搜索内容，列表显示配置的列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- searchString 模型与文本域创建绑定 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"searchString"</span> <span class="attr">placeholder</span>=<span class="string">"输入搜索内容"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环输出数据 --&gt;</span></span><br><span class="line">             </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"article in filteredArticles"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"article.url"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"article.image"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;article.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#main'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        searchString: <span class="string">""</span>,</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 数据模型，实际环境你可以根据 Ajax 来获取</span></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">        articles: [</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"What You Need To Know About CSS Variables"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/css/css-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: <span class="string">"https://static.runoob.com/images/icon/css.png"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"Freebie: 4 Great Looking Pricing Tables"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/html/html-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: <span class="string">"https://static.runoob.com/images/icon/html.png"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"20 Interesting JavaScript and CSS Libraries for February 2016"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/css3/css3-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: <span class="string">"https://static.runoob.com/images/icon/css3.png"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"Quick Tip: The Easiest Way To Make Responsive Headers"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/css3/css3-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: <span class="string">"https://static.runoob.com/images/icon/css3.png"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"Learn SQL In 20 Minutes"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/sql/sql-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: <span class="string">"https://static.runoob.com/images/icon/sql.png"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"Creating Your First Desktop App With HTML, JS and Electron"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/js/js-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: <span class="string">"https://static.runoob.com/images/icon/html.png"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算数学，匹配搜索</span></span></span><br><span class="line"><span class="javascript">        filteredArticles: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> articles_array = <span class="keyword">this</span>.articles,</span></span><br><span class="line"><span class="javascript">                searchString = <span class="keyword">this</span>.searchString;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(!searchString)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> articles_array;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">            searchString = searchString.trim().toLowerCase();</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">            articles_array = articles_array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(item.title.toLowerCase().indexOf(searchString) !== <span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> item;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">            <span class="comment">// 返回过来后的数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> articles_array;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Vue切换布局实例"><a href="#Vue切换布局实例" class="headerlink" title="Vue切换布局实例"></a>Vue切换布局实例</h2><p>点击右上角的按钮来切换不同页面布局<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">&lt;!-- 两个按钮用于切换不同的列表布局 --&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"list-icon"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; 'active': layout == 'list'&#125;"</span> <span class="attr">v-on:click</span>=<span class="string">"layout = 'list'"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"grid-icon"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; 'active': layout == 'grid'&#125;"</span> <span class="attr">v-on:click</span>=<span class="string">"layout = 'grid'"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 我们设置了两套布局页面。使用哪套依赖于 "layout" 绑定 --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"layout == 'grid'"</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用大图，没有文本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"a in articles"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"a.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"a.image.large"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"layout == 'list'"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用小图及标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"a in articles"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"a.url"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"a.image.small"</span> /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;a.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#main'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 视图模型，可能的值是 "grid" 或 "list"。</span></span></span><br><span class="line"><span class="javascript">            layout: <span class="string">'grid'</span>,</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">            articles: [&#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"HTML 教程"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/html/html-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"large"</span>: <span class="string">"https://static.runoob.com/images/mix/htmlbig.png"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"small"</span>: <span class="string">"https://static.runoob.com/images/icon/html.png"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"CSS 教程"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/css/css-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"large"</span>: <span class="string">"https://static.runoob.com/images/mix/cssbig.png"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"small"</span>: <span class="string">"https://static.runoob.com/images/icon/css.png"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"JS 教程"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/js/js-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"large"</span>: <span class="string">"https://static.runoob.com/images/mix/jsbig.jpeg"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"small"</span>: <span class="string">"https://static.runoob.com/images/icon/js.png"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"SQL  教程"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/sql/sql-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"large"</span>: <span class="string">"https://static.runoob.com/images/mix/sqlbig.png"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"small"</span>: <span class="string">"https://static.runoob.com/images/icon/sql.png"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"Ajax 教程"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/ajax/ajax-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"large"</span>: <span class="string">"https://static.runoob.com/images/mix/ajaxbig.png"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"small"</span>: <span class="string">"https://static.runoob.com/images/icon/ajax.png"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">"title"</span>: <span class="string">"Python 教程"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"url"</span>: <span class="string">"https://www.runoob.com/pyhton/pyhton-tutorial.html"</span>,</span></span><br><span class="line"><span class="javascript">                <span class="string">"image"</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">"large"</span>: <span class="string">"https://static.runoob.com/images/mix/pythonbig.png"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"small"</span>: <span class="string">"https://static.runoob.com/images/icon/python.png"</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;]</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习scikit-learn实践(1)</title>
      <link href="/2019/05/20/scikit-learnPractice-1/"/>
      <url>/2019/05/20/scikit-learnPractice-1/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Sklearn的安装"><a href="#Sklearn的安装" class="headerlink" title="Sklearn的安装"></a>Sklearn的安装</h2><p>&emsp;&emsp;scikit-learn是一个用于机器学习的python开源库，它依赖于NumPy，SciPy和Matplotlib这三个库，所以scikit-learn整个安装顺序就是：先装NumPy，然后装SciPy，接着安装Matplotlib，最后安装scikit-learn。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade --target=D:\Python34\Lib\site-packages D:\out\python\numpy<span class="number">-1.16</span><span class="number">.3</span>-cp36-cp36m-win32.whl</span><br><span class="line">python -m pip install --upgrade --target=D:\Python34\Lib\site-packages D:\out\python\scipy<span class="number">-1.3</span><span class="number">.0</span>-cp36-cp36m-win32.whl</span><br><span class="line">python -m pip install --upgrade --target=D:\Python34\Lib\site-packages D:\out\python\matplotlib<span class="number">-3.0</span><span class="number">.3</span>-cp36-cp36m-win32.whl</span><br><span class="line">python -m pip install --upgrade --target=D:\Python34\Lib\site-packages D:\out\python\scikit_learn<span class="number">-0.21</span><span class="number">.1</span>-cp36-cp36m-win32.whl</span><br></pre></td></tr></table></figure></p><p>安装好模块后测试是否可正常运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python34\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#测试sklearn是否正常运行</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line">print(digits.data)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;scikit-learn内置了很多机器学习模块，也提供了很多数据集。scikit-learn中学习模式的调用，有很强的统一性，很多都是类似的，学会一个，其他基本差不多。</p><ol><li>导入模型</li><li>建立模型</li><li>训练模型</li><li>预测<h2 id="Sklearn模块"><a href="#Sklearn模块" class="headerlink" title="Sklearn模块"></a>Sklearn模块</h2><img src="Sklearn模块.jpg" alt="Sklearn模块示意图"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> scikit-learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rpc+python+wpf</title>
      <link href="/2019/05/20/rpc-python-wpf/"/>
      <url>/2019/05/20/rpc-python-wpf/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>实验目标:<br>&emsp;&emsp;通过跨语言RPC框架(例如Thrift),Python提供服务,WPF(.NET)负责调用呈现服务。<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取数据</title>
      <link href="/2019/05/20/crawlingDataHello/"/>
      <url>/2019/05/20/crawlingDataHello/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>安装requests。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install requests</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>安装beautifulsoup4。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade --target=D:\Python34\Lib\site-packages D:\out\python\beautifulsoup4<span class="number">-4.7</span><span class="number">.1</span>-py3-none-any.whl</span><br></pre></td></tr></table></figure></p><p>检查当前pip已安装的模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></p><p>Requests：是使用Apache2Licensed许可证的基于Python开发的HTTP库，其在Python内置模块的基础上进行了高度的封装，从而使得Pythoner进行网络请求时，变得美好了许多，使用Requests可以轻而易举的完成浏览器可有的任何操作。<br>BeautifulSoup：是一个模块，该模块用于接收一个HTML或XML字符串，然后将其进行格式化，之后遍可以使用他提供的方法进行快速查找指定元素，从而使得在HTML或XML中查找指定元素变得简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python34\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">reponse=requests.get(<span class="string">'https://www.autohome.com.cn/news/'</span>)</span><br><span class="line"><span class="comment">#reponse.apparent_encoding　获取文本的原来编码</span></span><br><span class="line"><span class="comment">#reponse.encoding　对文本编码进行设置</span></span><br><span class="line"><span class="comment">#reponse.text获取文本内容，str类型</span></span><br><span class="line"><span class="comment">#reponse.content 获取数据，byte类型</span></span><br><span class="line"><span class="comment">#reponse.status_code 获取响应状态码</span></span><br><span class="line">reponse.encoding = reponse.apparent_encoding</span><br><span class="line"><span class="comment">#获取文本原来编码，使两者编码一致才能正确显示</span></span><br><span class="line"></span><br><span class="line">soup=BeautifulSoup(reponse.text,<span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">target = soup.find(id=<span class="string">"auto-channel-lazyload-article"</span>)</span><br><span class="line"><span class="comment">#find根据属性去获取对象，id,attr,tag...自定义属性自定义标签都可以查找</span></span><br><span class="line"><span class="comment">#对于获取的标签对象，obj.text获取文本obj.attrs获取属性字典</span></span><br><span class="line">li_list = target.find_all(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    a_tag = li.find(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">if</span> a_tag:</span><br><span class="line">        href = a_tag.attrs.get(<span class="string">"href"</span>)</span><br><span class="line">        title = a_tag.find(<span class="string">"h3"</span>).text</span><br><span class="line">        img_src = <span class="string">"http:"</span>+a_tag.find(<span class="string">"img"</span>).attrs.get(<span class="string">'src'</span>)</span><br><span class="line">        print(href)</span><br><span class="line">        print(title)</span><br><span class="line">        print(img_src)</span><br><span class="line">        img_reponse = requests.get(url=img_src)</span><br><span class="line">        <span class="comment">#设置一个不重复的图片名</span></span><br><span class="line">        file_name = str(uuid.uuid4())+<span class="string">'.jpg'</span></span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_reponse.content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬取数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV的Python实践(5)</title>
      <link href="/2019/05/20/OpenCvPythonPractice-5/"/>
      <url>/2019/05/20/OpenCvPythonPractice-5/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Meanshift算法-视频分析"><a href="#Meanshift算法-视频分析" class="headerlink" title="Meanshift算法(视频分析)"></a>Meanshift算法(视频分析)</h2><a id="more"></a><p>在视频中找到并跟踪目标对象</p><h2 id="Camshift算法-视频分析"><a href="#Camshift算法-视频分析" class="headerlink" title="Camshift算法(视频分析)"></a>Camshift算法(视频分析)</h2><p>在视频中找到并跟踪目标对象</p><h2 id="Lucas-Kanade光流"><a href="#Lucas-Kanade光流" class="headerlink" title="Lucas-Kanade光流"></a>Lucas-Kanade光流</h2><h2 id="BackgroundSubtractorMOG前-背景分割算法"><a href="#BackgroundSubtractorMOG前-背景分割算法" class="headerlink" title="BackgroundSubtractorMOG前/背景分割算法"></a>BackgroundSubtractorMOG前/背景分割算法</h2><p>静态背景图像估计</p><h2 id="BackgroundSubtractorMOG2前-背景分割算法"><a href="#BackgroundSubtractorMOG2前-背景分割算法" class="headerlink" title="BackgroundSubtractorMOG2前/背景分割算法"></a>BackgroundSubtractorMOG2前/背景分割算法</h2><p>每个像素的贝叶斯分割</p><h2 id="BackgroundSubtractorGMG分割算法"><a href="#BackgroundSubtractorGMG分割算法" class="headerlink" title="BackgroundSubtractorGMG分割算法"></a>BackgroundSubtractorGMG分割算法</h2><p>结合了静态背景图像估计和每个像素的贝叶斯分割</p><h2 id="摄像机标定"><a href="#摄像机标定" class="headerlink" title="摄像机标定"></a>摄像机标定</h2><p>对畸变图像进行修复</p><h2 id="姿势估计"><a href="#姿势估计" class="headerlink" title="姿势估计"></a>姿势估计</h2><p>3D效果</p><h2 id="对极几何，对极约束"><a href="#对极几何，对极约束" class="headerlink" title="对极几何，对极约束"></a>对极几何，对极约束</h2><h2 id="立体图像的深度地图"><a href="#立体图像的深度地图" class="headerlink" title="立体图像的深度地图"></a>立体图像的深度地图</h2><h2 id="机器学习-K近邻"><a href="#机器学习-K近邻" class="headerlink" title="机器学习-K近邻"></a>机器学习-K近邻</h2><p>找出测试数据在特征空间中的最近的邻居。</p><h2 id="支持向量机SVM"><a href="#支持向量机SVM" class="headerlink" title="支持向量机SVM"></a>支持向量机SVM</h2><h2 id="K值聚类"><a href="#K值聚类" class="headerlink" title="K值聚类"></a>K值聚类</h2><h2 id="计算摄影学"><a href="#计算摄影学" class="headerlink" title="计算摄影学"></a>计算摄影学</h2><ol><li><p>图像去噪</p></li><li><p>图像修补</p></li></ol><h2 id="Haar分类器进行面部检测-眼部检测"><a href="#Haar分类器进行面部检测-眼部检测" class="headerlink" title="Haar分类器进行面部检测(眼部检测)"></a>Haar分类器进行面部检测(眼部检测)</h2>]]></content>
      
      
      <categories>
          
          <category> OpenCV的Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV的Python实践(4)</title>
      <link href="/2019/05/19/OpenCvPythonPractice-4/"/>
      <url>/2019/05/19/OpenCvPythonPractice-4/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="直方图反向投影"><a href="#直方图反向投影" class="headerlink" title="直方图反向投影"></a>直方图反向投影</h2><a id="more"></a><p>&emsp;&emsp;直方图反向投影用来做图像分割，或者在图像中寻找感兴趣的部分。<br>&emsp;&emsp;简单来说，直方图反向投影会输出与输入图像(待搜索)同样大小的图像，其中的每一个像素值代表输入图像上对应点属于目标对象的概率，用更简单的话说，输出图像中像素值越高(越白)的点，越可能代表我们要搜素的目标(在输入图像所在的位置)。<br>&emsp;&emsp;如何实现这个算法呢？</p><ul><li>首先要为一张包含我们待查找目标的图像创建直方图，最好使用颜色直方图，因为一个物体的颜色要比灰度更好的被用来进行图像分割与对象识别。</li><li>把这个颜色直方图投影到输入图像中寻找我们的目标。也就是找到输入图像中的每一个像素点的像素值在直方图中对应的概率，得到一个概率图像。</li><li>最后设置适当的阈值，对概率图像进行而二值化。就这么简单。</li></ul><ol><li>Numpy中的算法：</li></ol><ul><li>首先创建两幅颜色直方图，目标图像(待搜索)的直方图(‘M’)，输入图像直方图(‘I’)</li><li>计算比值R=M/I,得到反向投影R，根据R这个调色板创建一幅新图像，其中每一个像素代表这个点就是目标的概率。输出图像中灰度值最大的地方就是要查找的目标的位置，如果要找的是一个区域，使用一个阈值对图像进行二值化后可得到结果。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">target=cv2.imread(<span class="string">'psbPart.jpg'</span>)</span><br><span class="line">hsvt=cv2.cvtColor(target,cv2.COLOR_BGR2HSV)</span><br><span class="line">M=cv2.calcHist([hsv],[<span class="number">0</span>,<span class="number">1</span>],<span class="literal">None</span>,[<span class="number">180</span>,<span class="number">256</span>],[<span class="number">0</span>,<span class="number">180</span>,<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">I=cv2.calcHist([hsvt],[<span class="number">0</span>,<span class="number">1</span>],<span class="literal">None</span>,[<span class="number">180</span>,<span class="number">256</span>],[<span class="number">0</span>,<span class="number">180</span>,<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#代码有问题  圆盘算子做卷积 B=D x B 其中D为卷积核</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">h,s,v=cv2.split(hsvt)</span></span><br><span class="line"><span class="string">B=R[h.ravel(),s.ravel()]</span></span><br><span class="line"><span class="string">B=np.minimum(B,1)</span></span><br><span class="line"><span class="string">B=B.reshape(hsvt.shape[:2])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">disc=cv2.getStructuringElement(cv2.MORPH_ELLTPSE,(5,5))</span></span><br><span class="line"><span class="string">B=cv2.filter2D(B,-1,disc)</span></span><br><span class="line"><span class="string">B=np.uint8(B)</span></span><br><span class="line"><span class="string">cv2.normalize(B,B,0,255,cv2.NORM_MINMAX)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ret,thresh=cv2.threshold(B,50,255,0)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><ol start="2"><li>OpenCV中的直方图反向投影<br>&emsp;&emsp;OpenCV提供cv2.calcBackProject()做直方图投影。其参数与cv2.calHist基本相同。其中一个参数是我们要查找目标的直方图，同样再使用目标的直方图做反向投影之前，我们应该先对其做归一化处理。返回结果是一个概率图像，再使用圆盘形卷积核对其做卷操作，最后使用阈值进行二值化。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#在输入图像中搜索目标图像</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">smallimg_ToFind = cv2.imread(<span class="string">'hair.jpg'</span>)</span><br><span class="line">hsv=cv2.cvtColor(smallimg_ToFind,cv2.COLOR_BGR2HSV)</span><br><span class="line">inputImg=cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">hsvt=cv2.cvtColor(inputImg,cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">hsvhist=cv2.calcHist([hsv],[<span class="number">0</span>,<span class="number">1</span>],<span class="literal">None</span>,[<span class="number">180</span>,<span class="number">256</span>],[<span class="number">0</span>,<span class="number">180</span>,<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#归一化：原始图像，结果图像，映射到结果图像中的最小最大值，归一化类型</span></span><br><span class="line"><span class="comment">#cv2.NORM_MINMAX 对数组所有值进行转化，使它们线性映射到最小值和最大值之间</span></span><br><span class="line"><span class="comment">#归一化后的直方图便于显示，成为0到255之间的数。</span></span><br><span class="line">cv2.normalize(hsvhist,hsvhist,<span class="number">0</span>,<span class="number">255</span>,cv2.NORM_MINMAX);</span><br><span class="line">dst=cv2.calcBackProject([hsvt],[<span class="number">0</span>,<span class="number">1</span>],hsvhist,[<span class="number">0</span>,<span class="number">180</span>,<span class="number">0</span>,<span class="number">256</span>],<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处卷积把分散的点连在一起</span></span><br><span class="line">disc=cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">dst=cv2.filter2D(dst,<span class="number">-1</span>,disc)</span><br><span class="line"></span><br><span class="line">ret,thresh=cv2.threshold(dst,<span class="number">50</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">thresh=cv2.merge((thresh,thresh,thresh))</span><br><span class="line"><span class="comment">#裁剪</span></span><br><span class="line">res=cv2.bitwise_and(inputImg,thresh)</span><br><span class="line"></span><br><span class="line">res=np.hstack((inputImg,thresh,res))</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,res)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>&emsp;&emsp;傅里叶变换用于分析不同滤波器的频率特性，我们可以使用2D离散傅里叶变换（DFT）分析图像的频域特性。实现DFT的快速算法被称为快速傅里叶变化（FFT）。<br>&emsp;&emsp;对于一个正弦信号，频率为f，如果把它转到频域表示，会在频率f中看到一个峰值，如果信号由采样产生的离散信号组成，会得到类似的频谱图，只不过前面是连续的，现在是离散的。把图像想象成沿两个方向采集的信号。所以对图像同时进行X方向和Y方向的傅里叶变换，就会得到这幅图像的频域表示（频谱图）。</p><ol><li>Numpy中的傅里叶变换<br>&emsp;&emsp;np.fft.fft2()可对信号进行频率转换，输出结果是一个复杂的数组。第一个参数是输入图像(要求灰度图)，第二个参数可选，决定输出数组的大小。默认输出数组大小和输入图像的数组大小一样，如果输出结果比输入图像大，输入图像在进行FFT前补0，如果输出结果比输入图像小，输入图像就会被切割。<br>&emsp;&emsp;np.fft.fft2()的结果，频率为0的部分(直流分量)在输出图像的左上角，如果想让它在输出图像的中心，需将结果沿两个方向平移N/2,函数np.fft.fftshift()可以实现这一步。<br>&emsp;&emsp;进行完频率变换后，就可以构建振幅谱了。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">f=np.fft.fft2(img)</span><br><span class="line">fshift=np.fft.fftshift(f)</span><br><span class="line"></span><br><span class="line">magnitude_spectrum=<span class="number">20</span>*np.log(np.abs(fshift))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Input Image'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(magnitude_spectrum,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Magnitude Spectrum'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>现在进行频域变换，我们可以在频域对图像进行一些操作。<br>例如高通滤波和重建图像（DFT的逆变换）。<br>比如使用一个60x60的矩形窗口对图像进行掩模操作从而去除低频分量。然后在使用函数np.fft.ifftshift()进行逆平移操作，所以直流分量又回到左上角了，然后使用np.ifft2()进行FFT逆变换，同样得到一堆复杂的数字，对他们取绝对值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#高通滤波</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"1.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">f=np.fft.fft2(img)</span><br><span class="line">fshift=np.fft.fftshift(f)</span><br><span class="line">magnitude_spectrum=<span class="number">20</span>*np.log(np.abs(fshift))</span><br><span class="line"></span><br><span class="line">rows,cols=img.shape</span><br><span class="line">crow,ccol=rows/<span class="number">2</span>,cols/<span class="number">2</span></span><br><span class="line">fshift[int(crow<span class="number">-30</span>):int(crow+<span class="number">30</span>),int(ccol<span class="number">-30</span>):int(ccol+<span class="number">30</span>)]=<span class="number">0</span></span><br><span class="line">f_ishift=np.fft.ifftshift(fshift)</span><br><span class="line">img_back=np.fft.ifft2(f_ishift)</span><br><span class="line"></span><br><span class="line">img_back=np.abs(img_back)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Input Image'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">132</span>),plt.imshow(img_back,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Image after HPF'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">133</span>),plt.imshow(img_back)</span><br><span class="line">plt.title(<span class="string">'Result in JET'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>上面的高通滤波其实是一种边界检测操作。<br>&emsp;&emsp;图像的大部分数据集中在频谱图的低频区域。</p><ol start="2"><li>OpenCV中的傅里叶变换<br>&emsp;&emsp;OpenCV相应的函数为cv2.dft()和cv2.idft,和前面的输出结果一样，但是是双通道的。第一个通道是结果的实数部分，第二个通道是结果的虚数部分。输入图像首先转换成np.float32格式。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dft=cv2.dft(np.float32(img),flags=cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift=np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">magnitude_spectrum=<span class="number">20</span>*np.log(cv2.magnitude(dft_shift[:,:,<span class="number">0</span>],dft_shift[:,:,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Input Image'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(magnitude_spectrum,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'magnitude_spectrum'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>前面我们实现了一个HPF高通滤波，现在我们来做LPF(低通滤波)将高频部分出去除。其实就是对图像进行模糊操作。首先我们需要构建一个掩模，与低频区域对应的地方设置为1，与高频区域对应的地方设置为0.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#低通滤波  (图形模糊化)</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dft=cv2.dft(np.float32(img),flags=cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift=np.fft.fftshift(dft)</span><br><span class="line"></span><br><span class="line">magnitude_spectrum=<span class="number">20</span>*np.log(cv2.magnitude(dft_shift[:,:,<span class="number">0</span>],dft_shift[:,:,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">rows,cols=img.shape</span><br><span class="line">crow,ccol=rows/<span class="number">2</span>,cols/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">mask=np.zeros((rows,cols,<span class="number">2</span>),np.uint8)</span><br><span class="line">mask[int(crow<span class="number">-30</span>):int(crow+<span class="number">30</span>),int(ccol<span class="number">-30</span>):int(ccol+<span class="number">30</span>)]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">fshift=dft_shift*mask</span><br><span class="line">f_ishift=np.fft.ifftshift(fshift)</span><br><span class="line">img_back=cv2.idft(f_ishift)</span><br><span class="line">img_back=cv2.magnitude(img_back[:,:,<span class="number">0</span>],img_back[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Input Image'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(img_back,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'img_back'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>OpenCV中的函数cv2.dft()cv2.idft()比Numpy快，但Numpy函数使用更加用户友好。</p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>模式匹配是用来在一幅大图中搜寻模板图像位置的方法。<br>和2D卷积一样，它也是利用模板图像在输入图像(大图)上滑动，并在每一个位置对模板图像和与其对应的输入图像的子区域进行比较。返回结果是一个灰度图像，每一个像素值代表此区域与模板的匹配程度。<br>OpenCV提供了函数cv2.matchTemplate()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">img2=img.copy()</span><br><span class="line">template=cv2.imread(<span class="string">"psbPart.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">w,h=template.shape[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">methods=[<span class="string">'cv2.TM_CCOEFF'</span>,<span class="string">'cv2.TM_CCOEFF_NORMED'</span>,<span class="string">'cv2.TM_CCORR'</span>,<span class="string">'cv2.TM_CCORR_NORMED'</span>,<span class="string">'cv2.TM_SQDIFF'</span>,<span class="string">'cv2.TM_SQDIFF_NORMED'</span>]</span><br><span class="line"><span class="keyword">for</span> meth <span class="keyword">in</span> methods:</span><br><span class="line">img=img2.copy()</span><br><span class="line">method=eval(meth)<span class="comment">#eval运算储存在字符串里有效的python表达式</span></span><br><span class="line">res=cv2.matchTemplate(img,template,method)</span><br><span class="line">min_val,max_val,min_loc,max_loc=cv2.minMaxLoc(res)</span><br><span class="line"><span class="comment">#使用不同的比较方法，对结果的解释不同</span></span><br><span class="line"><span class="keyword">if</span> method <span class="keyword">in</span>[cv2.TM_SQDIFF,cv2.TM_SQDIFF_NORMED]:</span><br><span class="line">top_left=min_loc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">top_left=max_loc</span><br><span class="line">bottom_right=(top_left[<span class="number">0</span>]+w,top_left[<span class="number">1</span>]+h)</span><br><span class="line"></span><br><span class="line">cv2.rectangle(img,top_left,bottom_right,<span class="number">255</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(res,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Matching Result'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Detected Point'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.suptitle(meth)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><h2 id="多对象的模式匹配"><a href="#多对象的模式匹配" class="headerlink" title="多对象的模式匹配"></a>多对象的模式匹配</h2><p>之前在大图中模版图片只出现了一次，如果模板图片出现了很多次，函数cv2.minMaxLoc()只会给出最大最小值，此时就需要使用阈值了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img_rgb=cv2.imread(<span class="string">"psbmul.jpg"</span>)</span><br><span class="line">img_gray=cv2.cvtColor(img_rgb,cv2.COLOR_BGR2GRAY)</span><br><span class="line">template=cv2.imread(<span class="string">'psbPart.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">w,h=template.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">res=cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)</span><br><span class="line">threshold=<span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">loc=np.where(res&gt;=threshold)</span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> zip(*loc[::<span class="number">-1</span>]):</span><br><span class="line">cv2.rectangle(img_rgb,pt,(pt[<span class="number">0</span>]+w,pt[<span class="number">1</span>]+h),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,img_rgb)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="Hough霍夫直线变换"><a href="#Hough霍夫直线变换" class="headerlink" title="Hough霍夫直线变换"></a>Hough霍夫直线变换</h2><p>&emsp;&emsp;霍夫变换在检测各种形状的技术中非常流行，如果待检测的形状可以用数学表达式写出来，就可以使用霍夫变换检测它，即使要检测的形状存在一点破坏或者扭曲也可以使用。<br>&emsp;&emsp;下面以使用霍夫变换检测直线为例子说明<br>&emsp;&emsp;一条直线的数学表达式y=mx+c或者r=xcosO+YsinO表示，r表示原点到直线的垂直距离，O是直线的垂线与横轴顺时针方向的夹角。<br>cv2.HoughLines()返回值就是(r,O),r的单位是像素，O的单位是弧度。</p><ul><li>第一个参数：二值化图像(所以霍夫变换之前需要二值化或Canny边缘检测)</li><li>第二，第三个参数：分别代表r和O的精确度。</li><li>第四个参数：阈值，只有累加其中的值高于阈值时才被认为是一条直线。也可看成是能检测到的直线的最短长度(以像素点为单位)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>)</span><br><span class="line">gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">edges=cv2.Canny(gray,<span class="number">50</span>,<span class="number">150</span>,apertureSize=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">minLineLength=<span class="number">100</span></span><br><span class="line">maxLineGap=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">lines=cv2.HoughLinesP(edges,<span class="number">1</span>,np.pi/<span class="number">180</span>,<span class="number">100</span>,minLineLength,maxLineGap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x1,y1,x2,y2 <span class="keyword">in</span> lines[<span class="number">0</span>]:</span><br><span class="line">cv2.line(img,(x1,y1),(x2,y2),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">cv2.imshow(<span class="string">'edges'</span>,edges)</span><br><span class="line">cv2.imshow(<span class="string">'res'</span>,img)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hough霍夫圆环变换"><a href="#Hough霍夫圆环变换" class="headerlink" title="Hough霍夫圆环变换"></a>Hough霍夫圆环变换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">img=cv2.medianBlur(img,<span class="number">5</span>)</span><br><span class="line">cimg=cv2.cvtColor(img,cv2.COLOR_GRAY2BGR)</span><br><span class="line"></span><br><span class="line">circles=cv2.HoughCircles(img,cv2.HOUGH_GRADIENT,<span class="number">1</span>,<span class="number">20</span>,param1=<span class="number">50</span>,param2=<span class="number">30</span>,minRadius=<span class="number">0</span>,maxRadius=<span class="number">0</span>)</span><br><span class="line">circles=np.uint16(np.around(circles))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> circles[<span class="number">0</span>,:]:</span><br><span class="line">cv2.circle(cimg,(i[<span class="number">0</span>],i[<span class="number">1</span>]),i[<span class="number">2</span>],(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">cv2.circle(cimg,(i[<span class="number">0</span>],i[<span class="number">1</span>]),<span class="number">2</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">cv2.imshow(<span class="string">'detected circles'</span>,cimg)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="分水岭算法图像分割"><a href="#分水岭算法图像分割" class="headerlink" title="分水岭算法图像分割"></a>分水岭算法图像分割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"code.jpg"</span>)</span><br><span class="line">gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret,thresh=cv2.threshold(gray,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)</span><br><span class="line"></span><br><span class="line"><span class="comment">#noise removal</span></span><br><span class="line">kernel=np.ones((<span class="number">3</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">opening=cv2.morphologyEx(thresh,cv2.MORPH_OPEN,kernel,iterations=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sure background area</span></span><br><span class="line">sure_bg=cv2.dilate(opening,kernel,iterations=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">dist_transform=cv2.distanceTransform(opening,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">ret,sure_fg=cv2.threshold(dist_transform,<span class="number">0.7</span>*dist_transform.max(),<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sure_fg=np.uint8(sure_fg)</span><br><span class="line">unknown=cv2.subtract(sure_bg,sure_fg)</span><br><span class="line"></span><br><span class="line">ret,markers1=cv2.connectedComponents(sure_fg)</span><br><span class="line">markers=markers1+<span class="number">1</span></span><br><span class="line">markers[unknown==<span class="number">255</span>]=<span class="number">0</span></span><br><span class="line">markers3=cv2.watershed(img,markers)</span><br><span class="line">img[markers3==<span class="number">-1</span>]=[<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">cv2.imshow(<span class="string">'res'</span>,img)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="用GrabCut算法进行交互式前景提取"><a href="#用GrabCut算法进行交互式前景提取" class="headerlink" title="用GrabCut算法进行交互式前景提取"></a>用GrabCut算法进行交互式前景提取</h2><h2 id="图像特征的提取与描述"><a href="#图像特征的提取与描述" class="headerlink" title="图像特征的提取与描述"></a>图像特征的提取与描述</h2><h2 id="Harris角点检测"><a href="#Harris角点检测" class="headerlink" title="Harris角点检测"></a>Harris角点检测</h2><p>特征检测器。</p><h2 id="Shi-Tomasi角点检测-适合跟踪的图像特征"><a href="#Shi-Tomasi角点检测-适合跟踪的图像特征" class="headerlink" title="Shi-Tomasi角点检测(适合跟踪的图像特征)"></a>Shi-Tomasi角点检测(适合跟踪的图像特征)</h2><p>特征检测器。</p><h2 id="尺度不变特征变换-SIFT"><a href="#尺度不变特征变换-SIFT" class="headerlink" title="尺度不变特征变换(SIFT)"></a>尺度不变特征变换(SIFT)</h2><p>使用SIFT算法进行关键点检测和描述。</p><h2 id="加速稳健特征算法-SURF"><a href="#加速稳健特征算法-SURF" class="headerlink" title="加速稳健特征算法(SURF)"></a>加速稳健特征算法(SURF)</h2><p>加速版的SIFT算法。</p><h2 id="FAST算法特征检测器"><a href="#FAST算法特征检测器" class="headerlink" title="FAST算法特征检测器"></a>FAST算法特征检测器</h2><h2 id="BRIEF特征点描述符"><a href="#BRIEF特征点描述符" class="headerlink" title="BRIEF特征点描述符"></a>BRIEF特征点描述符</h2><p>一种对特征点描述符计算和匹配的快速方法</p><h2 id="ORB算法"><a href="#ORB算法" class="headerlink" title="ORB算法"></a>ORB算法</h2><p>FAST关键点检测和BRIEF关键点描述符的结合体。</p><h2 id="Brute-Force特征匹配"><a href="#Brute-Force特征匹配" class="headerlink" title="Brute-Force特征匹配"></a>Brute-Force特征匹配</h2><h2 id="FLANN匹配器"><a href="#FLANN匹配器" class="headerlink" title="FLANN匹配器"></a>FLANN匹配器</h2><h2 id="使用特征匹配和单应性查找对象"><a href="#使用特征匹配和单应性查找对象" class="headerlink" title="使用特征匹配和单应性查找对象"></a>使用特征匹配和单应性查找对象</h2>]]></content>
      
      
      <categories>
          
          <category> OpenCV的Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV的Python实践(3)</title>
      <link href="/2019/05/18/OpenCvPythonPractice-3/"/>
      <url>/2019/05/18/OpenCvPythonPractice-3/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h2><a id="more"></a><p>&emsp;&emsp;图像梯度原理：简单来说就是求导。<br>&emsp;&emsp;OpenCV提供了三种不同的梯度滤波器，或者说高通滤波器：Sobel，Scharr和Laplacian。Sobel和Scharr是求一阶或二阶导数。Scharr是对Sobel（使用小的卷积核求解梯度角度时）的优化，Laplacian是求二阶导数。</p><ol><li>Sobel算子和Scharr算子<br>&emsp;&emsp;Sobel算子是高斯平滑与微分操作的结合体，它的抗噪音能力很好。可以设定求导的方向（xorder或yorder）。还可以设定使用的卷积核的大小（ksize），如果ksize=-1，会使用3x3的Scharr滤波器，效果会更好，若速度相同，在使用3x3滤波器时尽量使用Scharr。<br>&emsp;&emsp;3x3的Scharr滤波器卷积核如下：<ul><li>X方向</li></ul></li></ol><table><thead><tr><th style="text-align:center">-3</th><th style="text-align:center">0</th><th style="text-align:center">3</th></tr></thead><tbody><tr><td style="text-align:center">-10</td><td style="text-align:center">0</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">-3</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr></tbody></table><pre><code>+ Y方向</code></pre><table><thead><tr><th style="text-align:center">-3</th><th style="text-align:center">-10</th><th style="text-align:center">-3</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">10</td><td style="text-align:center">3</td></tr></tbody></table><p>2.Laplacian算子(拉普拉斯算子)<br>&emsp;&emsp;拉普拉斯算子可以使用二阶导数的形式定义，可假设其离散实现类似于二阶Sobel导数，事实上OpenCV在计算拉普拉斯算子时直接调用Sobel算子。<br>&emsp;&emsp;拉普拉斯滤波器使用的卷积核：<br><img src="tidu.jpg" alt="图"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#用以上三种滤波器对同一幅图像进行操作，卷积核使用为5x5。</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">laplacian = cv2.Laplacian(img,cv2.CV_64F)</span><br><span class="line">sobelx = cv2.Sobel(img,cv2.CV_64F,<span class="number">1</span>,<span class="number">0</span>,ksize=<span class="number">5</span>)</span><br><span class="line">sobely = cv2.Sobel(img,cv2.CV_64F,<span class="number">0</span>,<span class="number">1</span>,ksize=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'original'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),plt.imshow(laplacian,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'laplacian'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>),plt.imshow(sobelx,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Sobel X'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>),plt.imshow(sobely,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'Sobel Y'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>当我们可以通过参数-1来设定输出图像的深度（数据类型）与原图像保持一致，但是我们在代码中使用的却是cv2.CV_64F。这是为什么？想象一下一个从黑到白的边界的导数是正数，而一个从白到黑的边界的导数却是负数。如果原图像的深度是np.int8时，所有的负值都会被截断变成0。换句话就是把边界丢失掉。<br>所以如果这两种边界你都想检测到，最好的办法就是将输出的数据类型设置的更高，比如cv2.CV_16S等，取绝对值然后再把它转回到cv2.CV_8U。</p><h2 id="Canny边缘检测原理"><a href="#Canny边缘检测原理" class="headerlink" title="Canny边缘检测原理"></a>Canny边缘检测原理</h2><ol><li>噪音去除<br>&emsp;&emsp;由于边缘检测很容易受到噪音影响，所以第一步是使用5x5的高斯滤波器去除噪音。</li><li>计算图像梯度<br>&emsp;&emsp;对平滑后的图像使用Sobel算子计算水平方向和竖直方向的一阶导数（图像梯度）（Gx和Gy）。根据得到的这两幅梯度图找到边界的梯度和方向。公式如下：<br><img src="bianyuan1.jpg" alt="图"><br>&emsp;&emsp;梯度的方向一般总是与边界垂直。梯度方向被归为四类：垂直，水平，和两条对角线。</li><li>非极大值抑制<br>&emsp;&emsp;在获得梯度的方向和大小之后，应该对整幅图想做一个扫描，出去那些非边界上的点。对每一个像素进行检查，看这个点的梯度是不是周围具有相同梯度方向的点中最大的。<br><img src="bianyuan2.jpg" alt="图"><br>&emsp;&emsp;现在你得到的是一个包含“窄边界”的二值图像。</li><li>滞后阀值<br>&emsp;&emsp;现在要确定那些边界才是真正的边界，需要设置两个阀值：minVal和maxVal。当图像的灰度梯度高于maxVal时被认为是真的边界，那些低于minVal的边界会被抛弃。如果介于两者之间的话，就要看这个点是否与某个被确定为真正边界点相连，如果是，就认为它也是边界点，如果不是就抛弃。<h2 id="OpenCV中的Canny边界检测"><a href="#OpenCV中的Canny边界检测" class="headerlink" title="OpenCV中的Canny边界检测"></a>OpenCV中的Canny边界检测</h2>&emsp;&emsp;cv2.Canny()第一个参数是输入图像，第二和第三个分别是minVal和maxVal。第三个参数设置用来计算图像梯度的Sobel卷积核的大小，默认值为3。最后一个参数是L2gradient，它可以用来设定求梯度大小的方程。如果设为True，就使用我们上面提到过的方程，否则使用方程<br><img src="bianyuan3.jpg" alt="图">代替，默认为False<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">edges = cv2.Canny(img,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'original'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(edges,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'edge'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><h2 id="图像金字塔原理"><a href="#图像金字塔原理" class="headerlink" title="图像金字塔原理"></a>图像金字塔原理</h2><p>&emsp;&emsp;一般情况下，我们要处理是一副具有固定分辨率的图像。但是特别情况下我们需要对同一个图像的不同分辨率的子图像进行处理，如查找图像中的某个目标，如人脸，我们不知道目标在图像中的尺寸大小。这种情况下，我们需要创建一组图像，这些图像是具有不同分辨率的原始图像。我们把这组图像叫做图像金字塔。就是同一图像的不同分辨率的子图集合。我们把最大的图像放在底部，最小的放在顶部，看起来就像一座金字塔。有两类：高斯金字塔和拉普拉斯金字塔。</p><h2 id="高斯金字塔"><a href="#高斯金字塔" class="headerlink" title="高斯金字塔"></a>高斯金字塔</h2><p>&emsp;&emsp;高斯金字塔的顶部是通过将底部图像中的连续的行和列去除得到的。顶部图像中的每个像素值等于下一层图像中5个像素的高斯加权平均值。这样操作一次一个MxN的图像就变成了一个M/2xN/2的图像。所以这幅图像的面积就变为原来图像面积的四分之一。这被称为Octave。连续这样的操作，我们就会得到一个分辨率不断下降的图像金字塔。可以使用函数cv2.pyrDown()和cv2.pyrUp()构建图像金字塔。<br>&emsp;&emsp;cv2.pyrDown从一个高分辨率大尺寸的图像向上构建一个金字塔（尺寸变小，分辨率降低）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">lower_reso = cv2.pyrDown(img)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'lower_reso'</span>,lower_reso)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;cv2.pyrUp从一个低分辨率小尺寸的图像向上构建一个金字塔（尺寸变大，但分辨率不会增加）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">lower_reso = cv2.pyrDown(img)</span><br><span class="line">higher_reso2 = cv2.pyrUp(img)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'lower_reso'</span>,lower_reso)</span><br><span class="line">    cv2.imshow(<span class="string">'higher_reso2'</span>,higher_reso2)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><p>higher_reso2和higher_reso是不同的。因为一旦使用cv2.pyrDown图像的分辨率就会降低，信息就会被丢失。</p><h2 id="拉普拉斯金字塔"><a href="#拉普拉斯金字塔" class="headerlink" title="拉普拉斯金字塔"></a>拉普拉斯金字塔</h2><p>拉普拉斯金字塔可以由高斯金字塔计算得来。公式如下：<br><img src="jinzita1.jpg" alt="图"><br>拉普拉斯金字塔的图像看起来就像是边界图，其中很多像素都是0，常被用在图像压缩中。</p><h2 id="使用金字塔进行图像融合"><a href="#使用金字塔进行图像融合" class="headerlink" title="使用金字塔进行图像融合"></a>使用金字塔进行图像融合</h2><p>&emsp;&emsp;在图像缝合中，由于连接区域图像像素的不连续，整幅图看起来会很差，金字塔就可以实现无缝连接。<br>实现步骤：</p><ul><li>读入两幅图</li><li>构建各自的高斯金字塔(6层)</li><li>根据高斯金字塔计算拉普拉斯金字塔</li><li>在拉普拉斯的每一层进行图像融合</li><li>根据融合后的图像金字塔重建原始图像<br>&emsp;&emsp;重建原始图像过程：<br><img src="jinzita2.jpg" alt="图"><h2 id="什么是轮廓"><a href="#什么是轮廓" class="headerlink" title="什么是轮廓"></a>什么是轮廓</h2>&emsp;&emsp;轮廓可以简单认为成连续的点（连着边界）连在一起的曲线，具有相同的颜色或者灰度。轮廓在形状分析和物体的检测和识别中很有用。</li><li>为了准确，要使用二值化图像。需要进行阀值化处理或者Canny边界检测。</li><li>查找轮廓的函数会修改原始图像。如果之后想继续使用原始图像，应该将原始图像储存到其他变量中。</li><li>OpenCV中，查找轮廓就像在黑色背景中超白色物体。你应该记住，要找的物体应该是白色而背景应该是黑色。</li><li>在二值图像中查找轮廓使用函数cv2.findContours(),有三个参数，第一个是输入图像，第二个是轮廓检索模式，第三个是轮廓近似方法。返回值有三个，第一个是图像，第二个是轮廓，第三个是（轮廓的）层析结构。轮廓（第二个返回值）是一个Python列表，其中储存这图像中所有轮廓。每一个轮廓都是一个Numpy数组，包含对象边界点（x，y）的坐标。<h2 id="绘制轮廓"><a href="#绘制轮廓" class="headerlink" title="绘制轮廓"></a>绘制轮廓</h2>&emsp;&emsp;函数cv2.drawContours()可以被用来绘制轮廓。它可以根据你提供的边界点绘制任何形状。它的第一个参数是原始图像，第二个参数是轮廓，一个python列表，第三个参数是轮廓的索引（在绘制独立轮廓是很有用，当设置为-1时绘制所有轮廓）。接下来的参数是轮廓的颜色和厚度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">imgray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret,thresh = cv2.threshold(imgray,<span class="number">127</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment">#绘制独立轮廓，如第四个轮廓</span></span><br><span class="line">imag = cv2.drawContours(img,contours,<span class="number">-1</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">3</span>)</span><br><span class="line"><span class="comment">#但是大多数时候，下面方法更有用</span></span><br><span class="line"><span class="comment">#imag = cv2.drawContours(img,contours,3,(0,255,0),3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'imgray'</span>,imgray)</span><br><span class="line">    cv2.imshow(<span class="string">'imag'</span>,imag)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul><h2 id="轮廓的近似方法"><a href="#轮廓的近似方法" class="headerlink" title="轮廓的近似方法"></a>轮廓的近似方法</h2><p>&emsp;&emsp;之前提到轮廓是一个形状具有相同灰度值的边界，它会存储形状边界上所有的（x,y）坐标。实际上我们不需要所有的点，当需要直线时，找到两个端点即可。cv2.CHAIN_APPROX_SIMPLE可以实现。它会将轮廓上的冗余点去掉，压缩轮廓，从而节省内存开支。<br>&emsp;&emsp;下面用矩阵来演示，在轮廓列表中的每一个坐标上画一个蓝色圆圈。第一个显示使用cv2.CHAIN_APPROX_NONE的效果，一共734个点，第二个图是使用cv2.CHAIN_APPROX_SIMPLE的结果，只有4个点。<br><img src="lunkuo1.jpg" alt="图"></p><h2 id="轮廓特征"><a href="#轮廓特征" class="headerlink" title="轮廓特征"></a>轮廓特征</h2><ol><li><p>矩<br>&emsp;&emsp;图像的矩可以帮助我们计算图像的质心，面积等。<br>&emsp;&emsp;函数cv2.moments()会将计算得到的矩以一个字典的形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">ret,thresh = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,<span class="number">0</span>)</span><br><span class="line">contours,hierarchy=cv2.findContours(thresh,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">cnt=contours[<span class="number">0</span>]</span><br><span class="line">M=cv2.moments(cnt)</span><br><span class="line">print(M)</span><br><span class="line"><span class="comment">#根据这些矩的值，我们可以计算出对象的重心</span></span><br><span class="line">cx=int(M[<span class="string">'m10'</span>]/M[<span class="string">'m00'</span>])</span><br><span class="line">cy=int(M[<span class="string">'m01'</span>]/M[<span class="string">'m00'</span>])</span><br></pre></td></tr></table></figure></li><li><p>轮廓面积<br>&emsp;&emsp;可以使用函数cv2.contourArea()计算得到，也可以用矩（0阶矩），M[‘m00’]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">area=cv2.contourArea(cnt)</span><br></pre></td></tr></table></figure></li><li><p>轮廓周长<br>&emsp;&emsp;也被称为弧长。可以使用函数cv2.arcLength()计算得到。这个函数的第二参数可以用来指定对象的形状是闭合的（True），还是打开的（一条曲线）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perimeter = cv2.arcLength(cnt,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>轮廓近似<br>&emsp;&emsp;将轮廓形状近似到另外一种由更少点组成的轮廓形状，新轮廓的点的数目由我们设定的准确度来决定，使用的Douglas-Peucker算法，可以自己Google。假设我们要在一幅图像中查找一个矩形，但是由于图像的种种原因我们不能得到一个完美的矩形，而是一个“坏形状”，现在就可以使用这个函数来近似这个形状，第二个参数是epsilon，它是从原始轮廓到近似轮廓的最大距离，它是一个准确度参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">epsilon=<span class="number">0.1</span>*cv2.arcLength(cnt,<span class="literal">True</span>)</span><br><span class="line">approx = cv2.approxPolyDP(cnt,epsilon,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>凸包<br>&emsp;&emsp;凸包与轮廓近似相似，但不同，虽然有些情况下它们给出的结果是一样的。函数cv2.convexHull()可以用来检测一个曲线是否具有凸性缺陷，并能纠正缺陷。一般来说，凸性曲线总是凸出来的，至少是平的。如果有地方凹进去了就被叫做凸性缺陷。例如下图中的手，红色曲线显示了手的凸包，凸性缺陷被双箭头标出来了。<br><img src="lunkuo2.jpg" alt="图"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hull = cv2.convexHull(points,hull,clockwise,returnPoints)</span><br><span class="line"><span class="comment">#points 我们要传入的轮廓</span></span><br><span class="line"><span class="comment">#hull 输出，通常不需要</span></span><br><span class="line"><span class="comment">#clockwise 方向标志，如果设置为True，输出的凸包是顺时针方向的，否则为逆时针方向。</span></span><br><span class="line"><span class="comment">#returnPoints默认值为True。它会返回凸包上点的坐标，如果设置为False，就会返回与凸包点对应的轮廓上的点。</span></span><br><span class="line">要获得上图的凸包，可以用下面命令：</span><br><span class="line">hull=cv2.convexHull(cnt)</span><br></pre></td></tr></table></figure></li></ol><p>但是如果你想获得凸性缺陷，需要把returnPoints设置为False。以上面矩形为例，首先我们找到他的轮廓从cnt。现在把returnPoints设置为True查找凸包，得到的就是矩形的四个角点。把returnPoints设置为False，得到的是轮廓点的索引。</p><ol start="6"><li><p>凸性检测<br>&emsp;&emsp;函数cv2.isContourConvex()可以检测一个曲线是不是凸的。它只能返回True或者False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k=cv2.isContourConvex(cnt)</span><br></pre></td></tr></table></figure></li><li><p>边界矩形<br>&emsp;&emsp;直边界矩形，一个直矩形，没有旋转。不会考虑对象是否旋转。所以边界矩形的面积不是最小的。可以使用函数cv2.boundingRect()查找得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（x,y）为矩形左上角的坐标，（w,h）是矩形的宽和高</span></span><br><span class="line">x,y,w,h=cv2.boundingRect(cnt)</span><br><span class="line">img=cv2.rectangle(img,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><p>旋转的边界矩形，这个边界矩形是面积最小的，因为它考虑了对象的旋转。用函数cv2.minAreaRect()。返回的是一个Box2D结构，其中包含矩形最上角角点坐标（x，y）矩形的宽和高（w,h）以及旋转角度。但是要绘制这个矩形需要矩形的4个角点，可以通过函数cv2.boxPoints()获得。<br>其中绿色的为直矩形，红色为旋转矩形。<br><img src="lunkuo3.jpg" alt="图"></p><ol start="8"><li>最小外接圆<br>&emsp;&emsp;函数cv2.minEnclosingCircle()可以帮我们找到一个对象的外接圆。它是所有能够包括对象的圆中面积最小的一个。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(x,y),radius = cv2.minEnclosingCircle(cnt)</span><br><span class="line">center = (int(x),int(y))</span><br><span class="line">radius = int(radius)</span><br><span class="line">img = cv2.circle(img,center,radius,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><p><img src="lunkuo4.jpg" alt="图"></p><ol start="9"><li>椭圆拟合<br>&emsp;&emsp;使用函数cv2.ellipse()，返回值其实就是旋转边界矩形的内切圆。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ellipse = cv2.fitEllipse(cnt)</span><br><span class="line">img = cv2.ellipse(img,ellipse,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><p><img src="lunkuo5.jpg" alt="图"></p><ol start="10"><li>直线拟合<br>&emsp;&emsp;可以根据一组点拟合出一条直线，同样我们也可以为图像中的白色点拟合出一条直线。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rows,cols = img.shape[:<span class="number">2</span>]</span><br><span class="line">[vx,vy,x,y]=cv2.fitLine(cnt,cv2.DIST_L2,<span class="number">0</span>,<span class="number">0.01</span>,<span class="number">0.01</span>)</span><br><span class="line">lefty=int((x*vy/vx)+y)</span><br><span class="line">righty=int(((cols-x)*vy/vx)+y)</span><br><span class="line">img = cv2.line(img,(cols<span class="number">-1</span>,righty),(<span class="number">0</span>,lefty),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><p><img src="lunkuo6.jpg" alt="图"></p><h2 id="轮廓的性质"><a href="#轮廓的性质" class="headerlink" title="轮廓的性质"></a>轮廓的性质</h2><ol><li><p>长宽比<br>边界矩形的宽高比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x,y,w,h=cv2.boundingRect(cnt)</span><br><span class="line">aspect_ratio = float(w)/h</span><br></pre></td></tr></table></figure></li><li><p>Extent<br>轮廓面积与边界矩形面积的比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">area=cv2.contourArea(cnt)</span><br><span class="line">x,y,w,h=cv2.boundingRect(cnt)</span><br><span class="line">rect_area=w*h</span><br><span class="line">extent=float(area)/rect_area</span><br></pre></td></tr></table></figure></li><li><p>Solidity<br>轮廓面积与凸包面积的比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">area=cv2.contourArea(cnt)</span><br><span class="line">hull=cv2.convexHull(cnt)</span><br><span class="line">hull_area=cv2.contourArea(hull)</span><br><span class="line">solidity=float(area)/hull_area</span><br></pre></td></tr></table></figure></li><li><p>与轮廓面积相等的圆形的直径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">area=cv2.contourArea(cnt)</span><br><span class="line">equi_diameter=np.sqrt(<span class="number">4</span>*area/np.pi)</span><br></pre></td></tr></table></figure></li><li><p>方向<br>对象的方向，下面的方法还会返回长轴和短轴的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x,y),(MA,ma),angle=cv2.fitEllipse(cnt)</span><br></pre></td></tr></table></figure></li><li><p>掩模和像素点<br>有时我们需要构成对象的所有像素点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mask=np.zeros(imgray.shate,np.uint8)</span><br><span class="line"><span class="comment">#这里一定要使用参数-1，绘制填充的轮廓</span></span><br><span class="line">cv2.drawContours(mask,[cnt],<span class="number">0</span>,<span class="number">255</span>,<span class="number">-1</span>)</span><br><span class="line">pixelpoints=np.transpose(np.nonzero(mask))</span><br></pre></td></tr></table></figure></li><li><p>最大值和最小值及它们的位置<br>可以使用掩模图像得到这些参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min_val,max_val,min_loc,max_loc=cv2.minMaxLoc(imgray,mask=mask)</span><br></pre></td></tr></table></figure></li><li><p>平均颜色及平均灰度<br>同样使用相同的掩模来求得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean_val=cv2.mean(im,mask=mask)</span><br></pre></td></tr></table></figure></li></ol><p>9.极点<br>一个对象最上，最下，最左，和最右的点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leftmost=tuple(cnt[cnt[:,:,<span class="number">0</span>].argmin()[<span class="number">0</span>])</span><br><span class="line">rightmost=tuple(cnt[cnt[:,:,<span class="number">0</span>].argmax()[<span class="number">0</span>])</span><br><span class="line">topmost=tuple(cnt[cnt[:,:,<span class="number">1</span>].argmin()[<span class="number">0</span>])</span><br><span class="line">bottommost=tuple(cnt[cnt[:,:,<span class="number">1</span>].argmax()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><h2 id="轮廓：更多函数"><a href="#轮廓：更多函数" class="headerlink" title="轮廓：更多函数"></a>轮廓：更多函数</h2><ol><li>凸缺陷<br>找到凸缺陷<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hull=cv2.convexHull(cnt,returnPoints=<span class="literal">False</span>)</span><br><span class="line">defects=cv2.convexityDefects(cnt,hull)</span><br></pre></td></tr></table></figure></li></ol><p>它会返回一个数组，其中每一行包含的值是[起点，终点，最远的点，到最远点的近似距离]</p><ol start="2"><li>Point Polygon Test<br>求解图像中的一个点到一个对象轮廓的最短距离。如果点再轮廓的外部，返回值为负，如果在轮廓上，返回值为0，如果在轮廓内部，返回值为正。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist = cv2.pointPolygonTest(cnt,(<span class="number">50</span>,<span class="number">50</span>),<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><p>此函数的第三个参数是measureDist。如果设置为True，就会计算最短距离。如果是False，只会判断这个点与轮廓之间的位置关系（返回值为+1,-1,0）</p><ol start="3"><li>形状匹配<br>函数cv2.matchShape()可以帮我们比较两个形状或者轮廓的相似度，如果返回值越小，匹配越好，它是根据Hu矩来计算的。</li></ol><h2 id="轮廓的层次结构"><a href="#轮廓的层次结构" class="headerlink" title="轮廓的层次结构"></a>轮廓的层次结构</h2><ol><li>什么是层次结构<br>&emsp;&emsp;通常我们使用函数cv2.findContours 在图片中查找一个对象。有时对象可能位于不同的位置。还有些情况，一个形状在另外一个形状的内部，这种情况下我们称外部的形状为父，内部的形状为子。按照这种方式分类，一幅图像中的所有轮廓之间就建立父子关系。这样我们就可以确定一个轮廓与其他轮廓是怎样连接的，比如它是不是某个轮廓的子轮廓，或者是父轮廓。这种关系就成为组织结构。</li><li>opencv中层次结构<br>OpenCV使用一个含有四个元素的数组表示父子关系，【Next，Previous，First_Child，Parent】<br>Next表示同一级组织结构中的下一个轮廓。<br>Previous 示同一级结构中的前一个轮廓。<br>First_Child 示它的第一个子轮廓。<br>Parent 示它的父轮廓。</li><li>轮廓检索模式<br>RETR_LIST 从的度来看中应是简单的。它只是提取所有的轮廓而不去创建任何父子关系。换句就是‘’人人平等‘’它们属于同一级组织轮廓。<br>所以在种情况下组织结构数组的第三和第四个数是 -1。但是很明 显Next 和 Previous 有对应的值。<br>RETR_EXTERNAL 如果你择种模式的只会回外的的轮廓，所有的子轮廓会忽略掉。</li></ol><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><ol><li>直方图原理<br>&emsp;&emsp;直方图是一个简单的表，它给出了一幅图像或一组图像中拥有给定数值的像素数量。例如灰度图像的直方图有265个条目(或称为容器)。0号容器给出值为0的像素个数，1号容器给出值为1的像素个数，依次类推。显然对直方图的所有项求和会得到像素的总数。直方图也可以被归一化，归一化后的所有项之和等于1，在这种情况下，每一项给出的都是拥有特定数值的像素在图像中占的比例。<br>&emsp;&emsp;通过直方图可以对整幅图像的灰度分布有一个整体的了解。直方图的X轴是灰度值（0,255），Y轴是图片中具有同一个灰度值的点的数目。<br>&emsp;&emsp;通过直方图我们可以对图像的对比度，亮度，灰度分布等有一个直观的认识。相关术语：<ul><li>BINS:每个灰度值对应的像素数。如果像素值为0到255，就需要256个数来显示上面的直方图。</li><li>DIMS:收集数据的参数数目。</li><li>RANGE:要统计的灰度值范围，一般[0,256].</li></ul></li><li>函数cv2.calcHist可以统计一幅图像的直方图。<br>cv2.calcHist(images,channels,mask,histSize,range[,hist[,accumulate]])<ul><li>images:原图像(格式uint8或float32),传入函数时应用中括号括起来，如[img]</li><li>channels:传入函数时应用中括号括起来</li><li>mask:掩模图像</li><li>histSize:BIN的数目，应用中括号括起来，如[256]</li><li>ranges:像素范围，通常[0,256]</li></ul></li><li>以灰度格式加载一幅图像，并统计图像的直方图。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">hist=cv2.calcHist([img],[<span class="number">0</span>],<span class="literal">None</span>,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"><span class="comment">#参数中只有mask是没有中括号的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'hist'</span>,hist)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ol><p>hist是一个256x1的数组，每一个值代表与次灰度值对应的像素点数目。</p><ol start="4"><li>使用Numpy统计直方图<br>&emsp;&emsp;Numpy中的np.histogram()可以统计直方图。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">hist,bins=np.histogram(img.ravel(),<span class="number">256</span>,[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'bins'</span>,bins)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ol><h2 id="matplotlib读取图片显示颜色失真的问题"><a href="#matplotlib读取图片显示颜色失真的问题" class="headerlink" title="matplotlib读取图片显示颜色失真的问题"></a>matplotlib读取图片显示颜色失真的问题</h2><p>原因是matplotlib的多通道顺序是bgr，跟openCV中的rbg顺序不同。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"><span class="comment">#重新安排多通道顺序</span></span><br><span class="line">b,g,r = cv2.split(img)</span><br><span class="line">img2 = cv2.merge([r, g, b])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.imshow(img, cmap = <span class="string">'gray'</span>, interpolation = <span class="string">'bicubic'</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.imshow(img2, cmap = <span class="string">'gray'</span>, interpolation = <span class="string">'bicubic'</span>)</span><br><span class="line">plt.xticks([])</span><br><span class="line">plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><h2 id="绘制直方图"><a href="#绘制直方图" class="headerlink" title="绘制直方图"></a>绘制直方图</h2><ol><li>使用Matplotlib绘图函数。（简单方法）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">#plt.hist(img,ravel(),hitsizes,ranges,color=)</span></span><br><span class="line"><span class="comment">#img.ravel()将原图像的array数组转成一维的数组</span></span><br><span class="line"><span class="comment">#hitsizes 为直方图的灰度级数</span></span><br><span class="line"><span class="comment">#ranges为灰度范围[0,255]</span></span><br><span class="line"><span class="comment">#color是参数，需要使用color='r'来指定颜色</span></span><br><span class="line"></span><br><span class="line">plt.hist(img.ravel(),<span class="number">256</span>,[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;分别绘制查看各通道的直方图<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">color=(<span class="string">'b'</span>,<span class="string">'g'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="comment">#对列表或数组既要遍历索引又要遍历元素时</span></span><br><span class="line"><span class="comment">#使用内置enumerate更加直接优美</span></span><br><span class="line"><span class="comment">#enumerate会将数组或列表组成一个索引序列</span></span><br><span class="line"><span class="keyword">for</span> i,col <span class="keyword">in</span> enumerate(color):</span><br><span class="line">histr=cv2.calcHist([img],[i],<span class="literal">None</span>,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">plt.plot(histr,color=col)</span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><ol start="2"><li>使用掩模<br>&emsp;&emsp;要统计图像局部区域的直方图，需要构建一幅掩模图像。<br>&emsp;&emsp;将要统计的部分设置成白色，其余为黑色，就构成了掩模图像。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建掩模图像</span></span><br><span class="line">mask=np.zeros(img.shape[:<span class="number">2</span>],np.uint8)</span><br><span class="line">mask[<span class="number">100</span>:<span class="number">200</span>,<span class="number">100</span>:<span class="number">300</span>]=<span class="number">255</span></span><br><span class="line">masked_img=cv2.bitwise_and(img,img,mask=mask)</span><br><span class="line"></span><br><span class="line">hist_full=cv2.calcHist([img],[<span class="number">0</span>],<span class="literal">None</span>,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">hist_mask=cv2.calcHist([img],[<span class="number">0</span>],mask,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">221</span>),plt.imshow(img,<span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>),plt.imshow(mask,<span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>),plt.imshow(masked_img,<span class="string">'gray'</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>),plt.plot(hist_full),plt.plot(hist_mask)</span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><h2 id="OpenCV以灰度模式加载彩图"><a href="#OpenCV以灰度模式加载彩图" class="headerlink" title="OpenCV以灰度模式加载彩图"></a>OpenCV以灰度模式加载彩图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h2><p>&emsp;&emsp;如果图片整体很亮，那所有像素应该都会很高，但是一幅高质量的图像的像素值分布应该很广泛。所以偏亮的直方图(像素偏高)你应该把它的直方图做一个横向拉伸。这就是直方图均衡化，通常能改善图像的对比度。<br>&emsp;&emsp;偏亮的图的直方图大部分在灰度值较高的地方，我们希望直方图分布比较分散，能够涵盖整个x轴，所以需要一个变换函数能把现在的直方图映射到一个广泛分布的直方图中，这就是直方图均衡化需要做的事。<br>&emsp;&emsp;即使是偏暗的图片，经过均衡化之后也能得到相同的结果，直方图均衡化是使所有图片具备相同的亮度条件的参考工具，在很多情况，如脸部识别，训练分类器前，训练集的所有图片都要先进行直方图均衡化达到相同的亮度条件。</p><ol><li><p>OpenCV中的灰度图直方图均衡化<br>cv2.equalizeHist(img)，将要均衡化的原图像(要求是灰度图像)作为参数传入，则返回值即为均衡化后的图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">equ=cv2.equalizeHist(img)</span><br><span class="line"><span class="comment">#numpy拼接数组</span></span><br><span class="line"><span class="comment">#np.vstack():在竖直方向上堆叠</span></span><br><span class="line"><span class="comment">#np.hstack():在水平方向上平铺</span></span><br><span class="line">res=np.hstack((img,equ))</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,res)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li><li><p>OpenCV中的彩色图片直方图均衡化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hisEqulColor</span><span class="params">(img)</span>:</span></span><br><span class="line">    ycrcb = cv2.cvtColor(img, cv2.COLOR_BGR2YCR_CB)</span><br><span class="line">    channels = cv2.split(ycrcb)</span><br><span class="line">    print(str(len(channels)))</span><br><span class="line">    cv2.equalizeHist(channels[<span class="number">0</span>], channels[<span class="number">0</span>])</span><br><span class="line">    cv2.merge(channels, ycrcb)</span><br><span class="line">    cv2.cvtColor(ycrcb, cv2.COLOR_YCR_CB2BGR, img)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line">img0 = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数组的复制</span></span><br><span class="line">img=img0.copy()</span><br><span class="line">eq=hisEqulColor(img)</span><br><span class="line"><span class="comment">#numpy拼接数组</span></span><br><span class="line"><span class="comment">#np.vstack():在竖直方向上堆叠</span></span><br><span class="line"><span class="comment">#np.hstack():在水平方向上平铺</span></span><br><span class="line">res=np.hstack((img0,eq))</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,res)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li><li><p>有限对比适应性直方图均衡化<br>&emsp;&emsp;之前的直方图均衡化会改变整个图像的对比度，很多情况这样效果并不好(直方图均衡化改变对比度的原因是因为该图的直方图并不集中在某个区域)。<br>&emsp;&emsp;自适应的直方图均衡化，整幅图被分成很多个小块，称为tiles（OpenCV中tile大小默认8x8）,然后对每一个小块分别直方图均衡化。所以在每一个区域中，各自的直方图会集中在某一个小的区域内(除非噪声干扰)，如果有噪声的话，噪声会被放大，为避免这种情况，要使用对比度限制，对每个小块来说，如果直方图中的bins超过对比度上限的话，就把其中的像素点均匀分散到其他bins中，然后进行直方图均衡化。最后，为去除每一个小块之间人造的边界，再使用双线性差值，对小块进行缝合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#灰度图的自适应直方图均衡化</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img0 = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">clahe=cv2.createCLAHE(clipLimit=<span class="number">2.0</span>,tileGridSize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">cli=clahe.apply(img0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,cli)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ol><h2 id="2D直方图"><a href="#2D直方图" class="headerlink" title="2D直方图"></a>2D直方图</h2><p>&emsp;&emsp; 前面绘制了一维直方图，之所以称为一维，因为只考虑了图像的一个特征：灰度。但在2d直方图中我们要考虑两个图像特征，彩图直方图通常情况下我们需要考虑每个的颜色(Hue)和饱和度(Saturation)。根据这两个特征绘制2D直方图。</p><ol><li>OpenCV中的2D直方图<br>绘制彩色直方图，首先需要将图像的颜色空间从BGR转换到HSV.参数做如下修改<ul><li>channels=[0,1] 因为需要同时处理H和S两个通道</li><li>bins=[180,256] H通道为180，S通道为256</li><li>range=[0,180,0,256] H取值范围0-180，S取值范围0-256</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">hist=cv2.calcHist([hsv],[<span class="number">0</span>,<span class="number">1</span>],<span class="literal">None</span>,[<span class="number">180</span>,<span class="number">256</span>],[<span class="number">0</span>,<span class="number">180</span>,<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'hist'</span>,hist)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey() == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line">b,g,r = cv2.split(img)</span><br><span class="line">img2 = cv2.merge([r, g, b])</span><br><span class="line"></span><br><span class="line">hsv=cv2.cvtColor(img2,cv2.COLOR_BGR2HSV)</span><br><span class="line">hist=cv2.calcHist([hsv],[<span class="number">0</span>,<span class="number">1</span>],<span class="literal">None</span>,[<span class="number">180</span>,<span class="number">256</span>],[<span class="number">0</span>,<span class="number">180</span>,<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">plt.imshow(hist,interpolation=<span class="string">'nearest'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenCV的Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV的Python实践(2)</title>
      <link href="/2019/05/18/OpenCvPythonPractice-2/"/>
      <url>/2019/05/18/OpenCvPythonPractice-2/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="几何变换—扩展缩放"><a href="#几何变换—扩展缩放" class="headerlink" title="几何变换—扩展缩放"></a>几何变换—扩展缩放</h2><a id="more"></a><p>&emsp;&emsp;只是改变图像的尺寸大小，cv2.resize()可以实现这个功能。在缩放时推荐cv2.INTER_AREA，在拓展时推荐cv2.INTER_CUBIC（慢）和cv2.INTER_LINEAR。默认情况下所有改变图像尺寸大小的操作使用的是插值法都是cv2.INTER_LINEAR。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"><span class="comment">#下面的None本应该是输出图像的尺寸，但是因为后面设置了缩放因子，所以，这里为None</span></span><br><span class="line">res = cv2.resize(img,<span class="literal">None</span>,fx=<span class="number">2</span>,fy=<span class="number">2</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class="line"><span class="comment">#这里直接设置输出图像的尺寸，所以不用设置缩放因子</span></span><br><span class="line">height,width =img.shape[:<span class="number">2</span>]</span><br><span class="line">res = cv2.resize(img,(<span class="number">2</span>*width,<span class="number">2</span>*height),interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,res)</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,img)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)&amp;<span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="几何变换—平移"><a href="#几何变换—平移" class="headerlink" title="几何变换—平移"></a>几何变换—平移</h2><p>&emsp;&emsp;如果想要沿（x，y）方向移动，移动的距离为（t<sub>x</sub>,t<sub>y</sub>）可以以下面方式构建<strong>移动矩阵</strong>。<br><img src="移动矩阵.jpg" alt="图"><br>&emsp;&emsp;使用Numpy数组构建矩阵，数据类型是np.float32，然后传给函数cv2.warpAffine()<br>函数cv2.warpAffine() 的第三个参数的是输出图像的大小，它的格式<br>应该是图像的（宽，高）。应该记住的是图像的宽对应的是列数，高对应的是行数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#将图像平移到到点（200,100）处</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">img=cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">rows,cols=img.shape[:<span class="number">2</span>]</span><br><span class="line">M= np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">200</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>]])</span><br><span class="line">dst = cv2.warpAffine(img, M, (cols, rows))</span><br><span class="line">cv2.imshow(<span class="string">'img'</span>, dst)</span><br><span class="line">k = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> k == ord(<span class="string">'s'</span>):</span><br><span class="line">    cv2.imwrite(<span class="string">'show'</span>, dst)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="几何变换—旋转"><a href="#几何变换—旋转" class="headerlink" title="几何变换—旋转"></a>几何变换—旋转</h2><p>&emsp;&emsp;对一个图像旋转角度θ，需要使用下面的旋转矩阵。<br><img src="旋转矩阵0.jpg" alt="图"><br>&emsp;&emsp;但OpenCV允许在任意地方进行旋转，所以矩阵应该为：<br><img src="旋转矩阵1.jpg" alt="图"><br>&emsp;&emsp;为构建旋转矩阵，OpenCV提供了一个函数cv2.getRotationMatrix2D。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">rows,cols=img.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里的第一个参数为旋转中心，第二个为旋转角度，第三个为旋转后的缩放因子</span></span><br><span class="line"><span class="comment">#可以通过设置旋转中心，缩放因子以及窗口大小来防止旋转后超出边界的问题。</span></span><br><span class="line"></span><br><span class="line">M=cv2.getRotationMatrix2D((cols/<span class="number">2</span>,rows/<span class="number">2</span>),<span class="number">45</span>,<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三个参数是输出图像的尺寸中心</span></span><br><span class="line"></span><br><span class="line">dst=cv2.warpAffine(img,M,(<span class="number">1</span>*cols,<span class="number">1</span>*rows))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,dst)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)==<span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="几何变换—仿射变换"><a href="#几何变换—仿射变换" class="headerlink" title="几何变换—仿射变换"></a>几何变换—仿射变换</h2><p>&emsp;&emsp;仿射变换就是图像的线性变换加上平移，用一幅图表示，就是<br><img src="仿射变化0.jpg" alt="图"><br>&emsp;&emsp;由image1到image2经过了三个操作</p><ol><li>旋转(线性变化)</li><li>缩放(线性变化)</li><li>平移(向量加)<br>如果没有了第3个平移的操作，那它就是线性变换。<br>&emsp;&emsp;图像的变换要对图像的每一个像素点进行操作，假设其中的一个像素点的坐标是（x,y），我们用矩阵形式表示：<br><img src="仿射变化-dian.jpg" alt="图"><br>我们通常使用2x3矩阵来表示仿射变换:<br><img src="仿射变化-jz.jpg" alt="图"><br>经过仿射变换后的点的矩阵坐标是T，我们已经知道仿射变换就是线性变换加上平移，用矩阵表示的话就是:<br><img src="仿射变化-jz2.jpg" alt="图"><br>计算可得，点的坐标经过仿射变换后成为：<br><img src="仿射变化-jz3.jpg" alt="图"><br>&emsp;&emsp;观察之前平移，旋转的代码，其中的都有dst = cv2.warpAffine(img, M, (cols, rows))，之所以是平移，是旋转，只是其中的变化矩阵M不同。<br>&emsp;&emsp;在仿射变换中，原图中所有平行线在结果图像中同样平行。为创建这个矩阵，需要从原图像中找到三个点以及他们在输出图像中的位置，然后cv2.getAffineTransForm()会创建一个2X3的矩阵。最后这个矩阵会被传给函数cv2.warpAffine()。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">rows,cols,ch=img.shape[:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">pts1=np.float32([[<span class="number">0</span>,<span class="number">0</span>],[cols<span class="number">-1</span>,<span class="number">0</span>],[<span class="number">0</span>,rows<span class="number">-1</span>]])</span><br><span class="line">pts2=np.float32([[cols*<span class="number">0.2</span>,rows*<span class="number">0.1</span>],[cols*<span class="number">0.9</span>,rows*<span class="number">0.2</span>],[cols*<span class="number">0.1</span>,rows*<span class="number">0.9</span>]])</span><br><span class="line">M=cv2.getAffineTransform(pts1, pts2)</span><br><span class="line">dst=cv2.warpAffine(img, M, (cols, rows))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,dst)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)==<span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ol><h2 id="几何变换—透视变换"><a href="#几何变换—透视变换" class="headerlink" title="几何变换—透视变换"></a>几何变换—透视变换</h2><p>&emsp;&emsp;对于视角变换，我们需要一个3x3变换矩阵。在变换前后直线还是直线。需要在原图上找到4个点，以及他们在输出图上对应的位置，这四个点中任意三个都不能共线，可以有函数cv2.getPerspectiveTransform()构建，然后这个矩阵传给函数cv2.warpPerspective()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">rows,cols,ch=img.shape[:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">pts1 = np.float32([[<span class="number">56</span>,<span class="number">65</span>],[<span class="number">368</span>,<span class="number">52</span>],[<span class="number">28</span>,<span class="number">387</span>],[<span class="number">389</span>,<span class="number">390</span>]])</span><br><span class="line">pts2 = np.float32([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">300</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">300</span>],[<span class="number">300</span>,<span class="number">300</span>]])</span><br><span class="line"></span><br><span class="line">M=cv2.getPerspectiveTransform(pts1,pts2)</span><br><span class="line">dst=cv2.warpPerspective(img,M,(cols,rows))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'img'</span>,dst)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)==<span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><blockquote><p>旋转和平移都是仿射变换的特殊形式<br>OpenCV中提供warpAffine函数用来实现仿射变换,该函数要求提供用来进行仿射变换的矩阵（2x3），如果不知道该变换矩阵，可以结合两幅图像上三对对应点利用getAffineTransform函数求得仿射变换矩阵。<br>透视变换的本质是将图像投影到一个新的视平面。仿射变换可以理解为透视变换的特殊形式。<br>一幅图像就是一个像素坐标系下的各个带有像素值的坐标点，而透视变换可以理解为就是将一幅图像中的这些坐标点完成了一个坐标转换，将它们的坐标变换到了其他位置，从而实现了变换了图像视角的效果。<br>透视变换可以用透视变换矩阵完成，透视变换矩阵为3x3矩阵:<br><img src="透视变化矩阵.jpg" alt="图"><br>矩阵可以分块来看，T<sub>1</sub>表示图像线性变换（包括旋转和缩放）、T<sub>2</sub>表示图像平移，T<sub>3</sub>用于产生图像透视变换，a<sub>33</sub>一般为1。透视变换矩阵一般有8个未知数，给定透视变换对应的四对像素点坐标，即可求得透视变换矩阵；反之，给定透视变换矩阵，即可对图像或像素点坐标完成透视变换。<br>仿射变换需要三组点的对应关系，而透视变换需要四组点的对应关系，才可以分别求得仿射变换和透视变换的变换矩阵。</p></blockquote><h2 id="简单阀值"><a href="#简单阀值" class="headerlink" title="简单阀值"></a>简单阀值</h2><p>&emsp;&emsp;实现函数为cv2.threshold , cv2.adaptiveThreshold等<br>&emsp;&emsp;当像素值高于阀值时，我们给这个像素赋予一个新值（可能是白色），否则我们给它赋予另外一种颜色（也许是黑色）。这个函数就是cv2.threshold()。这个函数的第一个参数就是原图像，原图像应该是灰度图。第二个参数就是用来对像素值进行分类的阀值，第三个参数就是当像素值高于（或者小于）阀值时，应该被赋予新的像素值。OpenCV提供了多种不同的阀值方法，这是有第四个参数来决定的。方法包括</p><ul><li>cv2.THRESH_BINARY</li><li>cv2.THRESH_BINARY_INV</li><li>cv2.THRESH_TRUNC</li><li>cv2.THRESH_TOZERO</li><li>cv2.THRESH_TOZERO_INV<br><img src="简单阀值.jpg" alt="图"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb3.jpg'</span>)</span><br><span class="line">ret , thresh1 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line">ret , thresh2 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY_INV)</span><br><span class="line">ret , thresh3 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_TRUNC)</span><br><span class="line">ret , thresh4 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_TOZERO)</span><br><span class="line">ret , thresh5 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_TOZERO_INV)</span><br><span class="line"></span><br><span class="line">titles = [<span class="string">'original image'</span>,<span class="string">'Binary'</span>,<span class="string">'binary-inv'</span>,<span class="string">'trunc'</span>,<span class="string">'tozero'</span>,<span class="string">'tozero-inv'</span>]</span><br><span class="line">images = [img,thresh1,thresh2,thresh3,thresh4,thresh5]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">3</span>,i+<span class="number">1</span>),plt.imshow(images[i],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><h2 id="自适应阀值"><a href="#自适应阀值" class="headerlink" title="自适应阀值"></a>自适应阀值</h2><p>&emsp;&emsp;根据图像上的每一个小区域计算与其对应的阀值。因此在同一幅图像上的不同区域采用的是不同的阀值，从而使我们能在亮度不同的情况下得到更好的结果。<br>&emsp;&emsp;这种方法需要我们指定三个参数，返回值只有一个:</p><ul><li>Adaptive Method :指定计算阀值的方法<ul><li>cv2.ADAPTIVE_THRESH_MEAN_C:阀值取自相邻区域的平均值</li><li>cv2.ADAPTIVE_THRESH_GAUSSIAN_C:阀值取自相邻区域的加权和，权重为一个高斯窗口</li></ul></li><li>Block Size :邻域大小（用来计算阀值的区域大小）</li><li>C :这就是一个常数，阀值就等于的平均值或者加权平均值减去这个常数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb3.jpg'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">#中值滤波</span></span><br><span class="line">img = cv2.medianBlur(img,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">ret , th1 = cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment"># 11为block size，2为C值</span></span><br><span class="line">th2 = cv2.adaptiveThreshold(img,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_MEAN_C , cv2.THRESH_BINARY,<span class="number">11</span>,<span class="number">2</span> )</span><br><span class="line">th3 = cv2.adaptiveThreshold(img,<span class="number">255</span>,cv2.ADAPTIVE_THRESH_GAUSSIAN_C , cv2.THRESH_BINARY,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">titles = [<span class="string">'original image'</span> , <span class="string">'global thresholding (v=127)'</span>,<span class="string">'Adaptive mean thresholding'</span>,</span><br><span class="line">          <span class="string">'adaptive gaussian thresholding'</span>]</span><br><span class="line">images = [img,th1,th2,th3]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">2</span>,i+<span class="number">1</span>),plt.imshow(images[i],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Otsu’s二值化"><a href="#Otsu’s二值化" class="headerlink" title="Otsu’s二值化"></a>Otsu’s二值化</h2><p>&emsp;&emsp;在使用全局阈值时，随便给了一个数来做阈值，那怎么知道选取的这个数的好坏呢？答案就是不停的尝试。如果是一副双峰图像（简单来说双峰图像是指图像直方图中存在两个峰）呢？我们岂不是应该在两个峰 之间的峰谷选一个值作为阈值？这就是Otsu二值化要做的。简单来说就是对一副双峰图像自动根据其直方图计算出一个阈值。（对于非双峰图像，这种方法得到的结果可能会不理想）。<br>&emsp;&emsp;这里用到到的函数还是 cv2.threshold()，但是需要多传入一个参数 （ﬂag）：cv2.THRESH_OTSU。这时要把阈值设为 0。然后算法会找到最优阈值，这个最优阈值就是返回值 retVal。如果不使用 Otsu 二值化，返回的 retVal 值与设定的阈值相等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv2.imread(<span class="string">'psb3.jpg'</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ret1,th1=cv2.threshold(img,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line">ret2,th2=cv2.threshold(img,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY+cv2.THRESH_OTSU)</span><br><span class="line"><span class="comment">#(5,5)为高斯核的大小，0为标准差</span></span><br><span class="line">blur= cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#阀值一定要设为0</span></span><br><span class="line">ret3,th3=cv2.threshold(blur,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY+cv2.THRESH_OTSU)</span><br><span class="line"></span><br><span class="line">images=[img,<span class="number">0</span>,th1,</span><br><span class="line">         img,<span class="number">0</span>,th2,</span><br><span class="line">         img,<span class="number">0</span>,th3]</span><br><span class="line">titles =[<span class="string">'original noisy image'</span>,<span class="string">'histogram'</span>,<span class="string">'global thresholding(v=127)'</span>,</span><br><span class="line">          <span class="string">'original noisy image'</span>,<span class="string">'histogram'</span>,<span class="string">"otsu's thresholding"</span>,</span><br><span class="line">          <span class="string">'gaussian giltered image'</span>,<span class="string">'histogram'</span>,<span class="string">"otus's thresholding"</span>]</span><br><span class="line"><span class="comment">#这里使用了pyplot中画直方图的方法，plt.hist要注意的是他的参数是一维数组</span></span><br><span class="line"><span class="comment">#所以这里使用了（numpy）ravel方法，将多维数组转换成一维，也可以使用flatten方法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">1</span>),plt.imshow(images[i*<span class="number">3</span>],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>]),plt.xticks([]),plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">2</span>),plt.hist(images[i*<span class="number">3</span>].ravel(),<span class="number">256</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>+<span class="number">1</span>]),plt.xticks([]),plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">3</span>,<span class="number">3</span>,i*<span class="number">3</span>+<span class="number">3</span>),plt.imshow(images[i*<span class="number">3</span>+<span class="number">2</span>],<span class="string">'gray'</span>)</span><br><span class="line">    plt.title(titles[i*<span class="number">3</span>+<span class="number">2</span>]),plt.xticks([]),plt.yticks([])</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><h2 id="2D卷积"><a href="#2D卷积" class="headerlink" title="2D卷积"></a>2D卷积</h2><p>同一维信号一样，可以对2D图像实施低通滤波（LPF）和高通滤波（HPF）。LPF用于去除噪音，模糊图像，HPF用于找到图像的边缘。<br>OpenCV提供的函数cv.filter2D()可以对一幅图像进行卷积操作。练习一幅图像使用平均滤波器。举例下面是一个5X5的平均滤波器核：<br><img src="2D卷积.jpg" alt="图"><br>操作如下，将核放在图像的一个像素A上，求与核对应的图像上25（5x5）个像素的和，再取平均数，用这个平均数代替像素A的值。重复以上操作直到将图像的每一个像素值都更新一遍。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.float32)/<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cv.Filter2D(src, dst, kernel, anchor=(-1, -1))</span></span><br><span class="line"><span class="comment">#ddepth –desired depth of the destination image;</span></span><br><span class="line"><span class="comment">#if it is negative, it will be the same as src.depth();</span></span><br><span class="line"><span class="comment">#the following combinations of src.depth() and ddepth are supported:</span></span><br><span class="line"><span class="comment">#src.depth() = CV_8U, ddepth = -1/CV_16S/CV_32F/CV_64F</span></span><br><span class="line"><span class="comment">#src.depth() = CV_16U/CV_16S, ddepth = -1/CV_32F/CV_64F</span></span><br><span class="line"><span class="comment">#src.depth() = CV_32F, ddepth = -1/CV_32F/CV_64F</span></span><br><span class="line"><span class="comment">#src.depth() = CV_64F, ddepth = -1/CV_64F</span></span><br><span class="line"><span class="comment">#when ddepth=-1, the output image will have the same depth as the source.</span></span><br><span class="line"></span><br><span class="line">dst = cv2.filter2D(img,<span class="number">-1</span>,kernel)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img),plt.title(<span class="string">'original'</span>)</span><br><span class="line">plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(dst),plt.title(<span class="string">'averaging'</span>)</span><br><span class="line">plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><h2 id="平均"><a href="#平均" class="headerlink" title="平均"></a>平均</h2><p>这是由一个归一化卷积框完成的，他只是用卷积框覆盖区域所有像素的平均值来代替中心元素。可以使用cv2.blur()和cv2.boxFilter()来实现， 我们需要设定卷积框的宽和高。同样是一个矩阵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line">blur = cv2.blur(img,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'blur'</span>,blur)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h2><p>&emsp;&emsp;现在把卷积核换成高斯核，简单的说方框不变，将原来每个方框的值是相等的，现在里面的值是符合高斯分布的，方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包，原来的求平均数变成求加权平均数，权就是方框里的值。实现的函数是cv2.GaussianBlur()。需要指定高斯核的宽和高（必须是奇数），以及高斯函数沿X,Y方向的标准差。如果我们只指定了X方向的标准差，Y方向也会取相同值，如果两个标准差都是0.那么函数会根据核函数的大小自己计算，高斯滤波可以有效的从图像中去除高斯噪音。<br>&emsp;&emsp;也可以使用cv2.getGaussianKernel()自己构建一个高斯核。<br>&emsp;&emsp;如果要使用高斯模糊的话，上边的代码应改成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0是指根据窗口大小（5,5）来计算高斯函数标准差</span></span><br><span class="line">blur = cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'blur'</span>,blur)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="中值模糊"><a href="#中值模糊" class="headerlink" title="中值模糊"></a>中值模糊</h2><p>就是用与卷积框对应像素的中值来替代中心像素的值，这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围或者本身的值来取代他，他能有效去除噪声。卷积核的大小也应该是一个奇数。<br>需要给原始图像加上50%的噪声，然后用中值模糊。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line">median = cv2.medianBlur(img,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'blur'</span>,median)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a>双边滤波</h2><p>函数cv2.bilateralFilter()能在保持边界清晰的情况下有效的去除噪音，但比较慢。这种高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度），所以这种方法不会考虑一个像素是否位于边界，因此边界也会被模糊掉。<br>双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算。所以能保证边界不会被模糊，因此边界处的灰度值变化比较大。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9 邻域直径，两个 75 分别是空间高斯函数标准差，灰度值相似性高斯函数标准差 </span></span><br><span class="line">blur = cv2.bilateralFilter(img,<span class="number">9</span>,<span class="number">75</span>,<span class="number">75</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'blur'</span>,blur)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–腐蚀"><a href="#形态学–腐蚀" class="headerlink" title="形态学–腐蚀"></a>形态学–腐蚀</h2><p>&emsp;&emsp;形态学转换原理：一般情况下对二值化图像进行操作。需要两个参数，一个是原始图像，第二个被称为结构化元素或者核，它是用来决定操作的性质的。基本操作为腐蚀和膨胀，他们的变体构成了开运算，闭运算，梯度等。常用函数cv2.erode(),cv2.dilate(),cv2.morphotogyEx()。<br>&emsp;&emsp;腐蚀：把前景物体的边界腐蚀掉，但是前景仍然是白色的。卷积核沿着图像滑动，如果与卷积核对应的原图像的所有像素值都是1，那么中心元素就保持原来的像素值，否则就变为零。根据卷积核的大小靠近前景的所有像素都会被腐蚀掉（变为0），所以前景物体会变小，整幅图像的白色区域会减少。这对于去除白噪音很有用，也可以用来断开两个连在一块的物体。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">erosion = cv2.erode(img,kernel,iterations=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'erosion'</span>,erosion)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–膨胀"><a href="#形态学–膨胀" class="headerlink" title="形态学–膨胀"></a>形态学–膨胀</h2><p>&emsp;&emsp;与腐蚀相反，与卷积核对应的原图像的像素值中只要有一个是1，中心元素的像素值就是1。所以这个操作会增加图像中白色区域（前景）。一般在去噪音时先腐蚀再膨胀，因为腐蚀再去掉白噪音的同时，也会使前景对象变小，所以我们再膨胀。这时噪音已经被去除，不会再回来了，但是前景还在并会增加，膨胀也可以用来连接两个分开的物体。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line"></span><br><span class="line">dilation = cv2.dilate(img,kernel,iterations=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'dilation'</span>,dilation)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–开运算"><a href="#形态学–开运算" class="headerlink" title="形态学–开运算"></a>形态学–开运算</h2><p>先进行腐蚀再进行膨胀就叫做开运算。被用来去除噪音，函数可以使用cv2.morphologyEx()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line"></span><br><span class="line">opening = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'opening'</span>,opening)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–闭运算"><a href="#形态学–闭运算" class="headerlink" title="形态学–闭运算"></a>形态学–闭运算</h2><p>先膨胀再腐蚀。被用来填充前景物体中的小洞，或者前景上的小黑点。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line"></span><br><span class="line">closing = cv2.morphologyEx(img,cv2.MORPH_CLOSE,kernel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'closing'</span>,closing)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–梯度"><a href="#形态学–梯度" class="headerlink" title="形态学–梯度"></a>形态学–梯度</h2><p>其实就是一幅图像膨胀与腐蚀的差别。结果看上去就像前景物体的轮廓。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line"></span><br><span class="line">gradient = cv2.morphologyEx(img,cv2.MORPH_GRADIENT,kernel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'gradient'</span>,gradient)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–礼帽"><a href="#形态学–礼帽" class="headerlink" title="形态学–礼帽"></a>形态学–礼帽</h2><p>原始图像与进行开运算之后得到的图像的差。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line"></span><br><span class="line">tophat = cv2.morphologyEx(img,cv2.MORPH_TOPHAT,kernel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'tophat'</span>,tophat)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="形态学–黑帽"><a href="#形态学–黑帽" class="headerlink" title="形态学–黑帽"></a>形态学–黑帽</h2><p>进行闭运算之后得到的图像与原始图像的差。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'psb.jpg'</span>,<span class="number">0</span>)</span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line"></span><br><span class="line">blackhat = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT,kernel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    cv2.imshow(<span class="string">'blackhat'</span>,blackhat)</span><br><span class="line">    k=cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> k == ord(<span class="string">'q'</span>):<span class="comment">#按q键退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OpenCV的Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV的Python实践(1)</title>
      <link href="/2019/05/16/OpenCvPythonPractice-1/"/>
      <url>/2019/05/16/OpenCvPythonPractice-1/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h2><a id="more"></a><p>window的cmd模式下查询当前pip版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip show pip</span><br></pre></td></tr></table></figure></p><p>window的cmd模式下升级pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;安装cv2的时候出现”Requirement already satisfied”的问题无法使用python -m pip install opencv-python自动安装，可能是因为我的python版本经常换来换去的原因。通过指定安装路径解决，启动自动安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --target=D:\Python27_13\Lib\site-packages opencv-python</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;好吧，可能因为网络原因，我的网是真的慢，安装到一半还是失败，但是获取了相关whl的信息，我直接去下载这个opencv_python-4.1.0.25-cp36-cp36m-win32.whl来手动安装。用迅雷下载这个25兆的文件用了将近5分钟。–upgrade  –target= 安装时强制替换更新老版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade --target=D:\Python27_13\Lib\site-packages D:\numpy-1.16.3-cp36-cp36m-win32.whl</span><br><span class="line">python -m pip install --upgrade --target=D:\Python27_13\Lib\site-packages D:\opencv_python-4.1.0.25-cp36-cp36m-win32.whl</span><br><span class="line">python -m pip install --upgrade --target=D:\Python27_13\Lib\site-packages D:\matplotlib-3.0.3-cp36-cp36m-win32.whl</span><br></pre></td></tr></table></figure></p><p>环境配置成功</p><h2 id="显示保存图片"><a href="#显示保存图片" class="headerlink" title="显示保存图片"></a>显示保存图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python34\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#显示保存图片</span></span><br><span class="line"><span class="keyword">import</span> cv2   </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib  <span class="comment"># python -m pip install matplotlib-3.0.3-cp36-cp36m-win32.whl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print("cv2版本"+cv2.__version__)</span></span><br><span class="line"><span class="comment">#print(np.version.version)</span></span><br><span class="line"><span class="comment">#print(matplotlib.__version__)</span></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img=cv2.imread(<span class="string">'arterialImg.png'</span>,cv2.IMREAD_GRAYSCALE)  </span><br><span class="line">img2=cv2.imread(<span class="string">'arterialImg.png'</span>,cv2.IMREAD_COLOR)  </span><br><span class="line"><span class="comment">#cv2.IMREAD_COLOR 彩色模式忽略透明度，cv2.IMREAD_GRAYSCALE 灰度模式</span></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">'image2'</span>,img2)</span><br><span class="line">k=cv2.waitKey(<span class="number">0</span>) <span class="comment">#0毫秒内无限等待键盘输入，检测键是否按下</span></span><br><span class="line"><span class="keyword">if</span> k==<span class="number">27</span>:</span><br><span class="line">cv2.destroyAllWindows() <span class="comment">#ESC按下</span></span><br><span class="line"><span class="keyword">elif</span> k==ord(<span class="string">'s'</span>):</span><br><span class="line"><span class="comment">#print("保存图片")</span></span><br><span class="line"><span class="comment">#cv2.imwrite("mess.jpg",img)</span></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line">cv2.destroyAllWindows() </span><br><span class="line">print(<span class="string">"结束"</span>)</span><br></pre></td></tr></table></figure><h2 id="使用Matplotlib"><a href="#使用Matplotlib" class="headerlink" title="使用Matplotlib"></a>使用Matplotlib</h2><p>Matplotlib是python的一个绘图库，包含各种各样的绘图方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python34\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#使用Matplotlib</span></span><br><span class="line"><span class="keyword">import</span> cv2   </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line">font_set=FontProperties(fname=<span class="string">r"c:\windows\fonts\simsun.ttc"</span>,size=<span class="number">12</span>)</span><br><span class="line">img=cv2.imread(<span class="string">'arterialImg.png'</span>,cv2.IMREAD_COLOR)  </span><br><span class="line">plt.imshow(img,cmap=<span class="string">'gray'</span>,interpolation=<span class="string">'bicubic'</span>)</span><br><span class="line">plt.xlabel(<span class="string">u'年份'</span>,fontproperties=font_set)</span><br><span class="line">plt.ylabel(<span class="string">u'产量'</span>,fontproperties=font_set)</span><br><span class="line">plt.legend(prop=font_set,loc=<span class="string">'best'</span>)</span><br><span class="line">plt.title(<span class="string">"裤子"</span>,fontproperties=font_set)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="使用摄像头捕获视频"><a href="#使用摄像头捕获视频" class="headerlink" title="使用摄像头捕获视频"></a>使用摄像头捕获视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python34\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#使用摄像头捕获视频</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2   </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">ret,frame=cap.read()</span><br><span class="line">gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">'frame'</span>,gray)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)&amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;cap.isOpened()可检查摄像头设备是否初始化，如果返回True则没问题，否则要使用cap.open()<br>&emsp;&emsp;cap.get(propid)可获取视频一些参数信息，propid于0–18之间,如cap.get(3)和cap.get(4)可查看每帧宽和高<br>&emsp;&emsp;cap.set(propid,value)可修改视频属性，如cap.set(3,320)将视频宽度设置为320</p><h2 id="从文件中播放视频"><a href="#从文件中播放视频" class="headerlink" title="从文件中播放视频"></a>从文件中播放视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#从文件中播放视频</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">"../JustTheWayYouAre.mp4"</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#获取一帧图像</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="comment">#显示一帧图像</span></span><br><span class="line">    cv2.imshow(<span class="string">"capture"</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows() </span><br><span class="line"><span class="comment">#cv2.waitKey(25) 代表一帧25毫秒，这可以控制播放速度</span></span><br></pre></td></tr></table></figure><h2 id="保存视频"><a href="#保存视频" class="headerlink" title="保存视频"></a>保存视频</h2><p>&emsp;&emsp;OpenCV是计算机视觉库，可以把图片序列保存成视频(也是基于vfw和ffmpeg的)，但它本身并不是视频编码解码器，只支持avi的格式，而且生成的视频文件不能大于2GB，不能添加音频。如果想突破这些限制，还是得用ffMpeg。<br>&emsp;&emsp;捕获视频，并对每一帧进行加工后想要保存这个视频。<br>&emsp;&emsp;保存视频需要创建一个VideoWriter对象，确定输出文件的名字，指定FourCC编码，帧大小，播放频率和isColor标签。<br>&emsp;&emsp;有一个比较坑的地方，opencv修改后保存视频的帧大小宽高必须与原始视频保持一致才行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#打开一个本地视频，将每帧图像翻转后保存为另一个视频。</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">"../JustTheWayYouAre.mp4"</span>)</span><br><span class="line">frame_width = int(cap.get(<span class="number">3</span>))</span><br><span class="line">frame_height = int(cap.get(<span class="number">4</span>))</span><br><span class="line"><span class="comment">#需要去http://www.fourcc.org/downloads/divx-912-7/start下载DIVX编码器</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">'XVID'</span>)</span><br><span class="line">out = cv2.VideoWriter(<span class="string">'output.avi'</span>,fourcc, <span class="number">20.0</span>, (frame_width,frame_height))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line">ret, frame = cap.read()</span><br><span class="line"><span class="keyword">if</span> ret==<span class="literal">True</span>:</span><br><span class="line">frame = cv2.flip(frame,<span class="number">0</span>)</span><br><span class="line">out.write(frame)</span><br><span class="line">cv2.imshow(<span class="string">'frame'</span>,frame)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">'q'</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">cap.release()</span><br><span class="line">out.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="线-矩形-圆-椭圆-多边形-添加文字"><a href="#线-矩形-圆-椭圆-多边形-添加文字" class="headerlink" title="线,矩形,圆,椭圆,多边形,添加文字"></a>线,矩形,圆,椭圆,多边形,添加文字</h2><p>需要使用这些函数cv2.line(),cv2.rectangle(),cv2.circle(),cv2.ellipse(),cv2.putText()<br>上面函数都需要设置的共同参数：</p><ul><li>img：想要绘制图形的那张图</li><li>color：形状的颜色，rgb需要传入一个元组，灰度图只需传入灰度值。</li><li>thickness：线条粗细。默认为1。如果一个闭合图形设置为-1，该图形被填充。 </li><li>linetype：线条类型，8连通、抗锯齿等。(并不是指线型是实线、虚线还是点画线，这个参数实际用途是改变线的产生算法)，默认8连通，cv2.LINE_AA为抗锯齿，使线条看起来平滑。</li></ul><p>&emsp;&emsp;画线，需要指定线的起点和终点。<br>&emsp;&emsp;画矩形，需要指定左上角顶点和右下角顶点。<br>&emsp;&emsp;画圆，需要指定圆形中心点坐标和半径大小。<br>&emsp;&emsp;画椭圆，需要指定椭圆的中心点坐标、长轴和短轴长度、椭圆沿逆时针旋转的角度，椭圆弧沿顺时针方向起始角度和结束角度(0-360代表整个椭圆)。<br>&emsp;&emsp;画多边形，需要指定每个顶点的坐标。cv2.polylines()可用来画很多线，只需要将要画的线放在一个列表里传给函数即可。每条线被独立绘制，这比cv2.line()一条一条绘制要快一些。<br>&emsp;&emsp;在图片上添加文字，需要设置下列参数：要绘制文字、要绘制的位置、字体类型(通过查看cv2.putText()的文档找到支持字体)、字体的大小、文字的一般属性，如颜色、粗细、线条类型等，为美观一般linetype=cv2.LINE_AA。<br>&emsp;&emsp;所有绘图函数返回值都是None，所以img1=cv2.line(img,(0,0),(511,511),(255,0,0),5)是错误的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#线,矩形,圆,椭圆,多边形,添加文字</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line"><span class="comment">#画线</span></span><br><span class="line">cv2.line(img,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">511</span>,<span class="number">511</span>),(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">5</span>)</span><br><span class="line"><span class="comment">#图片上添加文字</span></span><br><span class="line">font=cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">cv2.putText(img,<span class="string">'OpenCV'</span>,(<span class="number">10</span>,<span class="number">500</span>), font, <span class="number">4</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line"><span class="comment">#画矩形</span></span><br><span class="line">cv2.rectangle(img,(<span class="number">384</span>,<span class="number">0</span>),(<span class="number">510</span>,<span class="number">128</span>),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">3</span>)</span><br><span class="line"><span class="comment">#画圆</span></span><br><span class="line">cv2.circle(img,(<span class="number">447</span>,<span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">-1</span>)</span><br><span class="line"><span class="comment">#画椭圆</span></span><br><span class="line">cv2.ellipse(img,(<span class="number">256</span>,<span class="number">256</span>),(<span class="number">100</span>,<span class="number">50</span>),<span class="number">30</span>,<span class="number">0</span>,<span class="number">360</span>,<span class="number">255</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#画多边形</span></span><br><span class="line">pts=np.array([[<span class="number">10</span>,<span class="number">5</span>],[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">70</span>,<span class="number">20</span>],[<span class="number">50</span>,<span class="number">10</span>]], np.int32)</span><br><span class="line">pts=pts.reshape((<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">cv2.polylines(img,[pts],<span class="literal">True</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">3</span>)<span class="comment">#如果去掉中括号，只是画四个点。如果第三个参数为False，多边形不闭合首尾不相连</span></span><br><span class="line">，</span><br><span class="line">cv2.imshow(<span class="string">'opencv'</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="鼠标回调事件"><a href="#鼠标回调事件" class="headerlink" title="鼠标回调事件"></a>鼠标回调事件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#鼠标回调事件</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">(event,x,y,flags,param)</span>:</span></span><br><span class="line"><span class="keyword">if</span> event==cv2.EVENT_LBUTTONDBLCLK:</span><br><span class="line">cv2.circle(img,(x,y),<span class="number">100</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img=np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv2.setMouseCallback(<span class="string">'image'</span>,draw_circle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>)&amp;<span class="number">0xFF</span>==<span class="number">27</span>: <span class="comment"># esc退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>按下拖拽鼠标，mode为true绘制矩形，为False绘制曲线，按M切换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">drawing=<span class="literal">False</span></span><br><span class="line">mode=<span class="literal">True</span></span><br><span class="line">ix,iy=<span class="number">-1</span>,<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span><span class="params">(event,x,y,flags,param)</span>:</span></span><br><span class="line"><span class="keyword">global</span> ix,iy,drawing,mode</span><br><span class="line"><span class="keyword">if</span> event==cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">drawing=<span class="literal">True</span></span><br><span class="line">ix,iy=x,y</span><br><span class="line"><span class="keyword">elif</span> event==cv2.EVENT_MOUSEMOVE <span class="keyword">and</span> flags==cv2.EVENT_FLAG_LBUTTON:</span><br><span class="line"><span class="keyword">if</span> drawing==<span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> mode==<span class="literal">True</span>:</span><br><span class="line">cv2.rectangle(img,(ix,iy),(x,y),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">cv2.circle(img,(x,y),<span class="number">3</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">elif</span> event==cv2.EVENT_LBUTTONUP:</span><br><span class="line">drawing==<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">img=np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv2.setMouseCallback(<span class="string">'image'</span>,draw_circle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">k=cv2.waitKey(<span class="number">1</span>)&amp;<span class="number">0xFF</span></span><br><span class="line"><span class="keyword">if</span> k==ord(<span class="string">'m'</span>):</span><br><span class="line">mode=<span class="keyword">not</span> mode</span><br><span class="line"><span class="keyword">elif</span> cv2.waitKey(<span class="number">20</span>)&amp;<span class="number">0xFF</span>==<span class="number">27</span>: <span class="comment"># esc退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="滑动条"><a href="#滑动条" class="headerlink" title="滑动条"></a>滑动条</h2><p>&emsp;&emsp;通过调节滑动条设定画板颜色。<br>&emsp;&emsp;cv2.getTrackbarPos()的参数分别为滑动条名字、滑动条被放置窗口的名字、滑动条默认位置、滑动条最大值、回调函数。每次滑动条滑动都会调用回调函数，回调函数的默认参数就是滑动条的位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">drawing=<span class="literal">False</span></span><br><span class="line">mode=<span class="literal">True</span></span><br><span class="line">ix,iy=<span class="number">-1</span>,<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">img=np.zeros((<span class="number">512</span>,<span class="number">512</span>,<span class="number">3</span>),np.uint8)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line">cv2.createTrackbar(<span class="string">'R'</span>,<span class="string">'image'</span>,<span class="number">0</span>,<span class="number">255</span>,nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">'G'</span>,<span class="string">'image'</span>,<span class="number">0</span>,<span class="number">255</span>,nothing)</span><br><span class="line">cv2.createTrackbar(<span class="string">'B'</span>,<span class="string">'image'</span>,<span class="number">0</span>,<span class="number">255</span>,nothing)</span><br><span class="line"></span><br><span class="line">switch=<span class="string">'0:off\n1:on'</span></span><br><span class="line">cv2.createTrackbar(switch,<span class="string">'image'</span>,<span class="number">0</span>,<span class="number">1</span>,nothing)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">k=cv2.waitKey(<span class="number">1</span>)&amp;<span class="number">0xFF</span></span><br><span class="line"><span class="keyword">if</span> k==<span class="number">27</span>:        <span class="comment">#esc退出</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">r=cv2.getTrackbarPos(<span class="string">'R'</span>,<span class="string">'image'</span>)</span><br><span class="line">g=cv2.getTrackbarPos(<span class="string">'G'</span>,<span class="string">'image'</span>)</span><br><span class="line">b=cv2.getTrackbarPos(<span class="string">'B'</span>,<span class="string">'image'</span>)</span><br><span class="line">s=cv2.getTrackbarPos(switch,<span class="string">'image'</span>)</span><br><span class="line"><span class="keyword">if</span> s==<span class="number">0</span>:</span><br><span class="line">img[:]=<span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">img[:]=[b,g,r]</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="获取并修改像素值"><a href="#获取并修改像素值" class="headerlink" title="获取并修改像素值"></a>获取并修改像素值</h2><p>&emsp;&emsp;cv2.imread()读取的图片默认情况下为彩图（三通道图片），所以，在定位到对应(x,y)像素点上的时候，得到的就是三维向量。numpy的操作基于性能考虑，能用矩阵运算就不用循环。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>)</span><br><span class="line">print(img.shape) <span class="comment">#返回图像的属性，包括(行，列，通道数)</span></span><br><span class="line">print(img.size) <span class="comment">#图像的像素数目</span></span><br><span class="line">print(img.dtype) <span class="comment">#图像的数据类型</span></span><br><span class="line">p=img[<span class="number">100</span>,<span class="number">100</span>] <span class="comment">#获取某点属性</span></span><br><span class="line">print(p)</span><br><span class="line">px=img.item(<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>)  </span><br><span class="line">py=img.item(<span class="number">100</span>,<span class="number">100</span>,<span class="number">1</span>)  </span><br><span class="line">pz=img.item(<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>)  </span><br><span class="line">print(str(px)+<span class="string">' '</span>+str(py)+<span class="string">" "</span>+str(pz)) <span class="comment">#分别获取某点的rgb各值 </span></span><br><span class="line">img.itemset((<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>),<span class="number">138</span>) <span class="comment">#设置某分量的值</span></span><br><span class="line">pz=img.item(<span class="number">100</span>,<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line">print(str(pz))</span><br></pre></td></tr></table></figure></p><h2 id="图像ROI"><a href="#图像ROI" class="headerlink" title="图像ROI"></a>图像ROI</h2><p>&emsp;&emsp;ROI全称Region Of Internet，感兴趣的区域，就是从图像中选择一个图像区域。<br>&emsp;&emsp;下面代码将一块感兴趣的区域，复制到了另一个地方，或者单独提取出来。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>)</span><br><span class="line"></span><br><span class="line">source=img[<span class="number">280</span>:<span class="number">340</span>,<span class="number">330</span>:<span class="number">390</span>]</span><br><span class="line">img[<span class="number">273</span>:<span class="number">333</span>,<span class="number">100</span>:<span class="number">160</span>]=source <span class="comment">#感兴趣的区域复制到了另一个地方</span></span><br><span class="line">cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">'dandu'</span>,source) <span class="comment">#感兴趣的区域单独提取出来</span></span><br><span class="line">k=cv2.waitKey(<span class="number">0</span>) <span class="comment">#0毫秒内无限等待键盘输入，检测键是否按下</span></span><br><span class="line"><span class="keyword">if</span> k==<span class="number">27</span>:</span><br><span class="line">cv2.destroyAllWindows() <span class="comment">#ESC按下</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="拆分通道及合并通道"><a href="#拆分通道及合并通道" class="headerlink" title="拆分通道及合并通道"></a>拆分通道及合并通道</h2><p>v2.split函数分离得到各个通道的灰度值(单通道图像)。<br>cv2.merge函数是合并单通道成多通道（不能合并多个多通道图像）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">"psb.jpg"</span>)</span><br><span class="line">b,g,r=cv2.split(img)</span><br><span class="line">print(<span class="string">"img shape "</span>+str(img.shape))</span><br><span class="line">print(<span class="string">"r shape "</span>+str(r.shape))</span><br><span class="line">cv2.imshow(<span class="string">'r '</span>,r)</span><br><span class="line">cv2.imshow(<span class="string">'g '</span>,g)</span><br><span class="line">cv2.imshow(<span class="string">'b '</span>,b)</span><br><span class="line"><span class="comment">#生成一个值为0的单通道数组</span></span><br><span class="line">zeros = np.zeros(img.shape[:<span class="number">2</span>], dtype = <span class="string">"uint8"</span>)</span><br><span class="line"><span class="comment"># 分别扩展B、G、R成为三通道。另外两个通道用上面的值为0的数组填充</span></span><br><span class="line">cv2.imshow(<span class="string">"Blue"</span>, cv2.merge([b, zeros, zeros]))</span><br><span class="line">cv2.imshow(<span class="string">"Green"</span>, cv2.merge([zeros, g, zeros]))</span><br><span class="line">cv2.imshow(<span class="string">"Red"</span>, cv2.merge([zeros, zeros, r]))</span><br><span class="line">img[:,:,<span class="number">2</span>]=<span class="number">0</span><span class="comment">#所有像素的红通道值为0  BGR</span></span><br><span class="line">cv2.imshow(<span class="string">"Blue+Green"</span>, img)</span><br><span class="line">img[:,:,<span class="number">1</span>]=<span class="number">0</span><span class="comment">#所有像素的绿通道值为0  前两个选所有像素，最后一个选通道</span></span><br><span class="line">img[:,:,<span class="number">0</span>]=<span class="number">0</span><span class="comment">#所有像素的蓝通道值为0  </span></span><br><span class="line">k=cv2.waitKey(<span class="number">0</span>)  </span><br><span class="line"><span class="keyword">if</span> k==<span class="number">27</span>:</span><br><span class="line">cv2.destroyAllWindows() <span class="comment">#ESC按下</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="图像加法"><a href="#图像加法" class="headerlink" title="图像加法"></a>图像加法</h2><p>使用cv2.add()将两幅图像进行加法运算，也可以直接使用numpy，res=img1+img2.两幅图像的大小，类型必须一致，或者第二个图像可以是一个简单的标量值。<br>openCV的加法是一种饱和操作，而numpy的加法是一种模操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">x=np.uint8([<span class="number">250</span>])</span><br><span class="line">y=np.uint8([<span class="number">10</span>])</span><br><span class="line">print(cv2.add(x,y))<span class="comment">#250+10=260&gt;=255</span></span><br><span class="line"><span class="comment">#结果为[[255]]</span></span><br><span class="line"><span class="keyword">print</span> (x+y)<span class="comment">#250+10=260%255=4</span></span><br><span class="line"><span class="comment">#结果为[4]</span></span><br></pre></td></tr></table></figure></p><h2 id="图像混合"><a href="#图像混合" class="headerlink" title="图像混合"></a>图像混合</h2><p>这也是加法，不同的是两幅图像的权重不同，这会给人一种混合或者透明的感觉。图像混合的计算公式如下：<br>g(x) = (1−α)f<sub>0</sub>(x)+αf<sub>1</sub>(x)<br>通过修改α的值（0~1）,可以实现很酷的混合。<br>例：将两幅图像混合，第一幅权重为0.7.第二幅权重为0.3。函数cv2.addWeighed()可以按下面的公式对图片进行混合。<br>dst = α·img1 + β·img2+γ   这里γ的取值为0.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">img1=cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">img2=cv2.imread(<span class="string">'psb3.jpg'</span>)</span><br><span class="line"></span><br><span class="line">dst = cv2.addWeighted(img1,<span class="number">0.7</span>,img2,<span class="number">0.3</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'dst'</span>,dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">img1 = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">img2 = cv2.imread(<span class="string">'psb3.jpg'</span>)</span><br><span class="line"><span class="comment">#创建一个黑色背景的窗口</span></span><br><span class="line">img = np.zeros((<span class="number">400</span>,<span class="number">400</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.namedWindow(<span class="string">'image'</span>)</span><br><span class="line"> </span><br><span class="line">cv2.createTrackbar(<span class="string">'a'</span>,<span class="string">'image'</span>,<span class="number">0</span>,<span class="number">100</span>,nothing)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">'image'</span>,img)</span><br><span class="line">    k = cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    r = cv2.getTrackbarPos(<span class="string">'a'</span>,<span class="string">'image'</span>)</span><br><span class="line">    r=float(r)/<span class="number">100.0</span></span><br><span class="line"> </span><br><span class="line">    img=cv2.addWeighted(img1,r,img2,<span class="number">1.0</span>-r,<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="阈值二值化和位运算"><a href="#阈值二值化和位运算" class="headerlink" title="阈值二值化和位运算"></a>阈值二值化和位运算</h2><p>&emsp;&emsp;图像的二值化，就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的只有黑和白的视觉效果。<br>&emsp;&emsp;一幅图像包括目标物体、背景还有噪声，要想从多值的数字图像中直接提取出目标物体，常用的方法就是设定一个阈值T，用T将图像的数据分成两部分：大于T的像素群和小于T的像素群。这是研究灰度变换的最特殊的方法，称为图像的二值化（Binarization）。<br>&emsp;&emsp;位运算操作有and, or, not, xor。在提取部分图像选择非矩形区域roi时，位运算操作十分有用。<br>&emsp;&emsp;把opencv的标志放到另外一副图像上，如果使用加法，颜色会改变，如果使用混合，会变成透明，如果是矩形区域，可以使用roi方法，不是矩形时，用位运算实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">baidu_logo = cv2.imread(<span class="string">'baidu.png'</span>)</span><br><span class="line">target_img=cv2.imread(<span class="string">'target.jpg'</span>)</span><br><span class="line"><span class="comment">#图片相加需要有相同的宽和高，所以先构建一个新的图片baidu_resize，大小和目的图片相同</span></span><br><span class="line">baidu_resize  = np.ones(target_img.shape,np.uint8)</span><br><span class="line">baidu_resize =baidu_resize *<span class="number">255</span> <span class="comment"># 得到白色背景</span></span><br><span class="line"><span class="comment">#baidu_resize =baidu_resize *0 # 得到黑色色背景</span></span><br><span class="line"><span class="comment">#把baidu_logo图像放入生成的指定长宽大小的图像里</span></span><br><span class="line">baidu_resize[<span class="number">0</span>:baidu_logo.shape[<span class="number">0</span>], <span class="number">0</span>:baidu_logo.shape[<span class="number">1</span>]] = baidu_logo</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到灰度图</span></span><br><span class="line">baidu_logo_gray = cv2.cvtColor(baidu_resize, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment">#阈值二值化，灰度值大于200的像素点位置赋值255，其他像素点位置赋值0</span></span><br><span class="line">ret, mask = cv2.threshold(baidu_logo_gray, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY) </span><br><span class="line"><span class="comment">#取反操作，mask中255的像素点值变为0， 值为0的像素点新值为255</span></span><br><span class="line">mask_inv = cv2.bitwise_not(mask)  </span><br><span class="line"><span class="comment">#对图像应用mask</span></span><br><span class="line">baidu_logo_fg = cv2.bitwise_and(baidu_resize, baidu_resize, mask = mask_inv)</span><br><span class="line">target_img_bg = cv2.bitwise_and(target_img, target_img, mask = mask)</span><br><span class="line"><span class="comment">#图像相加融合，得到最终结果</span></span><br><span class="line">added_img = cv2.add(baidu_logo_fg, target_img_bg)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'final'</span>,added_img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h2 id="图像的运算"><a href="#图像的运算" class="headerlink" title="图像的运算"></a>图像的运算</h2><p>&emsp;&emsp;图像的基本运算有很多种，比如两幅图像可以相加、相减、相乘、相除、位运算、平方根、对数、绝对值等；图像也可以放大、缩小、旋转，还可以截取其中的一部分作为ROI（感兴趣区域）进行操作，各个颜色通道还可以分别提取及对各个颜色通道进行各种运算操作。总之，对于图像可以进行的基本运算非常的多。<br>&emsp;&emsp;基础数学运算应用于图像像素处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(InputArray src1, InputArray src2, OutputArray dst,InputArray mask=noArray()</span>, <span class="keyword">int</span> dtype</span>=-<span class="number">1</span>);<span class="comment">//dst = src1 + src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subtract</span><span class="params">(InputArray src1, InputArray src2, OutputArray dst,InputArray mask=noArray()</span>, <span class="keyword">int</span> dtype</span>=-<span class="number">1</span>);<span class="comment">//dst = src1 - src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">(InputArray src1, InputArray src2,OutputArray dst, <span class="keyword">double</span> scale=<span class="number">1</span>, <span class="keyword">int</span> dtype=<span class="number">-1</span>)</span></span>;<span class="comment">//dst = scale*src1*src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(InputArray src1, InputArray src2, OutputArray dst,<span class="keyword">double</span> scale=<span class="number">1</span>, <span class="keyword">int</span> dtype=<span class="number">-1</span>)</span></span>;<span class="comment">//dst = scale*src1/src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">double</span> scale, InputArray src2,OutputArray dst, <span class="keyword">int</span> dtype=<span class="number">-1</span>)</span></span>;<span class="comment">//dst = scale/src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scaleAdd</span><span class="params">(InputArray src1, <span class="keyword">double</span> alpha, InputArray src2, OutputArray dst)</span></span>;<span class="comment">//dst = alpha*src1 + src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWeighted</span><span class="params">(InputArray src1, <span class="keyword">double</span> alpha, InputArray src2,<span class="keyword">double</span> beta, <span class="keyword">double</span> gamma, OutputArray dst, <span class="keyword">int</span> dtype=<span class="number">-1</span>)</span></span>;<span class="comment">//dst = alpha*src1 + beta*src2 + gamma</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sqrt</span><span class="params">(InputArray src, OutputArray dst)</span></span>;<span class="comment">//计算每个矩阵元素的平方根</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pow</span><span class="params">(InputArray src, <span class="keyword">double</span> power, OutputArray dst)</span></span>;<span class="comment">//src的power次幂</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exp</span><span class="params">(InputArray src, OutputArray dst)</span></span>;<span class="comment">//dst = e**src（**表示指数的意思）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(InputArray src, OutputArray dst)</span></span>;<span class="comment">//dst = log(abs(src))</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;二进制数据的与、或、非、异或操作应用于图像像素处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitwise_and</span><span class="params">(InputArray src1, InputArray src2,OutputArray dst, InputArray mask=noArray()</span>)</span>;<span class="comment">//dst = src1 &amp; src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitwise_or</span><span class="params">(InputArray src1, InputArray src2,OutputArray dst, InputArray mask=noArray()</span>)</span>;<span class="comment">//dst = src1 | src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitwise_xor</span><span class="params">(InputArray src1, InputArray src2,OutputArray dst, InputArray mask=noArray()</span>)</span>;<span class="comment">//dst = src1 ^ src2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitwise_not</span><span class="params">(InputArray src, OutputArray dst,InputArray mask=noArray()</span>)</span>;<span class="comment">//dst = ~src</span></span><br></pre></td></tr></table></figure></p><h2 id="使用OpenCV检测程序效率"><a href="#使用OpenCV检测程序效率" class="headerlink" title="使用OpenCV检测程序效率"></a>使用OpenCV检测程序效率</h2><p>cv2.getTickCount函数返回从参考点到这个函数被执行的时钟数。在一个函数执行前后都调用它，可以得到这个函数的执行时间。<br>cv2.getTickFrequency返回时钟频率，或者说每秒钟的时钟数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="comment">#窗口大小不同（5,7,9）的核函数来做中值滤波，查看一个函数运行了多少秒</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">img1 = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">e1 = cv2.getTickCount() <span class="comment">#开始计时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">49</span>,<span class="number">2</span>):</span><br><span class="line">img1 = cv2.medianBlur(img1,i)</span><br><span class="line"></span><br><span class="line">e2 = cv2.getTickCount() <span class="comment">#结束计时</span></span><br><span class="line">time = (e2-e1)/cv2.getTickFrequency()</span><br><span class="line">print(time) <span class="comment">#中间过程耗时</span></span><br></pre></td></tr></table></figure><h2 id="OpenCV的默认优化"><a href="#OpenCV的默认优化" class="headerlink" title="OpenCV的默认优化"></a>OpenCV的默认优化</h2><p>cv2.useOptimized()来查看优化是否被开启，cv2.setUesOptimized()来开启优化。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cv2.setUseOptimized(<span class="literal">True</span>)</span><br><span class="line">print(cv2.useOptimized()) </span><br><span class="line">img1 = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">e1 = cv2.getTickCount()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">49</span>,<span class="number">2</span>):</span><br><span class="line">img1 = cv2.medianBlur(img1,i)</span><br><span class="line"></span><br><span class="line">e2 = cv2.getTickCount()</span><br><span class="line">time = (e2-e1)/cv2.getTickFrequency()</span><br><span class="line">print(<span class="string">"优化过的耗时："</span>+str(time))</span><br><span class="line"></span><br><span class="line">cv2.setUseOptimized(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">img1 = cv2.imread(<span class="string">'psb.jpg'</span>)</span><br><span class="line">e1 = cv2.getTickCount()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">49</span>,<span class="number">2</span>):</span><br><span class="line">img1 = cv2.medianBlur(img1,i)</span><br><span class="line"></span><br><span class="line">e2 = cv2.getTickCount()</span><br><span class="line">time = (e2-e1)/cv2.getTickFrequency()</span><br><span class="line">print(<span class="string">"取消优化的耗时："</span>+str(time))</span><br><span class="line">cv2.setUseOptimized(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#取消优化后的耗时更短。。。</span></span><br></pre></td></tr></table></figure></p><h2 id="转换颜色空间"><a href="#转换颜色空间" class="headerlink" title="转换颜色空间"></a>转换颜色空间</h2><p>&emsp;&emsp;在OpenCV中有超过150种进行颜色空间转换的方法。但是你以后就会发现我们经常用到的也就两种：BGR↔Gray 和 BGR↔HSV。<br>&emsp;&emsp;我们用到的函数是cv2.cvtColor(input_imageﬂag)，其中ﬂag就是转换类型。<br>&emsp;&emsp;对于BGR↔Gray的转换，我们使用的ﬂag就是cv2.COLOR_BGR2GRAY。<br>&emsp;&emsp;同样对于BGR↔HSV的转换我们用的ﬂag就是cv2.COLOR_BGR2HSV。<br>&emsp;&emsp;得到所有可用的颜色空间flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dir(cv2):</span><br><span class="line"><span class="keyword">if</span> i.startswith(<span class="string">'COLOR_'</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在OpenCV的HSV格式中，H（色彩/色度）的取值范围是[0，179]，S（饱和度）的取值范围[0，255]，V（亮度）的取值范围[0，255]。但是不同的软件使用的值可能不同。所以当你拿OpenCV的HSV值与其他软件的HSV值对比时，一定要记得归一化。</p><h2 id="物体跟踪"><a href="#物体跟踪" class="headerlink" title="物体跟踪"></a>物体跟踪</h2><p>现在我们知怎样将一幅图像从BGR换到HSV了，我们可以利用这点来提取带有某个特定色的物体。在HSV颜色空间中要比在BGR空间中更容易表示一个特定颜色。在我们的程序中，我们提取的是一个蓝色的物体。以下就是我们做的几步：</p><ul><li>从视频中获取每一帧图像</li><li>将图像转换到HSV空间</li><li>设置HSV阈值到蓝色范围</li><li>获取蓝色物体<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!D:\Python27_13\python.exe</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3.6.8</span></span><br><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#获取每一帧</span></span><br><span class="line">    ret,frame = cap.read()</span><br><span class="line">    <span class="comment">#转换到HSV</span></span><br><span class="line">    hsv = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)</span><br><span class="line">    <span class="comment">#设定蓝色的阀值</span></span><br><span class="line">    lower_blue = np.array([<span class="number">110</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">    upper_blue = np.array([<span class="number">130</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">    <span class="comment">#根据阀值构建掩模</span></span><br><span class="line">    mask = cv2.inRange(hsv,lower_blue,upper_blue)</span><br><span class="line">    <span class="comment">#对原图和掩模进行位运算</span></span><br><span class="line">    res = cv2.bitwise_and(frame,frame,mask=mask)</span><br><span class="line">    <span class="comment">#显示图像</span></span><br><span class="line">    cv2.imshow(<span class="string">'frame'</span>,frame)</span><br><span class="line">    cv2.imshow(<span class="string">'mask'</span>,mask)</span><br><span class="line">    cv2.imshow(<span class="string">'res'</span>,res)</span><br><span class="line">    k = cv2.waitKey(<span class="number">5</span>)&amp;<span class="number">0xFF</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#关闭窗口</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> OpenCV的Python实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基础语法</title>
      <link href="/2019/05/15/firstBlog/"/>
      <url>/2019/05/15/firstBlog/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown支持6种级别的标题，对应html标签<strong>h1~h6</strong><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#      h1</span><br><span class="line">##     h2</span><br><span class="line">###    h3</span><br><span class="line">####   h4</span><br><span class="line">#####  h5</span><br><span class="line">###### h6</span><br></pre></td></tr></table></figure></p><h2 id="段落及区块引用"><a href="#段落及区块引用" class="headerlink" title="段落及区块引用"></a>段落及区块引用</h2><p>Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。</p><p>另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这段文字将被高亮强调显示</span><br></pre></td></tr></table></figure></p><blockquote><p>这段文字将被高亮强调显示   </p></blockquote><h2 id="插入链接或图片"><a href="#插入链接或图片" class="headerlink" title="插入链接或图片"></a>插入链接或图片</h2><p>引用图片和链接的唯一区别就是在最前方添加一个感叹号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">直接链接：&lt;http://www.baidu.com&gt;</span><br><span class="line">[点击跳转至百度](http://www.baidu.com)</span><br><span class="line">![图片](https://box.bdimg.com/static/fisp_static/common/img/searchbox/logo_news_276_88_1f9876a.png)</span><br></pre></td></tr></table></figure></p><p>直接链接：<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br><a href="http://www.baidu.com" target="_blank" rel="noopener">点击跳转至百度</a></p><p><img src="https://box.bdimg.com/static/fisp_static/common/img/searchbox/logo_news_276_88_1f9876a.png" alt="图片"></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown支持有序列表和无序列表两种形式：<br>无序列表使用*或+或-标识<br>有序列表使用数字标识 例如1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">* 黄瓜</span><br><span class="line">* 玉米</span><br><span class="line">* 茄子</span><br><span class="line"></span><br><span class="line">+ 黄瓜</span><br><span class="line">+ 玉米</span><br><span class="line">+ 茄子</span><br><span class="line"></span><br><span class="line">- 黄瓜</span><br><span class="line">- 玉米</span><br><span class="line">- 茄子</span><br><span class="line"></span><br><span class="line">1. 黄瓜</span><br><span class="line">2. 玉米</span><br><span class="line">3. 茄子</span><br></pre></td></tr></table></figure></p><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ol><li>黄瓜</li><li>玉米</li><li>茄子</li></ol><p>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格</p><p>如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*    段落一</span><br><span class="line"></span><br><span class="line">     小段一</span><br><span class="line">*    段落二</span><br><span class="line"></span><br><span class="line">     小段二</span><br><span class="line">* 段落一</span><br><span class="line">    &gt; 区块标记一</span><br><span class="line">* 段落二</span><br><span class="line">    &gt; 区块标记二</span><br></pre></td></tr></table></figure></p><ul><li><p>段落一</p><p>小段一</p></li><li><p>段落二</p><p>小段二</p></li><li>段落一<blockquote><p>区块标记一</p></blockquote></li><li>段落二<blockquote><p>区块标记二  </p></blockquote></li></ul><p>记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><hr><h2 id="对部分文字强调"><a href="#对部分文字强调" class="headerlink" title="对部分文字强调"></a>对部分文字强调</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*这里是斜体*</span><br><span class="line">_这里是斜体_</span><br><span class="line"></span><br><span class="line">**这里是加粗**</span><br><span class="line">__这里是加粗__</span><br><span class="line"></span><br><span class="line">上标：O&lt;sub&gt;2&lt;/sub&gt;，下标：3&lt;sup&gt;2&lt;/sup&gt;</span><br><span class="line">简称或缩写:</span><br><span class="line">The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;.</span><br></pre></td></tr></table></figure><p><em>这里是斜体</em><br><em>这里是斜体</em></p><p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p><p>上标：O<sub>2</sub>，下标：3<sup>2</sup><br>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>三个短斜杠左右的冒号用于控制对齐方式<br>只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:---:|:---:|:---:</span><br><span class="line">项目|项目一|项目二</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">条目一</th><th style="text-align:center">条目二</th></tr></thead><tbody><tr><td style="text-align:center">项目</td><td style="text-align:center">项目一</td><td style="text-align:center">项目二</td></tr></tbody></table><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><p>使用反斜杠\插入语法中用到的特殊符号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">\\   反斜线</span><br><span class="line">\`   反引号</span><br><span class="line">\*   星号</span><br><span class="line">\_   底线</span><br><span class="line">\&#123; \&#125;  花括号</span><br><span class="line">\[ \]  方括号</span><br><span class="line">\( \)  括弧</span><br><span class="line">\#   井字号</span><br><span class="line">\+   加号</span><br><span class="line">\-   减号</span><br><span class="line">\.   英文句点</span><br><span class="line">\!   惊叹号</span><br><span class="line"></span><br><span class="line">&amp;copy; &amp;  &amp;uml; &amp;trade; &amp;iexcl; &amp;pound;</span><br><span class="line">&amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot;</span><br><span class="line"></span><br><span class="line">X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14;  &amp;times;  &amp;divide;   &amp;raquo;</span><br></pre></td></tr></table></figure></p><p>\   反斜线<br>`   反引号<br>*   星号<br>_   底线<br>{ }  花括号<br>[ ]  方括号<br>( )  括弧<br>#   井字号<br>+   加号<br>-   减号<br>.   英文句点<br>!   惊叹号</p><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p><p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p><h2 id="文字上色"><a href="#文字上色" class="headerlink" title="文字上色"></a>文字上色</h2><p>Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=&apos;#ff0000&apos;&gt;红色&lt;/font&gt;</span><br></pre></td></tr></table></figure></p><font color="#ff0000">红色</font><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">function test() &#123;</span><br><span class="line">console.log(&quot;Hello world!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            ul&#123;list-style: none;&#125;          </span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于python的串口通信测试</title>
      <link href="/2018/12/13/SerialPythonTest/"/>
      <url>/2018/12/13/SerialPythonTest/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天基于Python测试了跟硬件交互信息可能会用的串口通信。感觉串口通信用python开发效率比较高。  </p><a id="more"></a><p>上位机相当于一个软件系统，可以用于接收数据、控制数据。即可以对接收到的数据直接发送操控命令来操作数据。上位机可以接收下位机的信号。下位机是一个控制器，是直接控制设备获取设备状况的计算机。上位机发出的命令首先给下位机，下位机再根据此命令解释成相应时序信号直接控制相应设备。下位机不时读取设备状态数据（一般为模拟量），转换成数字信号反馈给上位机。上位机不可以单独使用，而下位机可以单独使用。  </p><p>串口通信一般分为四大步：打开串口-&gt;配置串口-&gt;读写串口-&gt;关闭串口，还可以在串口上监听读写等事件。<br>一般情况下，设备间通信方式分为并行通信和串行通信。<br>并行通信:数据各个位同时传输,速度快,占用引脚资源多。<br>串行通信:数据按位顺序传输,速度相对较慢,占用引脚资源少.  </p><p>串行通信按数据传送方向分为:  </p><ul><li>a.单工：数据传输只支持数据在一个方向上传输;  </li><li>b.半双工：允许数据在两个方向上传输。但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；它不需要独立的接收端和发送端，两者可以合并一起使用一个端口;  </li><li>c.全双工：允许数据同时在两个方向上传输。因此，全双工通信是两个单工通信方式的结合，需要独立的接收端和发送端。  </li></ul><p>串行通信按通信方式分为：  </p><ul><li>a.同步通信：带时钟同步信号传输。<br>在同步通讯中，收发设备上方会使用一根信号线传输信号，在时钟信号的驱动下双方进行协调，同步数据。例如，通讯中通常双方会统一规定在时钟信号的上升沿或者下降沿对数据线进行采样。  </li><li>b.异步通信：不带时钟同步信号传输。<br>在异步通讯中不使用时钟信号进行数据同步，它们直接在数据信号中穿插一些用于同步的信号位，或者将主题数据进行打包，以数据帧的格式传输数据。通讯中还需要双方规约好数据的传输速率（也就是波特率）等，以便更好地同步。常用的波特率有4800bps、9600bps、115200bps等。<br>在同步通讯中，数据信号所传输的内容绝大部分是有效数据，而异步通讯中会则会包含数据帧的各种标识符，所以同步通讯效率高，但是同步通讯双方的时钟允许误差小，稍稍时钟出错就可能导致数据错乱，异步通讯双方的时钟允许误差较大。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># IDE为Notepad++，打开 视图-显示符号-显示空格和制表符</span></span><br><span class="line"><span class="comment"># 以避免缩进方面的语法错误 #</span></span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开串口</span></span><br><span class="line">serialPort=<span class="string">"COM3"</span>   <span class="comment">#串口</span></span><br><span class="line">baudRate=<span class="number">9600</span>       <span class="comment">#波特率</span></span><br><span class="line">ser=serial.Serial(serialPort,baudRate,timeout=<span class="number">6.0</span>)</span><br><span class="line">str1=<span class="string">"参数设置：串口="</span></span><br><span class="line">str1_unicode=str1.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">str1_gbk=str1_unicode.encode(<span class="string">"gbk"</span>)</span><br><span class="line">str2=<span class="string">"，波特率="</span></span><br><span class="line">str2_unicode=str2.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">str2_gbk=str2_unicode.encode(<span class="string">"gbk"</span>)</span><br><span class="line"><span class="keyword">print</span> str1_gbk+str(serialPort)+str2_gbk+str(baudRate)</span><br><span class="line"></span><br><span class="line">concent=<span class="string">"请输入要发送的数据（非中文）并同时接收数据:"</span></span><br><span class="line">c_unicode=concent.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">c_gbk=c_unicode.encode(<span class="string">"gbk"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#收,发数据</span></span><br><span class="line">maxloopNum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">maxloopNum=maxloopNum+<span class="number">1</span></span><br><span class="line">str=raw_input(c_gbk)</span><br><span class="line">ser.write((str+<span class="string">'\n'</span>).encode())</span><br><span class="line">print(<span class="string">"等待回应"</span>.decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gbk"</span>))</span><br><span class="line">revalue=ser.readline().decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gbk"</span>)</span><br><span class="line">print(revalue)</span><br><span class="line"><span class="comment">#可以接收中文,串口另一段在6秒内发送过来的信息都会接受并print出来</span></span><br><span class="line"><span class="keyword">if</span>(re.search(<span class="string">b'OK'</span>,revalue)):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">elif</span>(maxloopNum&gt;<span class="number">5</span>):</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line">ser.close()</span><br><span class="line">print(<span class="string">"串口通信结束。"</span>.decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gbk"</span>))</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://www.seanzs.com/wp-content/uploads/2018/12/20181213093401_87588.jpg" alt="image">  </p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试给现有程序做个微端登录器</title>
      <link href="/2018/08/22/testWeiDuan/"/>
      <url>/2018/08/22/testWeiDuan/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>制作一个小型微端EXE，在这个exe负责登陆，登陆后从远程服务器下载资源，操作本地文件系统灵活控制本地资源，远程资源与主体程序逻辑流程交互。<br><a id="more"></a><br>资源与程序无缝对接，将原来的程序解开关联分解优化成完全独立的部分比较费力。  </p><p>后来基于WPF开发，添加了注册，登陆，密保问题找回，选择软件，下载软件，版本自动更新，异地登陆自动离线，软件上传信息，查询信息,建议栏的功能。并对Android移动端软件的数据通信(主要是中文编码的问题)作了修改。微端雏形144kb大小。  </p><p>wpf默认是基于IE内核，总觉得对一些流行的框架及H5支持不好，后来又单独弄了个嵌入chrome内核的开发路线，之前的功能改到基于chrome内核的太麻烦了就没有改  </p><p><img src="http://wx2.sinaimg.cn/large/7ce5b833gy1g674pmweh4j20pi0juwey.jpg" alt="image">  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>托管dll的插件式编程思路</title>
      <link href="/2016/11/30/DllPlugins/"/>
      <url>/2016/11/30/DllPlugins/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>动态加载外部托管式dll，通过Assembly反射得到类型，通过Activator.CreateInstance实例化<br><a id="more"></a><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> plugindir = System.IO.Directory.GetParent(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName).CreateSubdirectory(<span class="string">"startup"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> filesInPlugin <span class="keyword">in</span> plugindir.GetFiles())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (filesInPlugin.Extension.ToLower() == <span class="string">".dll"</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicLoadDLL</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Assembly ass = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicLoadDLL</span>(<span class="params"><span class="keyword">string</span> dllPath</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.ass = Assembly.LoadFrom(dllPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Assembly <span class="title">GetAssembly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type[] <span class="title">GetClass</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ass.GetTypes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Module[] <span class="title">GetModules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> ass.GetModules();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileStream[] <span class="title">GetFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> ass.GetFiles();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoadClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LoadClass dlc = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Type type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">object</span> obj = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoadClass</span>(<span class="params">Assembly ass, <span class="keyword">string</span> _nameSpace, <span class="keyword">string</span> classPath</span>)</span> &#123;</span><br><span class="line">        type = ass.GetType(_nameSpace + <span class="string">"."</span> + classPath);                   <span class="comment">//利用类的命名空间和名称得到类型</span></span><br><span class="line">        obj = Activator.CreateInstance(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoadClass <span class="title">GetInstance</span>(<span class="params">Assembly ass, <span class="keyword">string</span> _nameSpace, <span class="keyword">string</span> classPath</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dlc == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dlc = <span class="keyword">new</span> LoadClass(ass, _nameSpace, classPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dlc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyInfo[] <span class="title">GetAttrs</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        PropertyInfo[] prop = type.GetProperties();</span><br><span class="line">        <span class="keyword">return</span> prop;            <span class="comment">//返回属性集</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodInfo[] <span class="title">GetMethods</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        MethodInfo[] method = type.GetMethods(BindingFlags.NonPublic);</span><br><span class="line">        <span class="keyword">return</span> method;          <span class="comment">//返回方法集</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetAttrValue</span>(<span class="params"><span class="keyword">string</span> attrName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        PropertyInfo prop = type.GetProperty(attrName);         </span><br><span class="line">        <span class="keyword">return</span> prop.GetValue(obj,<span class="literal">null</span>);         <span class="comment">//返回属性值  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetAttrValue</span>(<span class="params"><span class="keyword">string</span> attrName, <span class="keyword">string</span> attrValue</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">       </span><br><span class="line">        PropertyInfo prop = type.GetProperty(attrName);                        </span><br><span class="line">        prop.SetValue(obj,attrValue,<span class="literal">null</span>);      <span class="comment">//设置属性值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetMethod</span>(<span class="params"><span class="keyword">string</span> methodName, <span class="keyword">object</span>[] paras, Type[] types</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        MethodInfo method = type.GetMethod(methodName, types);           <span class="comment">//通过方法名称获得方法          </span></span><br><span class="line">        <span class="keyword">return</span> method.Invoke(obj, paras);       <span class="comment">//执行方法  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d发布webGL可能需要注意的事项</title>
      <link href="/2016/10/27/helloU3dWebGl/"/>
      <url>/2016/10/27/helloU3dWebGl/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>浏览器支持:</p><p>Mozilla Firefox 42,Google Chrome 46,Apple Safari 9.0,MS Internet Explorer 11,MS Edge 13  </p><a id="more"></a><p>Safari不支持全屏</p><p>Chrome需要大量内存解析js代码，可能导致内存不足</p><p>IE11号称支持，但是太慢，导致webgl基本不可用</p><p>减小发布包的大小</p><p>尝试发布空场景，发布文件的全部大小接近6M。。太大了。其中js代码文件xxx.jsgz4.6M。。</p><p>优化png文件之类手段并不能减少发布包大小，因为unity最后实际使用的是自己的内部格式。</p><p>删除没用的资源也不行</p><p>使用Asset Bundle，而不是Resource，可以减少首次下载包的大小。这些其实web player时代就已经是这样了。</p><p>打包Asset Bundle的时候使用LZ4压缩格式。webgl不支持多线程，lzma压缩的bundle会导致主线程解压缩时的卡顿。</p><p>使用纹理压缩(DXT(Desktop platforms) or PVRTC)，在webgl中使用Crunch压缩选项。压缩网格（mesh）和动画（Animation）</p><p>不要引用System.dll 和 System.Xml.dll，尽量少用第三方dll</p><p>尽量只用.Net 2.0 subset API</p><p>设置Edit &gt; Project Settings &gt; Player &gt; Other Settings中的Strip Engine Code为选中，不发布无用的代码。在使用asset bundle的时候，选中此项可能会导致有些用户代码被跳过，从而在加载asset bundle的时候出现Could not produce class with ID XXX的错误。可以在项目中增加link.xml文件，强制unity包含指定类。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;linker&gt;</span><br><span class="line">    &lt;assembly fullname=&quot;UnityEngine&quot;&gt;</span><br><span class="line">        &lt;type fullname=&quot;UnityEngine.Collider&quot; preserve=&quot;all&quot;/&gt;</span><br><span class="line">    &lt;/assembly&gt;</span><br><span class="line">&lt;/linker&gt;</span><br></pre></td></tr></table></figure></p><p>设置Edit &gt; Project Settings &gt; Player &gt; Publishing Settings 中的Enable Exceptions popup为None，如果不需要处理异常。</p><p>设置memory size为合适的大小</p><p>在发布对话框中设置优化等级为fastest</p><p>正确配置web服务器，在 http 协议层使用gzip压缩</p><p>其他</p><p>webgl不支持movietexture，可以用HTML5 video element实现</p><p>wengl对GLSLS shader的限制比OpenGL ES 2.0更多</p><p>webgl不支持使用用户本地字体，字体必须包含在unity项目中</p><p>webgl不支持IP socket，包括C#的Socket库和UnityEngine.Network。可以用WWW。unity提供一套支持webgl的网络API，也可以用javascript的websockets自己实现。</p><p>webgl对unity音频API有大量限制</p><p>在大部分浏览器中，webgl后台运行时的更新频率会下降到每秒一次</p><p>wengl中，gc（垃圾回收）只能在每帧结束后进行，因此下面的代码会导致内存耗尽：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string hugeString = &quot;&quot;;</span><br><span class="line">for (int i = 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">    hugeString += &quot;foo&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> WrongNotes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web端加载xml时出错</title>
      <link href="/2016/10/19/loadxmlbug/"/>
      <url>/2016/10/19/loadxmlbug/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>web端加载xml时出现XmlException: Text node cannot appear in this state. Line 1, position 1. 错误  </p><a id="more"></a><p>用其他工具(我用sbulime)将xml另保存为utf-8，无bom信息头格式即可解决。</p>]]></content>
      
      
      <categories>
          
          <category> WrongNotes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg基础知识</title>
      <link href="/2016/04/21/ffmpegIntro/"/>
      <url>/2016/04/21/ffmpegIntro/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>帧率：  </p></blockquote><p>每秒显示图像数。影响画面流畅度，与画面流畅度成正比。标准影片(NTSC)29.97帧每秒(fps)，电影24帧每秒(fps)，欧洲标准25帧每秒(fps)。高帧速率拥有高品质，但文件尺寸也更大。想要降低带宽和cpu占用，可以选择低帧速率。  </p><a id="more"></a><blockquote><p>关键帧：  </p></blockquote><p>常用帧差异压缩图像，帧差异是判断从开始帧起哪些信息发生了变化。称为关键帧。关键帧包含图像所有信息，后来的帧仅包含改变了的信息。一般用途5秒设一个关键帧，RTSP流文件需要增加关键帧保证网络传输可靠性。</p><blockquote><p>码率：  </p></blockquote><p>比特率(bps)指每秒传送的比特(bit)数。比特率越高，传送的数据越大。比特率越高越清晰（前提是分辨率保持不变），分辨率越大视频尺寸越大。<br>帧率X分辨率=压缩前的每秒数据量。<br>码率(kbps)指每秒显示的图片进行压缩后的数据量。<br>码率越大，体积越大；码率越小，体积越小。<br>压缩比=压缩前的每秒数据量/码率  </p><blockquote><p>分辨率：  </p></blockquote><p>度量图像内数据量多少的一个参数，单位ppi。决定视频尺寸和像素量。<br>所谓清晰，是指画面十分细腻，没有马赛克。在码率一定的情况下，分辨率与清晰度成反比关系：分辨率越高，图像越不清晰，分辨率越低，图像越清晰。在分辨率一定的情况下，码率与清晰度成正比关系，码率越高，图像越清晰；码率越低，图像越不清晰。  </p><blockquote><p>时间戳：  </p></blockquote><p>音视频同步的最佳方案。选择一个线性递增的参考时钟，生成数据流依据参考时钟上时间给每个数据块打上时间戳。播放时读取数据块上时间戳同时参考当前参考时钟上时间来安排播放。如果数据块开始时间大于当前参考时钟时间则不急于播放改数据块直到参考时钟达到数据块的开始时间。如果数据块开始时间小于当前参考时钟时间则尽快播放这个数据块或索性丢弃以使播放进度追上参考时钟。</p><blockquote><p>FFmpeg是一个开源免费跨平台的自由软件。  </p></blockquote><p>提供了录制，转化，流化音视频的完整解决方案。由以下几部分组成：<br>FFmpeg：视频文件转换命令行工具<br>FFserver：基于HTTP,RTSP实时广播多媒体服务器<br>FFplay：媒体播放器<br>Libavcodec：包含所有FFmepg音视频编解码器的库<br>Libavformat：包含所有普通音视格式的解析器和产生器的库  </p><p>从视频中提取音频，忽略视频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i abc.mp4 -vn ViedoNo.mp3</span><br></pre></td></tr></table></figure></p><p>从视频中提取视频，忽略音频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i abc.mp4 -an AudioNo.mp4</span><br></pre></td></tr></table></figure></p><p>将视频，音频合并成一个视频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i AudioNo.mp4 -i ViedoNo.mp3 -vcodec copy -acodec copy output.mp4</span><br></pre></td></tr></table></figure></p><p>将视频 指定分辨率 导出成序列帧,r指定帧率每秒22帧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i abc.mp4 -s 1024x768 -r 22 -f image2 image-%5d.jpg</span><br></pre></td></tr></table></figure></p><p>将序列帧合并成视频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -r 22 -i image-%5d.jpg -vcodec mpeg4 video.mp4</span><br></pre></td></tr></table></figure></p><p>在视频第8秒出截一张图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i abc.mp4 -y -f image2 -ss 8 -t 0.001 -s 350x240 test.jpg</span><br></pre></td></tr></table></figure></p><p>把视频前30帧转换成一张gif<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i abc.mp4 -vframes 30 -y -f gif abc.gif</span><br></pre></td></tr></table></figure></p><p>转换视频格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 00.wmv 00.mp4</span><br></pre></td></tr></table></figure></p><p>播放视频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffplay file.avi</span><br></pre></td></tr></table></figure></p><p>把视频从1分20秒开始，长度30秒的视频裁剪出来，保存成一个视频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ss 0:1:20 -t 0:0:30 -i input.avi -vcodec copy -acodec copy output.avi</span><br></pre></td></tr></table></figure></p><p>拼接视频<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 1.mp4 -qscale 6 inputfile_01.mpg</span><br><span class="line">ffmpeg -i 2.mp4 -qscale 6 inputfile_02.mpg</span><br><span class="line">copy /b inputfile_01.mpg+inputfile_02.mpg inputfile_all.mpg</span><br><span class="line">ffmpeg -i inputfile_all.mpg -qscale 6 outputfile.mpg</span><br></pre></td></tr></table></figure></p><p>压缩视频,通常转成.mp4，采用H.264视频压缩算法和AAC音频压缩算法，视频帧率10fps，音频码率32k<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 10 -b:a 32k output.mp4</span><br></pre></td></tr></table></figure></p><p>增加水印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf &quot;movie=shuiyin.png[logo];[in][logo]overlay=10:10[out]&quot; out.mp4</span><br></pre></td></tr></table></figure></p><p>将视频转换成ts文件并生成m3u8列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -c:v libx264 -c:a aac -strict -2 -hls_time 10 -hls_list_size 0 output.m3u8</span><br></pre></td></tr></table></figure></p><p>修改视频尺寸<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf scale=400:480 -acodec aac -vcodec h264 output.mp4</span><br></pre></td></tr></table></figure></p><p>视频剪裁,剪裁区域左上角坐标0,420,长宽为1080,800<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -strict -2 -vf crop=1080:800:0:420 视频输出地址</span><br></pre></td></tr></table></figure></p><blockquote><p>ffmpeg获取  </p></blockquote><p>百度网盘链接：<a href="https://pan.baidu.com/s/1SIJ8iHm2po4wZqcg_2DH0A" target="_blank" rel="noopener">https://pan.baidu.com/s/1SIJ8iHm2po4wZqcg_2DH0A</a>   提取码：xp5j </p>]]></content>
      
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试unity3d遮挡剔除功能</title>
      <link href="/2016/04/14/TestU3dOcclusionCulling/"/>
      <url>/2016/04/14/TestU3dOcclusionCulling/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>unity版本4.6.3，遮挡剔除比以前版本更容易使用，设置好static，直接bake即可，打开Occlusion窗口选中Visualization(其下select a Camera from the scene选中场景里主角camera)可在编辑器里看效果。  </p><a id="more"></a><p><img src="http://ww3.sinaimg.cn/large/7ce5b833gw1f2w2v4pz60g20e50a0kjl.gif" alt="image">  </p><p>经测试，通过遮挡剔除大幅降低了drawcalls，视场景模型不同降低幅度不同。其实所有东西都已经加载进内存了，显示不显示出来能缓解大场景渲染Rendering网格贴图方面压力，想要优化内存还是要从其他如LOD,AssetBundle,机制等方面入手优化内存。  </p><p><img src="http://ww1.sinaimg.cn/large/7ce5b833gw1f2w97eg8qeg20b60ajqcx.gif" alt="image">  </p><p>将动态加载和遮挡剔除结合适用，测试可行，发布时的工程和开发搭建场景时的工程要是同一个工程，搭建好场景，bake好遮挡剔除，将需要动态加载的物体导出，从场景里删除。发布时加载原来物体仍有遮挡剔除信息。不便之处可改进流程解决。感觉麻烦。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
