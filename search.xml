<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OpenCV的Python实践(1)]]></title>
    <url>%2F2019%2F05%2F16%2FOpenCvPythonPractice-1%2F</url>
    <content type="text"><![CDATA[显示保存图片 12345678910111213141516171819202122232425262728#!D:\Python34\python.exe# -*- coding: utf-8 -*-#python3.6.8#显示保存图片import cv2 import numpy as npimport matplotlib # python -m pip install matplotlib-3.0.3-cp36-cp36m-win32.whl#print("cv2版本"+cv2.__version__)#print(np.version.version)#print(matplotlib.__version__)#读取图片img=cv2.imread('arterialImg.png',cv2.IMREAD_GRAYSCALE) img2=cv2.imread('arterialImg.png',cv2.IMREAD_COLOR) #cv2.IMREAD_COLOR 彩色模式忽略透明度，cv2.IMREAD_GRAYSCALE 灰度模式#显示图片cv2.imshow('image',img)cv2.imshow('image2',img2)k=cv2.waitKey(0) #0毫秒内无限等待键盘输入，检测键是否按下if k==27: cv2.destroyAllWindows() #ESC按下elif k==ord('s'): #print("保存图片") #cv2.imwrite("mess.jpg",img) cv2.destroyAllWindows()cv2.destroyAllWindows() print("结束") 使用MatplotlibMatplotlib是python的一个绘图库，包含各种各样的绘图方法。 123456789101112131415161718#!D:\Python34\python.exe# -*- coding: utf-8 -*-#python3.6.8#使用Matplotlibimport cv2 import numpy as npfrom matplotlib import pyplot as pltfrom matplotlib.font_manager import FontPropertiesfont_set=FontProperties(fname=r"c:\windows\fonts\simsun.ttc",size=12)img=cv2.imread('arterialImg.png',cv2.IMREAD_COLOR) plt.imshow(img,cmap='gray',interpolation='bicubic')plt.xlabel(u'年份',fontproperties=font_set)plt.ylabel(u'产量',fontproperties=font_set)plt.legend(prop=font_set,loc='best')plt.title("裤子",fontproperties=font_set)plt.show() 使用摄像头捕获视频123456789101112131415161718#!D:\Python34\python.exe# -*- coding: utf-8 -*-#python3.6.8#使用摄像头捕获视频import cv2 import numpy as npcap=cv2.VideoCapture(0)while(True): ret,frame=cap.read() gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY) cv2.imshow('frame',gray) if cv2.waitKey(1)&amp; 0xFF == ord('q'): breakcap.release()cv2.destroyAllWindows() cap.isOpened()可检查摄像头设备是否初始化，如果返回True则没问题，否则要使用cap.open()cap.get(propid)可获取视频一些参数信息，propid于0–18之间,如cap.get(3)和cap.get(4)可查看每帧宽和高cap.set(propid,value)可修改视频属性，如cap.set(3,320)将视频宽度设置为320]]></content>
      <categories>
        <category>OpenCV的Python实践</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基础语法]]></title>
    <url>%2F2019%2F05%2F15%2FfirstBlog%2F</url>
    <content type="text"><![CDATA[标题Markdown支持6种级别的标题，对应html标签h1~h6123456# h1## h2### h3#### h4##### h5###### h6 段落及区块引用Markdown其实就是一种易于编写的普通文本，只不过加入了部分渲染文本的标签而已。其最终依然会转换为html标签，因此使用Markdown分段非常简单，前后至少保留一个空行即可。 另外一个比较常见的需求就是，我们可能希望对某段文字进行强调处理。Markdown提供了一个特殊符号&gt;用于段首进行强调，被强调的文字部分将会高亮显示1&gt; 这段文字将被高亮强调显示 这段文字将被高亮强调显示 插入链接或图片引用图片和链接的唯一区别就是在最前方添加一个感叹号。123直接链接：&lt;http://www.baidu.com&gt;[点击跳转至百度](http://www.baidu.com)![图片](https://box.bdimg.com/static/fisp_static/common/img/searchbox/logo_news_276_88_1f9876a.png) 直接链接：http://www.baidu.com点击跳转至百度 列表Markdown支持有序列表和无序列表两种形式：无序列表使用*或+或-标识有序列表使用数字标识 例如1.123456789101112131415* 黄瓜* 玉米* 茄子+ 黄瓜+ 玉米+ 茄子- 黄瓜- 玉米- 茄子1. 黄瓜2. 玉米3. 茄子 黄瓜 玉米 茄子 黄瓜 玉米 茄子 黄瓜 玉米 茄子 黄瓜 玉米 茄子 如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格 如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格12345678910* 段落一 小段一* 段落二 小段二* 段落一 &gt; 区块标记一* 段落二 &gt; 区块标记二 段落一 小段一 段落二 小段二 段落一 区块标记一 段落二 区块标记二 记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。 分割线12***--- 对部分文字强调123456789*这里是斜体*_这里是斜体_**这里是加粗**__这里是加粗__上标：O&lt;sub&gt;2&lt;/sub&gt;，下标：3&lt;sup&gt;2&lt;/sup&gt;简称或缩写:The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;. 这里是斜体这里是斜体 这里是加粗这里是加粗 上标：O2，下标：32The HTML specification is maintained by the W3C. 插入表格三个短斜杠左右的冒号用于控制对齐方式只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。123表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二 表头 条目一 条目二 项目 项目一 项目二 特殊符号使用反斜杠\插入语法中用到的特殊符号1234567891011121314151617\\ 反斜线\` 反引号\* 星号\_ 底线\&#123; \&#125; 花括号\[ \] 方括号\( \) 括弧\# 井字号\+ 加号\- 减号\. 英文句点\! 惊叹号&amp;copy; &amp; &amp;uml; &amp;trade; &amp;iexcl; &amp;pound;&amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot;X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14; &amp;times; &amp;divide; &amp;raquo; \ 反斜线` 反引号* 星号_ 底线{ } 花括号[ ] 方括号( ) 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 &copy; &amp; &uml; &trade; &iexcl; &pound;&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 文字上色Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：1&lt;font color=&apos;#ff0000&apos;&gt;红色&lt;/font&gt; 红色 代码12345```javascript function test() &#123; console.log(&quot;Hello world!&quot;); &#125;``` 123function test() &#123; console.log("Hello world!");&#125; 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charest="utf-8" /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type="text/css"&gt; ul&#123;list-style: none;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class="text-xxl"&gt;Hello world!&lt;/h1&gt; &lt;p class="text-green"&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
</search>
